/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.ApiKey;
import org.openapitools.client.model.ApiKeyIds;
import org.openapitools.client.model.ApiKeys;
import org.openapitools.client.model.Authorizer;
import org.openapitools.client.model.Authorizers;
import org.openapitools.client.model.BasePathMapping;
import org.openapitools.client.model.BasePathMappings;
import org.openapitools.client.model.ClientCertificate;
import org.openapitools.client.model.ClientCertificates;
import org.openapitools.client.model.CreateApiKeyRequest;
import org.openapitools.client.model.CreateAuthorizerRequest;
import org.openapitools.client.model.CreateBasePathMappingRequest;
import org.openapitools.client.model.CreateDeploymentRequest;
import org.openapitools.client.model.CreateDocumentationPartRequest;
import org.openapitools.client.model.CreateDocumentationVersionRequest;
import org.openapitools.client.model.CreateDomainNameRequest;
import org.openapitools.client.model.CreateModelRequest;
import org.openapitools.client.model.CreateRequestValidatorRequest;
import org.openapitools.client.model.CreateResourceRequest;
import org.openapitools.client.model.CreateRestApiRequest;
import org.openapitools.client.model.CreateStageRequest;
import org.openapitools.client.model.CreateUsagePlanKeyRequest;
import org.openapitools.client.model.CreateUsagePlanRequest;
import org.openapitools.client.model.CreateVpcLinkRequest;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.Deployments;
import org.openapitools.client.model.DocumentationPart;
import org.openapitools.client.model.DocumentationPartIds;
import org.openapitools.client.model.DocumentationParts;
import org.openapitools.client.model.DocumentationVersion;
import org.openapitools.client.model.DocumentationVersions;
import org.openapitools.client.model.DomainName;
import org.openapitools.client.model.DomainNames;
import org.openapitools.client.model.ExportResponse;
import org.openapitools.client.model.GatewayResponse;
import org.openapitools.client.model.GatewayResponses;
import org.openapitools.client.model.GenerateClientCertificateRequest;
import org.openapitools.client.model.ImportApiKeysRequest;
import org.openapitools.client.model.ImportDocumentationPartsRequest;
import org.openapitools.client.model.ImportRestApiRequest;
import org.openapitools.client.model.Integration;
import org.openapitools.client.model.IntegrationResponse;
import org.openapitools.client.model.Method;
import org.openapitools.client.model.MethodResponse;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.Models;
import org.openapitools.client.model.PutGatewayResponseRequest;
import org.openapitools.client.model.PutIntegrationRequest;
import org.openapitools.client.model.PutIntegrationResponseRequest;
import org.openapitools.client.model.PutMethodRequest;
import org.openapitools.client.model.PutMethodResponseRequest;
import org.openapitools.client.model.PutRestApiRequest;
import org.openapitools.client.model.RequestValidator;
import org.openapitools.client.model.RequestValidators;
import org.openapitools.client.model.Resource;
import org.openapitools.client.model.Resources;
import org.openapitools.client.model.RestApi;
import org.openapitools.client.model.RestApis;
import org.openapitools.client.model.SdkResponse;
import org.openapitools.client.model.SdkType;
import org.openapitools.client.model.SdkTypes;
import org.openapitools.client.model.Stage;
import org.openapitools.client.model.Stages;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.Tags;
import org.openapitools.client.model.Template;
import org.openapitools.client.model.TestInvokeAuthorizerRequest;
import org.openapitools.client.model.TestInvokeAuthorizerResponse;
import org.openapitools.client.model.TestInvokeMethodRequest;
import org.openapitools.client.model.TestInvokeMethodResponse;
import org.openapitools.client.model.UpdateApiKeyRequest;
import org.openapitools.client.model.Usage;
import org.openapitools.client.model.UsagePlan;
import org.openapitools.client.model.UsagePlanKey;
import org.openapitools.client.model.UsagePlanKeys;
import org.openapitools.client.model.UsagePlans;
import org.openapitools.client.model.VpcLink;
import org.openapitools.client.model.VpcLinks;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create an ApiKey resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        CreateApiKeyRequest createApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ApiKey response = api.createApiKey(createApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a new Authorizer resource to an existing RestApi resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAuthorizerTest() throws ApiException {
        String restapiId = null;
        CreateAuthorizerRequest createAuthorizerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Authorizer response = api.createAuthorizer(restapiId, createAuthorizerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new BasePathMapping resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBasePathMappingTest() throws ApiException {
        String domainName = null;
        CreateBasePathMappingRequest createBasePathMappingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BasePathMapping response = api.createBasePathMapping(domainName, createBasePathMappingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Deployment resource, which makes a specified RestApi callable over the internet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeploymentTest() throws ApiException {
        String restapiId = null;
        CreateDeploymentRequest createDeploymentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Deployment response = api.createDeployment(restapiId, createDeploymentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a documentation part.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentationPartTest() throws ApiException {
        String restapiId = null;
        CreateDocumentationPartRequest createDocumentationPartRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DocumentationPart response = api.createDocumentationPart(restapiId, createDocumentationPartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a documentation version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentationVersionTest() throws ApiException {
        String restapiId = null;
        CreateDocumentationVersionRequest createDocumentationVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DocumentationVersion response = api.createDocumentationVersion(restapiId, createDocumentationVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new domain name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDomainNameTest() throws ApiException {
        CreateDomainNameRequest createDomainNameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DomainName response = api.createDomainName(createDomainNameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a new Model resource to an existing RestApi resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelTest() throws ApiException {
        String restapiId = null;
        CreateModelRequest createModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Model response = api.createModel(restapiId, createModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a RequestValidator of a given RestApi.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRequestValidatorTest() throws ApiException {
        String restapiId = null;
        CreateRequestValidatorRequest createRequestValidatorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RequestValidator response = api.createRequestValidator(restapiId, createRequestValidatorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Resource resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourceTest() throws ApiException {
        String restapiId = null;
        String parentId = null;
        CreateResourceRequest createResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Resource response = api.createResource(restapiId, parentId, createResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new RestApi resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRestApiTest() throws ApiException {
        CreateRestApiRequest createRestApiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestApi response = api.createRestApi(createRestApiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new Stage resource that references a pre-existing Deployment for the API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStageTest() throws ApiException {
        String restapiId = null;
        CreateStageRequest createStageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Stage response = api.createStage(restapiId, createStageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUsagePlanTest() throws ApiException {
        CreateUsagePlanRequest createUsagePlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UsagePlan response = api.createUsagePlan(createUsagePlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a usage plan key for adding an existing API key to a usage plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUsagePlanKeyTest() throws ApiException {
        String usageplanId = null;
        CreateUsagePlanKeyRequest createUsagePlanKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UsagePlanKey response = api.createUsagePlanKey(usageplanId, createUsagePlanKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a VPC link, under the caller&#39;s account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVpcLinkTest() throws ApiException {
        CreateVpcLinkRequest createVpcLinkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        VpcLink response = api.createVpcLink(createVpcLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the ApiKey resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiKeyTest() throws ApiException {
        String apiKey = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteApiKey(apiKey, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing Authorizer resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAuthorizerTest() throws ApiException {
        String restapiId = null;
        String authorizerId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAuthorizer(restapiId, authorizerId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the BasePathMapping resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBasePathMappingTest() throws ApiException {
        String domainName = null;
        String basePath = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteBasePathMapping(domainName, basePath, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the ClientCertificate resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClientCertificateTest() throws ApiException {
        String clientcertificateId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteClientCertificate(clientcertificateId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Deployment resource. Deleting a deployment will only succeed if there are no Stage resources associated with it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeploymentTest() throws ApiException {
        String restapiId = null;
        String deploymentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDeployment(restapiId, deploymentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a documentation part
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentationPartTest() throws ApiException {
        String restapiId = null;
        String partId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDocumentationPart(restapiId, partId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a documentation version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentationVersionTest() throws ApiException {
        String restapiId = null;
        String docVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDocumentationVersion(restapiId, docVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the DomainName resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainNameTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDomainName(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGatewayResponseTest() throws ApiException {
        String restapiId = null;
        String responseType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteGatewayResponse(restapiId, responseType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Represents a delete integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIntegrationTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteIntegration(restapiId, resourceId, httpMethod, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Represents a delete integration response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIntegrationResponseTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String statusCode = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteIntegrationResponse(restapiId, resourceId, httpMethod, statusCode, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing Method resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMethodTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteMethod(restapiId, resourceId, httpMethod, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing MethodResponse resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMethodResponseTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String statusCode = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteMethodResponse(restapiId, resourceId, httpMethod, statusCode, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        String restapiId = null;
        String modelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModel(restapiId, modelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a RequestValidator of a given RestApi.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRequestValidatorTest() throws ApiException {
        String restapiId = null;
        String requestvalidatorId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRequestValidator(restapiId, requestvalidatorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Resource resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourceTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteResource(restapiId, resourceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRestApiTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRestApi(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Stage resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStageTest() throws ApiException {
        String restapiId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteStage(restapiId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a usage plan of a given plan Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsagePlanTest() throws ApiException {
        String usageplanId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUsagePlan(usageplanId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a usage plan key and remove the underlying API key from the associated usage plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsagePlanKeyTest() throws ApiException {
        String usageplanId = null;
        String keyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUsagePlanKey(usageplanId, keyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing VpcLink of a specified identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVpcLinkTest() throws ApiException {
        String vpclinkId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteVpcLink(vpclinkId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Flushes all authorizer cache entries on a stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flushStageAuthorizersCacheTest() throws ApiException {
        String restapiId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.flushStageAuthorizersCache(restapiId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Flushes a stage&#39;s cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flushStageCacheTest() throws ApiException {
        String restapiId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.flushStageCache(restapiId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Generates a ClientCertificate resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateClientCertificateTest() throws ApiException {
        GenerateClientCertificateRequest generateClientCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ClientCertificate response = api.generateClientCertificate(generateClientCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the current Account resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Account response = api.getAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the current ApiKey resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiKeyTest() throws ApiException {
        String apiKey = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean includeValue = null;
        ApiKey response = api.getApiKey(apiKey, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeValue);
        // TODO: test validations
    }

    /**
     * Gets information about the current ApiKeys resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiKeysTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        String name = null;
        String customerId = null;
        Boolean includeValues = null;
        ApiKeys response = api.getApiKeys(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit, name, customerId, includeValues);
        // TODO: test validations
    }

    /**
     * Describe an existing Authorizer resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizerTest() throws ApiException {
        String restapiId = null;
        String authorizerId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Authorizer response = api.getAuthorizer(restapiId, authorizerId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describe an existing Authorizers resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizersTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        Authorizers response = api.getAuthorizers(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Describe a BasePathMapping resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBasePathMappingTest() throws ApiException {
        String domainName = null;
        String basePath = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BasePathMapping response = api.getBasePathMapping(domainName, basePath, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Represents a collection of BasePathMapping resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBasePathMappingsTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        BasePathMappings response = api.getBasePathMappings(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Gets information about the current ClientCertificate resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientCertificateTest() throws ApiException {
        String clientcertificateId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ClientCertificate response = api.getClientCertificate(clientcertificateId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a collection of ClientCertificate resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientCertificatesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        ClientCertificates response = api.getClientCertificates(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Gets information about a Deployment resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentTest() throws ApiException {
        String restapiId = null;
        String deploymentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> embed = null;
        Deployment response = api.getDeployment(restapiId, deploymentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, embed);
        // TODO: test validations
    }

    /**
     * Gets information about a Deployments collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentsTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        Deployments response = api.getDeployments(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Gets a documentation part.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentationPartTest() throws ApiException {
        String restapiId = null;
        String partId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DocumentationPart response = api.getDocumentationPart(restapiId, partId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets documentation parts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentationPartsTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String type = null;
        String name = null;
        String path = null;
        String position = null;
        Integer limit = null;
        String locationStatus = null;
        DocumentationParts response = api.getDocumentationParts(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, name, path, position, limit, locationStatus);
        // TODO: test validations
    }

    /**
     * Gets a documentation version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentationVersionTest() throws ApiException {
        String restapiId = null;
        String docVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DocumentationVersion response = api.getDocumentationVersion(restapiId, docVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets documentation versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentationVersionsTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        DocumentationVersions response = api.getDocumentationVersions(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Represents a domain name that is contained in a simpler, more intuitive URL that can be called.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainNameTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DomainName response = api.getDomainName(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Represents a collection of DomainName resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainNamesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        DomainNames response = api.getDomainNames(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Exports a deployed version of a RestApi in a specified format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExportTest() throws ApiException {
        String restapiId = null;
        String stageName = null;
        String exportType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Map<String, String> parameters = null;
        String accept = null;
        ExportResponse response = api.getExport(restapiId, stageName, exportType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, parameters, accept);
        // TODO: test validations
    }

    /**
     * Gets a GatewayResponse of a specified response type on the given RestApi.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGatewayResponseTest() throws ApiException {
        String restapiId = null;
        String responseType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GatewayResponse response = api.getGatewayResponse(restapiId, responseType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGatewayResponsesTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        GatewayResponses response = api.getGatewayResponses(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Get the integration settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integration response = api.getIntegration(restapiId, resourceId, httpMethod, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Represents a get integration response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationResponseTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String statusCode = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        IntegrationResponse response = api.getIntegrationResponse(restapiId, resourceId, httpMethod, statusCode, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describe an existing Method resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMethodTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Method response = api.getMethod(restapiId, resourceId, httpMethod, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a MethodResponse resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMethodResponseTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String statusCode = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MethodResponse response = api.getMethodResponse(restapiId, resourceId, httpMethod, statusCode, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an existing model defined for a RestApi resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelTest() throws ApiException {
        String restapiId = null;
        String modelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean flatten = null;
        Model response = api.getModel(restapiId, modelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, flatten);
        // TODO: test validations
    }

    /**
     * Generates a sample mapping template that can be used to transform a payload into the structure of a model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelTemplateTest() throws ApiException {
        String restapiId = null;
        String modelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Template response = api.getModelTemplate(restapiId, modelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes existing Models defined for a RestApi resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelsTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        Models response = api.getModels(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Gets a RequestValidator of a given RestApi.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRequestValidatorTest() throws ApiException {
        String restapiId = null;
        String requestvalidatorId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RequestValidator response = api.getRequestValidator(restapiId, requestvalidatorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the RequestValidators collection of a given RestApi.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRequestValidatorsTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        RequestValidators response = api.getRequestValidators(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Lists information about a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> embed = null;
        Resource response = api.getResource(restapiId, resourceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, embed);
        // TODO: test validations
    }

    /**
     * Lists information about a collection of Resource resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcesTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        List<String> embed = null;
        Resources response = api.getResources(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit, embed);
        // TODO: test validations
    }

    /**
     * Lists the RestApi resource in the collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRestApiTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestApi response = api.getRestApi(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the RestApis resources for your collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRestApisTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        RestApis response = api.getRestApis(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Generates a client SDK for a RestApi and Stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSdkTest() throws ApiException {
        String restapiId = null;
        String stageName = null;
        String sdkType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Map<String, String> parameters = null;
        SdkResponse response = api.getSdk(restapiId, stageName, sdkType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, parameters);
        // TODO: test validations
    }

    /**
     * Gets an SDK type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSdkTypeTest() throws ApiException {
        String sdktypeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SdkType response = api.getSdkType(sdktypeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets SDK types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSdkTypesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        SdkTypes response = api.getSdkTypes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Gets information about a Stage resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStageTest() throws ApiException {
        String restapiId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Stage response = api.getStage(restapiId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about one or more Stage resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStagesTest() throws ApiException {
        String restapiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String deploymentId = null;
        Stages response = api.getStages(restapiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deploymentId);
        // TODO: test validations
    }

    /**
     * Gets the Tags collection for a given resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        Tags response = api.getTags(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Gets the usage data of a usage plan in a specified time interval.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsageTest() throws ApiException {
        String usageplanId = null;
        String startDate = null;
        String endDate = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String keyId = null;
        String position = null;
        Integer limit = null;
        Usage response = api.getUsage(usageplanId, startDate, endDate, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, keyId, position, limit);
        // TODO: test validations
    }

    /**
     * Gets a usage plan of a given plan identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsagePlanTest() throws ApiException {
        String usageplanId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UsagePlan response = api.getUsagePlan(usageplanId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a usage plan key of a given key identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsagePlanKeyTest() throws ApiException {
        String usageplanId = null;
        String keyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UsagePlanKey response = api.getUsagePlanKey(usageplanId, keyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets all the usage plan keys representing the API keys added to a specified usage plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsagePlanKeysTest() throws ApiException {
        String usageplanId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        String name = null;
        UsagePlanKeys response = api.getUsagePlanKeys(usageplanId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit, name);
        // TODO: test validations
    }

    /**
     * Gets all the usage plans of the caller&#39;s account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsagePlansTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        String keyId = null;
        Integer limit = null;
        UsagePlans response = api.getUsagePlans(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, keyId, limit);
        // TODO: test validations
    }

    /**
     * Gets a specified VPC link under the caller&#39;s account in a region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVpcLinkTest() throws ApiException {
        String vpclinkId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        VpcLink response = api.getVpcLink(vpclinkId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the VpcLinks collection under the caller&#39;s account in a selected region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVpcLinksTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String position = null;
        Integer limit = null;
        VpcLinks response = api.getVpcLinks(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, position, limit);
        // TODO: test validations
    }

    /**
     * Import API keys from an external source, such as a CSV-formatted file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importApiKeysTest() throws ApiException {
        String format = null;
        String mode = null;
        ImportApiKeysRequest importApiKeysRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean failonwarnings = null;
        ApiKeyIds response = api.importApiKeys(format, mode, importApiKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failonwarnings);
        // TODO: test validations
    }

    /**
     * Imports documentation parts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importDocumentationPartsTest() throws ApiException {
        String restapiId = null;
        ImportDocumentationPartsRequest importDocumentationPartsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String mode = null;
        Boolean failonwarnings = null;
        DocumentationPartIds response = api.importDocumentationParts(restapiId, importDocumentationPartsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, mode, failonwarnings);
        // TODO: test validations
    }

    /**
     * A feature of the API Gateway control service for creating a new API from an external API definition file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importRestApiTest() throws ApiException {
        String mode = null;
        ImportRestApiRequest importRestApiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean failonwarnings = null;
        Map<String, String> parameters = null;
        RestApi response = api.importRestApi(mode, importRestApiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failonwarnings, parameters);
        // TODO: test validations
    }

    /**
     * Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putGatewayResponseTest() throws ApiException {
        String restapiId = null;
        String responseType = null;
        PutGatewayResponseRequest putGatewayResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GatewayResponse response = api.putGatewayResponse(restapiId, responseType, putGatewayResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets up a method&#39;s integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putIntegrationTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        PutIntegrationRequest putIntegrationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integration response = api.putIntegration(restapiId, resourceId, httpMethod, putIntegrationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Represents a put integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putIntegrationResponseTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String statusCode = null;
        PutIntegrationResponseRequest putIntegrationResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        IntegrationResponse response = api.putIntegrationResponse(restapiId, resourceId, httpMethod, statusCode, putIntegrationResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add a method to an existing Resource resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMethodTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        PutMethodRequest putMethodRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Method response = api.putMethod(restapiId, resourceId, httpMethod, putMethodRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a MethodResponse to an existing Method resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMethodResponseTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String statusCode = null;
        PutMethodResponseRequest putMethodResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MethodResponse response = api.putMethodResponse(restapiId, resourceId, httpMethod, statusCode, putMethodResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRestApiTest() throws ApiException {
        String restapiId = null;
        PutRestApiRequest putRestApiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String mode = null;
        Boolean failonwarnings = null;
        Map<String, String> parameters = null;
        RestApi response = api.putRestApi(restapiId, putRestApiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, mode, failonwarnings, parameters);
        // TODO: test validations
    }

    /**
     * Adds or updates a tag on a given resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Simulate the execution of an Authorizer in your RestApi with headers, parameters, and an incoming request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testInvokeAuthorizerTest() throws ApiException {
        String restapiId = null;
        String authorizerId = null;
        TestInvokeAuthorizerRequest testInvokeAuthorizerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestInvokeAuthorizerResponse response = api.testInvokeAuthorizer(restapiId, authorizerId, testInvokeAuthorizerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Simulate the invocation of a Method in your RestApi with headers, parameters, and an incoming request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testInvokeMethodTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        TestInvokeMethodRequest testInvokeMethodRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestInvokeMethodResponse response = api.testInvokeMethod(restapiId, resourceId, httpMethod, testInvokeMethodRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a tag from a given resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about the current Account resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Account response = api.updateAccount(updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about an ApiKey resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiKeyTest() throws ApiException {
        String apiKey = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ApiKey response = api.updateApiKey(apiKey, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing Authorizer resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAuthorizerTest() throws ApiException {
        String restapiId = null;
        String authorizerId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Authorizer response = api.updateAuthorizer(restapiId, authorizerId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about the BasePathMapping resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBasePathMappingTest() throws ApiException {
        String domainName = null;
        String basePath = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BasePathMapping response = api.updateBasePathMapping(domainName, basePath, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about an ClientCertificate resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClientCertificateTest() throws ApiException {
        String clientcertificateId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ClientCertificate response = api.updateClientCertificate(clientcertificateId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about a Deployment resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeploymentTest() throws ApiException {
        String restapiId = null;
        String deploymentId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Deployment response = api.updateDeployment(restapiId, deploymentId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a documentation part.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentationPartTest() throws ApiException {
        String restapiId = null;
        String partId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DocumentationPart response = api.updateDocumentationPart(restapiId, partId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a documentation version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentationVersionTest() throws ApiException {
        String restapiId = null;
        String docVersion = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DocumentationVersion response = api.updateDocumentationVersion(restapiId, docVersion, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about the DomainName resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainNameTest() throws ApiException {
        String domainName = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DomainName response = api.updateDomainName(domainName, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a GatewayResponse of a specified response type on the given RestApi.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGatewayResponseTest() throws ApiException {
        String restapiId = null;
        String responseType = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GatewayResponse response = api.updateGatewayResponse(restapiId, responseType, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Represents an update integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIntegrationTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integration response = api.updateIntegration(restapiId, resourceId, httpMethod, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Represents an update integration response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIntegrationResponseTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String statusCode = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        IntegrationResponse response = api.updateIntegrationResponse(restapiId, resourceId, httpMethod, statusCode, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing Method resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMethodTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Method response = api.updateMethod(restapiId, resourceId, httpMethod, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing MethodResponse resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMethodResponseTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        String httpMethod = null;
        String statusCode = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MethodResponse response = api.updateMethodResponse(restapiId, resourceId, httpMethod, statusCode, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about a model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateModelTest() throws ApiException {
        String restapiId = null;
        String modelName = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Model response = api.updateModel(restapiId, modelName, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a RequestValidator of a given RestApi.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRequestValidatorTest() throws ApiException {
        String restapiId = null;
        String requestvalidatorId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RequestValidator response = api.updateRequestValidator(restapiId, requestvalidatorId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about a Resource resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceTest() throws ApiException {
        String restapiId = null;
        String resourceId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Resource response = api.updateResource(restapiId, resourceId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about the specified API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRestApiTest() throws ApiException {
        String restapiId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestApi response = api.updateRestApi(restapiId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes information about a Stage resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStageTest() throws ApiException {
        String restapiId = null;
        String stageName = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Stage response = api.updateStage(restapiId, stageName, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUsageTest() throws ApiException {
        String usageplanId = null;
        String keyId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Usage response = api.updateUsage(usageplanId, keyId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a usage plan of a given plan Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUsagePlanTest() throws ApiException {
        String usageplanId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UsagePlan response = api.updateUsagePlan(usageplanId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing VpcLink of a specified identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVpcLinkTest() throws ApiException {
        String vpclinkId = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        VpcLink response = api.updateVpcLink(vpclinkId, updateApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
