/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class MutualTlsAuthenticationInput {
  public static final String SERIALIZED_NAME_TRUSTSTORE_URI = "truststoreUri";
  @SerializedName(SERIALIZED_NAME_TRUSTSTORE_URI)
  @javax.annotation.Nullable
  private String truststoreUri;

  public static final String SERIALIZED_NAME_TRUSTSTORE_VERSION = "truststoreVersion";
  @SerializedName(SERIALIZED_NAME_TRUSTSTORE_VERSION)
  @javax.annotation.Nullable
  private String truststoreVersion;

  public MutualTlsAuthenticationInput() {
  }

  public MutualTlsAuthenticationInput truststoreUri(@javax.annotation.Nullable String truststoreUri) {
    this.truststoreUri = truststoreUri;
    return this;
  }

  /**
   * Get truststoreUri
   * @return truststoreUri
   */
  @javax.annotation.Nullable
  public String getTruststoreUri() {
    return truststoreUri;
  }

  public void setTruststoreUri(@javax.annotation.Nullable String truststoreUri) {
    this.truststoreUri = truststoreUri;
  }


  public MutualTlsAuthenticationInput truststoreVersion(@javax.annotation.Nullable String truststoreVersion) {
    this.truststoreVersion = truststoreVersion;
    return this;
  }

  /**
   * Get truststoreVersion
   * @return truststoreVersion
   */
  @javax.annotation.Nullable
  public String getTruststoreVersion() {
    return truststoreVersion;
  }

  public void setTruststoreVersion(@javax.annotation.Nullable String truststoreVersion) {
    this.truststoreVersion = truststoreVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MutualTlsAuthenticationInput mutualTlsAuthenticationInput = (MutualTlsAuthenticationInput) o;
    return Objects.equals(this.truststoreUri, mutualTlsAuthenticationInput.truststoreUri) &&
        Objects.equals(this.truststoreVersion, mutualTlsAuthenticationInput.truststoreVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(truststoreUri, truststoreVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MutualTlsAuthenticationInput {\n");
    sb.append("    truststoreUri: ").append(toIndentedString(truststoreUri)).append("\n");
    sb.append("    truststoreVersion: ").append(toIndentedString(truststoreVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("truststoreUri");
    openapiFields.add("truststoreVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MutualTlsAuthenticationInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MutualTlsAuthenticationInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MutualTlsAuthenticationInput is not found in the empty JSON string", MutualTlsAuthenticationInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MutualTlsAuthenticationInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MutualTlsAuthenticationInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `truststoreUri`
      if (jsonObj.get("truststoreUri") != null && !jsonObj.get("truststoreUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("truststoreUri"));
      }
      // validate the optional field `truststoreVersion`
      if (jsonObj.get("truststoreVersion") != null && !jsonObj.get("truststoreVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("truststoreVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MutualTlsAuthenticationInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MutualTlsAuthenticationInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MutualTlsAuthenticationInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MutualTlsAuthenticationInput.class));

       return (TypeAdapter<T>) new TypeAdapter<MutualTlsAuthenticationInput>() {
           @Override
           public void write(JsonWriter out, MutualTlsAuthenticationInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MutualTlsAuthenticationInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MutualTlsAuthenticationInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MutualTlsAuthenticationInput
   * @throws IOException if the JSON string is invalid with respect to MutualTlsAuthenticationInput
   */
  public static MutualTlsAuthenticationInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MutualTlsAuthenticationInput.class);
  }

  /**
   * Convert an instance of MutualTlsAuthenticationInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

