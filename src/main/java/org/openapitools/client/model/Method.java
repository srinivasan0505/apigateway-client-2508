/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MethodMethodIntegration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Represents a client-facing interface by which the client calls the API to access back-end resources. A Method resource is integrated with an Integration resource. Both consist of a request and one or more responses. The method request takes the client input that is passed to the back end through the integration request. A method response returns the output from the back end to the client through an integration response. A method request is embodied in a Method resource, whereas an integration request is embodied in an Integration resource. On the other hand, a method response is represented by a MethodResponse resource, whereas an integration response is represented by an IntegrationResponse resource. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class Method {
  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  @javax.annotation.Nullable
  private String httpMethod;

  public static final String SERIALIZED_NAME_AUTHORIZATION_TYPE = "authorizationType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TYPE)
  @javax.annotation.Nullable
  private String authorizationType;

  public static final String SERIALIZED_NAME_AUTHORIZER_ID = "authorizerId";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_ID)
  @javax.annotation.Nullable
  private String authorizerId;

  public static final String SERIALIZED_NAME_API_KEY_REQUIRED = "apiKeyRequired";
  @SerializedName(SERIALIZED_NAME_API_KEY_REQUIRED)
  @javax.annotation.Nullable
  private Boolean apiKeyRequired;

  public static final String SERIALIZED_NAME_REQUEST_VALIDATOR_ID = "requestValidatorId";
  @SerializedName(SERIALIZED_NAME_REQUEST_VALIDATOR_ID)
  @javax.annotation.Nullable
  private String requestValidatorId;

  public static final String SERIALIZED_NAME_OPERATION_NAME = "operationName";
  @SerializedName(SERIALIZED_NAME_OPERATION_NAME)
  @javax.annotation.Nullable
  private String operationName;

  public static final String SERIALIZED_NAME_REQUEST_PARAMETERS = "requestParameters";
  @SerializedName(SERIALIZED_NAME_REQUEST_PARAMETERS)
  @javax.annotation.Nullable
  private Map requestParameters;

  public static final String SERIALIZED_NAME_REQUEST_MODELS = "requestModels";
  @SerializedName(SERIALIZED_NAME_REQUEST_MODELS)
  @javax.annotation.Nullable
  private Map requestModels;

  public static final String SERIALIZED_NAME_METHOD_RESPONSES = "methodResponses";
  @SerializedName(SERIALIZED_NAME_METHOD_RESPONSES)
  @javax.annotation.Nullable
  private Map methodResponses;

  public static final String SERIALIZED_NAME_METHOD_INTEGRATION = "methodIntegration";
  @SerializedName(SERIALIZED_NAME_METHOD_INTEGRATION)
  @javax.annotation.Nullable
  private MethodMethodIntegration methodIntegration;

  public static final String SERIALIZED_NAME_AUTHORIZATION_SCOPES = "authorizationScopes";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_SCOPES)
  @javax.annotation.Nullable
  private List authorizationScopes;

  public Method() {
  }

  public Method httpMethod(@javax.annotation.Nullable String httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * Get httpMethod
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public String getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(@javax.annotation.Nullable String httpMethod) {
    this.httpMethod = httpMethod;
  }


  public Method authorizationType(@javax.annotation.Nullable String authorizationType) {
    this.authorizationType = authorizationType;
    return this;
  }

  /**
   * Get authorizationType
   * @return authorizationType
   */
  @javax.annotation.Nullable
  public String getAuthorizationType() {
    return authorizationType;
  }

  public void setAuthorizationType(@javax.annotation.Nullable String authorizationType) {
    this.authorizationType = authorizationType;
  }


  public Method authorizerId(@javax.annotation.Nullable String authorizerId) {
    this.authorizerId = authorizerId;
    return this;
  }

  /**
   * Get authorizerId
   * @return authorizerId
   */
  @javax.annotation.Nullable
  public String getAuthorizerId() {
    return authorizerId;
  }

  public void setAuthorizerId(@javax.annotation.Nullable String authorizerId) {
    this.authorizerId = authorizerId;
  }


  public Method apiKeyRequired(@javax.annotation.Nullable Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
    return this;
  }

  /**
   * Get apiKeyRequired
   * @return apiKeyRequired
   */
  @javax.annotation.Nullable
  public Boolean getApiKeyRequired() {
    return apiKeyRequired;
  }

  public void setApiKeyRequired(@javax.annotation.Nullable Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
  }


  public Method requestValidatorId(@javax.annotation.Nullable String requestValidatorId) {
    this.requestValidatorId = requestValidatorId;
    return this;
  }

  /**
   * Get requestValidatorId
   * @return requestValidatorId
   */
  @javax.annotation.Nullable
  public String getRequestValidatorId() {
    return requestValidatorId;
  }

  public void setRequestValidatorId(@javax.annotation.Nullable String requestValidatorId) {
    this.requestValidatorId = requestValidatorId;
  }


  public Method operationName(@javax.annotation.Nullable String operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * Get operationName
   * @return operationName
   */
  @javax.annotation.Nullable
  public String getOperationName() {
    return operationName;
  }

  public void setOperationName(@javax.annotation.Nullable String operationName) {
    this.operationName = operationName;
  }


  public Method requestParameters(@javax.annotation.Nullable Map requestParameters) {
    this.requestParameters = requestParameters;
    return this;
  }

  /**
   * Get requestParameters
   * @return requestParameters
   */
  @javax.annotation.Nullable
  public Map getRequestParameters() {
    return requestParameters;
  }

  public void setRequestParameters(@javax.annotation.Nullable Map requestParameters) {
    this.requestParameters = requestParameters;
  }


  public Method requestModels(@javax.annotation.Nullable Map requestModels) {
    this.requestModels = requestModels;
    return this;
  }

  /**
   * Get requestModels
   * @return requestModels
   */
  @javax.annotation.Nullable
  public Map getRequestModels() {
    return requestModels;
  }

  public void setRequestModels(@javax.annotation.Nullable Map requestModels) {
    this.requestModels = requestModels;
  }


  public Method methodResponses(@javax.annotation.Nullable Map methodResponses) {
    this.methodResponses = methodResponses;
    return this;
  }

  /**
   * Get methodResponses
   * @return methodResponses
   */
  @javax.annotation.Nullable
  public Map getMethodResponses() {
    return methodResponses;
  }

  public void setMethodResponses(@javax.annotation.Nullable Map methodResponses) {
    this.methodResponses = methodResponses;
  }


  public Method methodIntegration(@javax.annotation.Nullable MethodMethodIntegration methodIntegration) {
    this.methodIntegration = methodIntegration;
    return this;
  }

  /**
   * Get methodIntegration
   * @return methodIntegration
   */
  @javax.annotation.Nullable
  public MethodMethodIntegration getMethodIntegration() {
    return methodIntegration;
  }

  public void setMethodIntegration(@javax.annotation.Nullable MethodMethodIntegration methodIntegration) {
    this.methodIntegration = methodIntegration;
  }


  public Method authorizationScopes(@javax.annotation.Nullable List authorizationScopes) {
    this.authorizationScopes = authorizationScopes;
    return this;
  }

  /**
   * Get authorizationScopes
   * @return authorizationScopes
   */
  @javax.annotation.Nullable
  public List getAuthorizationScopes() {
    return authorizationScopes;
  }

  public void setAuthorizationScopes(@javax.annotation.Nullable List authorizationScopes) {
    this.authorizationScopes = authorizationScopes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Method method = (Method) o;
    return Objects.equals(this.httpMethod, method.httpMethod) &&
        Objects.equals(this.authorizationType, method.authorizationType) &&
        Objects.equals(this.authorizerId, method.authorizerId) &&
        Objects.equals(this.apiKeyRequired, method.apiKeyRequired) &&
        Objects.equals(this.requestValidatorId, method.requestValidatorId) &&
        Objects.equals(this.operationName, method.operationName) &&
        Objects.equals(this.requestParameters, method.requestParameters) &&
        Objects.equals(this.requestModels, method.requestModels) &&
        Objects.equals(this.methodResponses, method.methodResponses) &&
        Objects.equals(this.methodIntegration, method.methodIntegration) &&
        Objects.equals(this.authorizationScopes, method.authorizationScopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpMethod, authorizationType, authorizerId, apiKeyRequired, requestValidatorId, operationName, requestParameters, requestModels, methodResponses, methodIntegration, authorizationScopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Method {\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    authorizationType: ").append(toIndentedString(authorizationType)).append("\n");
    sb.append("    authorizerId: ").append(toIndentedString(authorizerId)).append("\n");
    sb.append("    apiKeyRequired: ").append(toIndentedString(apiKeyRequired)).append("\n");
    sb.append("    requestValidatorId: ").append(toIndentedString(requestValidatorId)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("    requestModels: ").append(toIndentedString(requestModels)).append("\n");
    sb.append("    methodResponses: ").append(toIndentedString(methodResponses)).append("\n");
    sb.append("    methodIntegration: ").append(toIndentedString(methodIntegration)).append("\n");
    sb.append("    authorizationScopes: ").append(toIndentedString(authorizationScopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpMethod");
    openapiFields.add("authorizationType");
    openapiFields.add("authorizerId");
    openapiFields.add("apiKeyRequired");
    openapiFields.add("requestValidatorId");
    openapiFields.add("operationName");
    openapiFields.add("requestParameters");
    openapiFields.add("requestModels");
    openapiFields.add("methodResponses");
    openapiFields.add("methodIntegration");
    openapiFields.add("authorizationScopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Method
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Method.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Method is not found in the empty JSON string", Method.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Method.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Method` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `httpMethod`
      if (jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("httpMethod"));
      }
      // validate the optional field `authorizationType`
      if (jsonObj.get("authorizationType") != null && !jsonObj.get("authorizationType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("authorizationType"));
      }
      // validate the optional field `authorizerId`
      if (jsonObj.get("authorizerId") != null && !jsonObj.get("authorizerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("authorizerId"));
      }
      // validate the optional field `apiKeyRequired`
      if (jsonObj.get("apiKeyRequired") != null && !jsonObj.get("apiKeyRequired").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("apiKeyRequired"));
      }
      // validate the optional field `requestValidatorId`
      if (jsonObj.get("requestValidatorId") != null && !jsonObj.get("requestValidatorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("requestValidatorId"));
      }
      // validate the optional field `operationName`
      if (jsonObj.get("operationName") != null && !jsonObj.get("operationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("operationName"));
      }
      // validate the optional field `requestParameters`
      if (jsonObj.get("requestParameters") != null && !jsonObj.get("requestParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("requestParameters"));
      }
      // validate the optional field `requestModels`
      if (jsonObj.get("requestModels") != null && !jsonObj.get("requestModels").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("requestModels"));
      }
      // validate the optional field `methodResponses`
      if (jsonObj.get("methodResponses") != null && !jsonObj.get("methodResponses").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("methodResponses"));
      }
      // validate the optional field `methodIntegration`
      if (jsonObj.get("methodIntegration") != null && !jsonObj.get("methodIntegration").isJsonNull()) {
        MethodMethodIntegration.validateJsonElement(jsonObj.get("methodIntegration"));
      }
      // validate the optional field `authorizationScopes`
      if (jsonObj.get("authorizationScopes") != null && !jsonObj.get("authorizationScopes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("authorizationScopes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Method.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Method' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Method> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Method.class));

       return (TypeAdapter<T>) new TypeAdapter<Method>() {
           @Override
           public void write(JsonWriter out, Method value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Method read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Method given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Method
   * @throws IOException if the JSON string is invalid with respect to Method
   */
  public static Method fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Method.class);
  }

  /**
   * Convert an instance of Method to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

