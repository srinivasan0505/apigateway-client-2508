/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateDomainNameRequestEndpointConfiguration;
import org.openapitools.client.model.CreateDomainNameRequestMutualTlsAuthentication;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDomainNameRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateDomainNameRequest {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  @javax.annotation.Nonnull
  private String domainName;

  public static final String SERIALIZED_NAME_CERTIFICATE_NAME = "certificateName";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_NAME)
  @javax.annotation.Nullable
  private String certificateName;

  public static final String SERIALIZED_NAME_CERTIFICATE_BODY = "certificateBody";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_BODY)
  @javax.annotation.Nullable
  private String certificateBody;

  public static final String SERIALIZED_NAME_CERTIFICATE_PRIVATE_KEY = "certificatePrivateKey";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PRIVATE_KEY)
  @javax.annotation.Nullable
  private String certificatePrivateKey;

  public static final String SERIALIZED_NAME_CERTIFICATE_CHAIN = "certificateChain";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_CHAIN)
  @javax.annotation.Nullable
  private String certificateChain;

  public static final String SERIALIZED_NAME_CERTIFICATE_ARN = "certificateArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ARN)
  @javax.annotation.Nullable
  private String certificateArn;

  public static final String SERIALIZED_NAME_REGIONAL_CERTIFICATE_NAME = "regionalCertificateName";
  @SerializedName(SERIALIZED_NAME_REGIONAL_CERTIFICATE_NAME)
  @javax.annotation.Nullable
  private String regionalCertificateName;

  public static final String SERIALIZED_NAME_REGIONAL_CERTIFICATE_ARN = "regionalCertificateArn";
  @SerializedName(SERIALIZED_NAME_REGIONAL_CERTIFICATE_ARN)
  @javax.annotation.Nullable
  private String regionalCertificateArn;

  public static final String SERIALIZED_NAME_ENDPOINT_CONFIGURATION = "endpointConfiguration";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_CONFIGURATION)
  @javax.annotation.Nullable
  private CreateDomainNameRequestEndpointConfiguration endpointConfiguration;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, String> tags = new HashMap<>();

  /**
   * The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are &lt;code&gt;TLS_1_0&lt;/code&gt; and &lt;code&gt;TLS_1_2&lt;/code&gt;.
   */
  @JsonAdapter(SecurityPolicyEnum.Adapter.class)
  public enum SecurityPolicyEnum {
    _0("TLS_1_0"),
    
    _2("TLS_1_2");

    private String value;

    SecurityPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityPolicyEnum fromValue(String value) {
      for (SecurityPolicyEnum b : SecurityPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecurityPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecurityPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecurityPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECURITY_POLICY = "securityPolicy";
  @SerializedName(SERIALIZED_NAME_SECURITY_POLICY)
  @javax.annotation.Nullable
  private SecurityPolicyEnum securityPolicy;

  public static final String SERIALIZED_NAME_MUTUAL_TLS_AUTHENTICATION = "mutualTlsAuthentication";
  @SerializedName(SERIALIZED_NAME_MUTUAL_TLS_AUTHENTICATION)
  @javax.annotation.Nullable
  private CreateDomainNameRequestMutualTlsAuthentication mutualTlsAuthentication;

  public static final String SERIALIZED_NAME_OWNERSHIP_VERIFICATION_CERTIFICATE_ARN = "ownershipVerificationCertificateArn";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_VERIFICATION_CERTIFICATE_ARN)
  @javax.annotation.Nullable
  private String ownershipVerificationCertificateArn;

  public CreateDomainNameRequest() {
  }

  public CreateDomainNameRequest domainName(@javax.annotation.Nonnull String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * The name of the DomainName resource.
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(@javax.annotation.Nonnull String domainName) {
    this.domainName = domainName;
  }


  public CreateDomainNameRequest certificateName(@javax.annotation.Nullable String certificateName) {
    this.certificateName = certificateName;
    return this;
  }

  /**
   * The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.
   * @return certificateName
   */
  @javax.annotation.Nullable
  public String getCertificateName() {
    return certificateName;
  }

  public void setCertificateName(@javax.annotation.Nullable String certificateName) {
    this.certificateName = certificateName;
  }


  public CreateDomainNameRequest certificateBody(@javax.annotation.Nullable String certificateBody) {
    this.certificateBody = certificateBody;
    return this;
  }

  /**
   * [Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.
   * @return certificateBody
   */
  @javax.annotation.Nullable
  public String getCertificateBody() {
    return certificateBody;
  }

  public void setCertificateBody(@javax.annotation.Nullable String certificateBody) {
    this.certificateBody = certificateBody;
  }


  public CreateDomainNameRequest certificatePrivateKey(@javax.annotation.Nullable String certificatePrivateKey) {
    this.certificatePrivateKey = certificatePrivateKey;
    return this;
  }

  /**
   * [Deprecated] Your edge-optimized endpoint&#39;s domain name certificate&#39;s private key.
   * @return certificatePrivateKey
   */
  @javax.annotation.Nullable
  public String getCertificatePrivateKey() {
    return certificatePrivateKey;
  }

  public void setCertificatePrivateKey(@javax.annotation.Nullable String certificatePrivateKey) {
    this.certificatePrivateKey = certificatePrivateKey;
  }


  public CreateDomainNameRequest certificateChain(@javax.annotation.Nullable String certificateChain) {
    this.certificateChain = certificateChain;
    return this;
  }

  /**
   * [Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.
   * @return certificateChain
   */
  @javax.annotation.Nullable
  public String getCertificateChain() {
    return certificateChain;
  }

  public void setCertificateChain(@javax.annotation.Nullable String certificateChain) {
    this.certificateChain = certificateChain;
  }


  public CreateDomainNameRequest certificateArn(@javax.annotation.Nullable String certificateArn) {
    this.certificateArn = certificateArn;
    return this;
  }

  /**
   * The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
   * @return certificateArn
   */
  @javax.annotation.Nullable
  public String getCertificateArn() {
    return certificateArn;
  }

  public void setCertificateArn(@javax.annotation.Nullable String certificateArn) {
    this.certificateArn = certificateArn;
  }


  public CreateDomainNameRequest regionalCertificateName(@javax.annotation.Nullable String regionalCertificateName) {
    this.regionalCertificateName = regionalCertificateName;
    return this;
  }

  /**
   * The user-friendly name of the certificate that will be used by regional endpoint for this domain name.
   * @return regionalCertificateName
   */
  @javax.annotation.Nullable
  public String getRegionalCertificateName() {
    return regionalCertificateName;
  }

  public void setRegionalCertificateName(@javax.annotation.Nullable String regionalCertificateName) {
    this.regionalCertificateName = regionalCertificateName;
  }


  public CreateDomainNameRequest regionalCertificateArn(@javax.annotation.Nullable String regionalCertificateArn) {
    this.regionalCertificateArn = regionalCertificateArn;
    return this;
  }

  /**
   * The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.
   * @return regionalCertificateArn
   */
  @javax.annotation.Nullable
  public String getRegionalCertificateArn() {
    return regionalCertificateArn;
  }

  public void setRegionalCertificateArn(@javax.annotation.Nullable String regionalCertificateArn) {
    this.regionalCertificateArn = regionalCertificateArn;
  }


  public CreateDomainNameRequest endpointConfiguration(@javax.annotation.Nullable CreateDomainNameRequestEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
    return this;
  }

  /**
   * Get endpointConfiguration
   * @return endpointConfiguration
   */
  @javax.annotation.Nullable
  public CreateDomainNameRequestEndpointConfiguration getEndpointConfiguration() {
    return endpointConfiguration;
  }

  public void setEndpointConfiguration(@javax.annotation.Nullable CreateDomainNameRequestEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
  }


  public CreateDomainNameRequest tags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDomainNameRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The key-value map of strings. The valid character set is [a-zA-Z+-&#x3D;._:/]. The tag key can be up to 128 characters and must not start with &lt;code&gt;aws:&lt;/code&gt;. The tag value can be up to 256 characters.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateDomainNameRequest securityPolicy(@javax.annotation.Nullable SecurityPolicyEnum securityPolicy) {
    this.securityPolicy = securityPolicy;
    return this;
  }

  /**
   * The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are &lt;code&gt;TLS_1_0&lt;/code&gt; and &lt;code&gt;TLS_1_2&lt;/code&gt;.
   * @return securityPolicy
   */
  @javax.annotation.Nullable
  public SecurityPolicyEnum getSecurityPolicy() {
    return securityPolicy;
  }

  public void setSecurityPolicy(@javax.annotation.Nullable SecurityPolicyEnum securityPolicy) {
    this.securityPolicy = securityPolicy;
  }


  public CreateDomainNameRequest mutualTlsAuthentication(@javax.annotation.Nullable CreateDomainNameRequestMutualTlsAuthentication mutualTlsAuthentication) {
    this.mutualTlsAuthentication = mutualTlsAuthentication;
    return this;
  }

  /**
   * Get mutualTlsAuthentication
   * @return mutualTlsAuthentication
   */
  @javax.annotation.Nullable
  public CreateDomainNameRequestMutualTlsAuthentication getMutualTlsAuthentication() {
    return mutualTlsAuthentication;
  }

  public void setMutualTlsAuthentication(@javax.annotation.Nullable CreateDomainNameRequestMutualTlsAuthentication mutualTlsAuthentication) {
    this.mutualTlsAuthentication = mutualTlsAuthentication;
  }


  public CreateDomainNameRequest ownershipVerificationCertificateArn(@javax.annotation.Nullable String ownershipVerificationCertificateArn) {
    this.ownershipVerificationCertificateArn = ownershipVerificationCertificateArn;
    return this;
  }

  /**
   * The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
   * @return ownershipVerificationCertificateArn
   */
  @javax.annotation.Nullable
  public String getOwnershipVerificationCertificateArn() {
    return ownershipVerificationCertificateArn;
  }

  public void setOwnershipVerificationCertificateArn(@javax.annotation.Nullable String ownershipVerificationCertificateArn) {
    this.ownershipVerificationCertificateArn = ownershipVerificationCertificateArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDomainNameRequest createDomainNameRequest = (CreateDomainNameRequest) o;
    return Objects.equals(this.domainName, createDomainNameRequest.domainName) &&
        Objects.equals(this.certificateName, createDomainNameRequest.certificateName) &&
        Objects.equals(this.certificateBody, createDomainNameRequest.certificateBody) &&
        Objects.equals(this.certificatePrivateKey, createDomainNameRequest.certificatePrivateKey) &&
        Objects.equals(this.certificateChain, createDomainNameRequest.certificateChain) &&
        Objects.equals(this.certificateArn, createDomainNameRequest.certificateArn) &&
        Objects.equals(this.regionalCertificateName, createDomainNameRequest.regionalCertificateName) &&
        Objects.equals(this.regionalCertificateArn, createDomainNameRequest.regionalCertificateArn) &&
        Objects.equals(this.endpointConfiguration, createDomainNameRequest.endpointConfiguration) &&
        Objects.equals(this.tags, createDomainNameRequest.tags) &&
        Objects.equals(this.securityPolicy, createDomainNameRequest.securityPolicy) &&
        Objects.equals(this.mutualTlsAuthentication, createDomainNameRequest.mutualTlsAuthentication) &&
        Objects.equals(this.ownershipVerificationCertificateArn, createDomainNameRequest.ownershipVerificationCertificateArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, certificateName, certificateBody, certificatePrivateKey, certificateChain, certificateArn, regionalCertificateName, regionalCertificateArn, endpointConfiguration, tags, securityPolicy, mutualTlsAuthentication, ownershipVerificationCertificateArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDomainNameRequest {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    certificateName: ").append(toIndentedString(certificateName)).append("\n");
    sb.append("    certificateBody: ").append(toIndentedString(certificateBody)).append("\n");
    sb.append("    certificatePrivateKey: ").append(toIndentedString(certificatePrivateKey)).append("\n");
    sb.append("    certificateChain: ").append(toIndentedString(certificateChain)).append("\n");
    sb.append("    certificateArn: ").append(toIndentedString(certificateArn)).append("\n");
    sb.append("    regionalCertificateName: ").append(toIndentedString(regionalCertificateName)).append("\n");
    sb.append("    regionalCertificateArn: ").append(toIndentedString(regionalCertificateArn)).append("\n");
    sb.append("    endpointConfiguration: ").append(toIndentedString(endpointConfiguration)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    securityPolicy: ").append(toIndentedString(securityPolicy)).append("\n");
    sb.append("    mutualTlsAuthentication: ").append(toIndentedString(mutualTlsAuthentication)).append("\n");
    sb.append("    ownershipVerificationCertificateArn: ").append(toIndentedString(ownershipVerificationCertificateArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domainName");
    openapiFields.add("certificateName");
    openapiFields.add("certificateBody");
    openapiFields.add("certificatePrivateKey");
    openapiFields.add("certificateChain");
    openapiFields.add("certificateArn");
    openapiFields.add("regionalCertificateName");
    openapiFields.add("regionalCertificateArn");
    openapiFields.add("endpointConfiguration");
    openapiFields.add("tags");
    openapiFields.add("securityPolicy");
    openapiFields.add("mutualTlsAuthentication");
    openapiFields.add("ownershipVerificationCertificateArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domainName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDomainNameRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDomainNameRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDomainNameRequest is not found in the empty JSON string", CreateDomainNameRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDomainNameRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDomainNameRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDomainNameRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      if ((jsonObj.get("certificateName") != null && !jsonObj.get("certificateName").isJsonNull()) && !jsonObj.get("certificateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateName").toString()));
      }
      if ((jsonObj.get("certificateBody") != null && !jsonObj.get("certificateBody").isJsonNull()) && !jsonObj.get("certificateBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateBody").toString()));
      }
      if ((jsonObj.get("certificatePrivateKey") != null && !jsonObj.get("certificatePrivateKey").isJsonNull()) && !jsonObj.get("certificatePrivateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificatePrivateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificatePrivateKey").toString()));
      }
      if ((jsonObj.get("certificateChain") != null && !jsonObj.get("certificateChain").isJsonNull()) && !jsonObj.get("certificateChain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateChain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateChain").toString()));
      }
      if ((jsonObj.get("certificateArn") != null && !jsonObj.get("certificateArn").isJsonNull()) && !jsonObj.get("certificateArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateArn").toString()));
      }
      if ((jsonObj.get("regionalCertificateName") != null && !jsonObj.get("regionalCertificateName").isJsonNull()) && !jsonObj.get("regionalCertificateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionalCertificateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionalCertificateName").toString()));
      }
      if ((jsonObj.get("regionalCertificateArn") != null && !jsonObj.get("regionalCertificateArn").isJsonNull()) && !jsonObj.get("regionalCertificateArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionalCertificateArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionalCertificateArn").toString()));
      }
      // validate the optional field `endpointConfiguration`
      if (jsonObj.get("endpointConfiguration") != null && !jsonObj.get("endpointConfiguration").isJsonNull()) {
        CreateDomainNameRequestEndpointConfiguration.validateJsonElement(jsonObj.get("endpointConfiguration"));
      }
      if ((jsonObj.get("securityPolicy") != null && !jsonObj.get("securityPolicy").isJsonNull()) && !jsonObj.get("securityPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityPolicy").toString()));
      }
      // validate the optional field `securityPolicy`
      if (jsonObj.get("securityPolicy") != null && !jsonObj.get("securityPolicy").isJsonNull()) {
        SecurityPolicyEnum.validateJsonElement(jsonObj.get("securityPolicy"));
      }
      // validate the optional field `mutualTlsAuthentication`
      if (jsonObj.get("mutualTlsAuthentication") != null && !jsonObj.get("mutualTlsAuthentication").isJsonNull()) {
        CreateDomainNameRequestMutualTlsAuthentication.validateJsonElement(jsonObj.get("mutualTlsAuthentication"));
      }
      if ((jsonObj.get("ownershipVerificationCertificateArn") != null && !jsonObj.get("ownershipVerificationCertificateArn").isJsonNull()) && !jsonObj.get("ownershipVerificationCertificateArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipVerificationCertificateArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipVerificationCertificateArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDomainNameRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDomainNameRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDomainNameRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDomainNameRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDomainNameRequest>() {
           @Override
           public void write(JsonWriter out, CreateDomainNameRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDomainNameRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDomainNameRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDomainNameRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDomainNameRequest
   */
  public static CreateDomainNameRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDomainNameRequest.class);
  }

  /**
   * Convert an instance of CreateDomainNameRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

