/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountThrottleSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an AWS account that is associated with API Gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class Account {
  public static final String SERIALIZED_NAME_CLOUDWATCH_ROLE_ARN = "cloudwatchRoleArn";
  @SerializedName(SERIALIZED_NAME_CLOUDWATCH_ROLE_ARN)
  @javax.annotation.Nullable
  private String cloudwatchRoleArn;

  public static final String SERIALIZED_NAME_THROTTLE_SETTINGS = "throttleSettings";
  @SerializedName(SERIALIZED_NAME_THROTTLE_SETTINGS)
  @javax.annotation.Nullable
  private AccountThrottleSettings throttleSettings;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  @javax.annotation.Nullable
  private List features;

  public static final String SERIALIZED_NAME_API_KEY_VERSION = "apiKeyVersion";
  @SerializedName(SERIALIZED_NAME_API_KEY_VERSION)
  @javax.annotation.Nullable
  private String apiKeyVersion;

  public Account() {
  }

  public Account cloudwatchRoleArn(@javax.annotation.Nullable String cloudwatchRoleArn) {
    this.cloudwatchRoleArn = cloudwatchRoleArn;
    return this;
  }

  /**
   * Get cloudwatchRoleArn
   * @return cloudwatchRoleArn
   */
  @javax.annotation.Nullable
  public String getCloudwatchRoleArn() {
    return cloudwatchRoleArn;
  }

  public void setCloudwatchRoleArn(@javax.annotation.Nullable String cloudwatchRoleArn) {
    this.cloudwatchRoleArn = cloudwatchRoleArn;
  }


  public Account throttleSettings(@javax.annotation.Nullable AccountThrottleSettings throttleSettings) {
    this.throttleSettings = throttleSettings;
    return this;
  }

  /**
   * Get throttleSettings
   * @return throttleSettings
   */
  @javax.annotation.Nullable
  public AccountThrottleSettings getThrottleSettings() {
    return throttleSettings;
  }

  public void setThrottleSettings(@javax.annotation.Nullable AccountThrottleSettings throttleSettings) {
    this.throttleSettings = throttleSettings;
  }


  public Account features(@javax.annotation.Nullable List features) {
    this.features = features;
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public List getFeatures() {
    return features;
  }

  public void setFeatures(@javax.annotation.Nullable List features) {
    this.features = features;
  }


  public Account apiKeyVersion(@javax.annotation.Nullable String apiKeyVersion) {
    this.apiKeyVersion = apiKeyVersion;
    return this;
  }

  /**
   * Get apiKeyVersion
   * @return apiKeyVersion
   */
  @javax.annotation.Nullable
  public String getApiKeyVersion() {
    return apiKeyVersion;
  }

  public void setApiKeyVersion(@javax.annotation.Nullable String apiKeyVersion) {
    this.apiKeyVersion = apiKeyVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.cloudwatchRoleArn, account.cloudwatchRoleArn) &&
        Objects.equals(this.throttleSettings, account.throttleSettings) &&
        Objects.equals(this.features, account.features) &&
        Objects.equals(this.apiKeyVersion, account.apiKeyVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudwatchRoleArn, throttleSettings, features, apiKeyVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    cloudwatchRoleArn: ").append(toIndentedString(cloudwatchRoleArn)).append("\n");
    sb.append("    throttleSettings: ").append(toIndentedString(throttleSettings)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    apiKeyVersion: ").append(toIndentedString(apiKeyVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudwatchRoleArn");
    openapiFields.add("throttleSettings");
    openapiFields.add("features");
    openapiFields.add("apiKeyVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cloudwatchRoleArn`
      if (jsonObj.get("cloudwatchRoleArn") != null && !jsonObj.get("cloudwatchRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cloudwatchRoleArn"));
      }
      // validate the optional field `throttleSettings`
      if (jsonObj.get("throttleSettings") != null && !jsonObj.get("throttleSettings").isJsonNull()) {
        AccountThrottleSettings.validateJsonElement(jsonObj.get("throttleSettings"));
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("features"));
      }
      // validate the optional field `apiKeyVersion`
      if (jsonObj.get("apiKeyVersion") != null && !jsonObj.get("apiKeyVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("apiKeyVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

