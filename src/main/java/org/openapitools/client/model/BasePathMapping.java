/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the base path that callers of the API must provide as part of the URL after the domain name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class BasePathMapping {
  public static final String SERIALIZED_NAME_BASE_PATH = "basePath";
  @SerializedName(SERIALIZED_NAME_BASE_PATH)
  @javax.annotation.Nullable
  private String basePath;

  public static final String SERIALIZED_NAME_REST_API_ID = "restApiId";
  @SerializedName(SERIALIZED_NAME_REST_API_ID)
  @javax.annotation.Nullable
  private String restApiId;

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  @javax.annotation.Nullable
  private String stage;

  public BasePathMapping() {
  }

  public BasePathMapping basePath(@javax.annotation.Nullable String basePath) {
    this.basePath = basePath;
    return this;
  }

  /**
   * Get basePath
   * @return basePath
   */
  @javax.annotation.Nullable
  public String getBasePath() {
    return basePath;
  }

  public void setBasePath(@javax.annotation.Nullable String basePath) {
    this.basePath = basePath;
  }


  public BasePathMapping restApiId(@javax.annotation.Nullable String restApiId) {
    this.restApiId = restApiId;
    return this;
  }

  /**
   * Get restApiId
   * @return restApiId
   */
  @javax.annotation.Nullable
  public String getRestApiId() {
    return restApiId;
  }

  public void setRestApiId(@javax.annotation.Nullable String restApiId) {
    this.restApiId = restApiId;
  }


  public BasePathMapping stage(@javax.annotation.Nullable String stage) {
    this.stage = stage;
    return this;
  }

  /**
   * Get stage
   * @return stage
   */
  @javax.annotation.Nullable
  public String getStage() {
    return stage;
  }

  public void setStage(@javax.annotation.Nullable String stage) {
    this.stage = stage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasePathMapping basePathMapping = (BasePathMapping) o;
    return Objects.equals(this.basePath, basePathMapping.basePath) &&
        Objects.equals(this.restApiId, basePathMapping.restApiId) &&
        Objects.equals(this.stage, basePathMapping.stage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePath, restApiId, stage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasePathMapping {\n");
    sb.append("    basePath: ").append(toIndentedString(basePath)).append("\n");
    sb.append("    restApiId: ").append(toIndentedString(restApiId)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basePath");
    openapiFields.add("restApiId");
    openapiFields.add("stage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasePathMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasePathMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasePathMapping is not found in the empty JSON string", BasePathMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasePathMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasePathMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basePath`
      if (jsonObj.get("basePath") != null && !jsonObj.get("basePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("basePath"));
      }
      // validate the optional field `restApiId`
      if (jsonObj.get("restApiId") != null && !jsonObj.get("restApiId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("restApiId"));
      }
      // validate the optional field `stage`
      if (jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasePathMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasePathMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasePathMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasePathMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<BasePathMapping>() {
           @Override
           public void write(JsonWriter out, BasePathMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasePathMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasePathMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasePathMapping
   * @throws IOException if the JSON string is invalid with respect to BasePathMapping
   */
  public static BasePathMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasePathMapping.class);
  }

  /**
   * Convert an instance of BasePathMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

