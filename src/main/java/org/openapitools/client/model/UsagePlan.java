/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.UsagePlanQuota;
import org.openapitools.client.model.UsagePlanThrottle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a usage plan used to specify who can assess associated API stages. Optionally, target request rate and quota limits can be set. In some cases clients can exceed the targets that you set. Donâ€™t rely on usage plans to control costs. Consider using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html\&quot;&gt;Amazon Web Services Budgets&lt;/a&gt; to monitor costs and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;WAF&lt;/a&gt; to manage API requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class UsagePlan {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_API_STAGES = "apiStages";
  @SerializedName(SERIALIZED_NAME_API_STAGES)
  @javax.annotation.Nullable
  private List apiStages;

  public static final String SERIALIZED_NAME_THROTTLE = "throttle";
  @SerializedName(SERIALIZED_NAME_THROTTLE)
  @javax.annotation.Nullable
  private UsagePlanThrottle throttle;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  @javax.annotation.Nullable
  private UsagePlanQuota quota;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "productCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  @javax.annotation.Nullable
  private String productCode;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map tags;

  public UsagePlan() {
  }

  public UsagePlan id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public UsagePlan name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public UsagePlan description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UsagePlan apiStages(@javax.annotation.Nullable List apiStages) {
    this.apiStages = apiStages;
    return this;
  }

  /**
   * Get apiStages
   * @return apiStages
   */
  @javax.annotation.Nullable
  public List getApiStages() {
    return apiStages;
  }

  public void setApiStages(@javax.annotation.Nullable List apiStages) {
    this.apiStages = apiStages;
  }


  public UsagePlan throttle(@javax.annotation.Nullable UsagePlanThrottle throttle) {
    this.throttle = throttle;
    return this;
  }

  /**
   * Get throttle
   * @return throttle
   */
  @javax.annotation.Nullable
  public UsagePlanThrottle getThrottle() {
    return throttle;
  }

  public void setThrottle(@javax.annotation.Nullable UsagePlanThrottle throttle) {
    this.throttle = throttle;
  }


  public UsagePlan quota(@javax.annotation.Nullable UsagePlanQuota quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Get quota
   * @return quota
   */
  @javax.annotation.Nullable
  public UsagePlanQuota getQuota() {
    return quota;
  }

  public void setQuota(@javax.annotation.Nullable UsagePlanQuota quota) {
    this.quota = quota;
  }


  public UsagePlan productCode(@javax.annotation.Nullable String productCode) {
    this.productCode = productCode;
    return this;
  }

  /**
   * Get productCode
   * @return productCode
   */
  @javax.annotation.Nullable
  public String getProductCode() {
    return productCode;
  }

  public void setProductCode(@javax.annotation.Nullable String productCode) {
    this.productCode = productCode;
  }


  public UsagePlan tags(@javax.annotation.Nullable Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsagePlan usagePlan = (UsagePlan) o;
    return Objects.equals(this.id, usagePlan.id) &&
        Objects.equals(this.name, usagePlan.name) &&
        Objects.equals(this.description, usagePlan.description) &&
        Objects.equals(this.apiStages, usagePlan.apiStages) &&
        Objects.equals(this.throttle, usagePlan.throttle) &&
        Objects.equals(this.quota, usagePlan.quota) &&
        Objects.equals(this.productCode, usagePlan.productCode) &&
        Objects.equals(this.tags, usagePlan.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, apiStages, throttle, quota, productCode, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsagePlan {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    apiStages: ").append(toIndentedString(apiStages)).append("\n");
    sb.append("    throttle: ").append(toIndentedString(throttle)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("apiStages");
    openapiFields.add("throttle");
    openapiFields.add("quota");
    openapiFields.add("productCode");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsagePlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsagePlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsagePlan is not found in the empty JSON string", UsagePlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsagePlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsagePlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `apiStages`
      if (jsonObj.get("apiStages") != null && !jsonObj.get("apiStages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("apiStages"));
      }
      // validate the optional field `throttle`
      if (jsonObj.get("throttle") != null && !jsonObj.get("throttle").isJsonNull()) {
        UsagePlanThrottle.validateJsonElement(jsonObj.get("throttle"));
      }
      // validate the optional field `quota`
      if (jsonObj.get("quota") != null && !jsonObj.get("quota").isJsonNull()) {
        UsagePlanQuota.validateJsonElement(jsonObj.get("quota"));
      }
      // validate the optional field `productCode`
      if (jsonObj.get("productCode") != null && !jsonObj.get("productCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("productCode"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsagePlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsagePlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsagePlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsagePlan.class));

       return (TypeAdapter<T>) new TypeAdapter<UsagePlan>() {
           @Override
           public void write(JsonWriter out, UsagePlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsagePlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsagePlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsagePlan
   * @throws IOException if the JSON string is invalid with respect to UsagePlan
   */
  public static UsagePlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsagePlan.class);
  }

  /**
   * Convert an instance of UsagePlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

