/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRequestValidatorRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateRequestValidatorRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_VALIDATE_REQUEST_BODY = "validateRequestBody";
  @SerializedName(SERIALIZED_NAME_VALIDATE_REQUEST_BODY)
  @javax.annotation.Nullable
  private Boolean validateRequestBody;

  public static final String SERIALIZED_NAME_VALIDATE_REQUEST_PARAMETERS = "validateRequestParameters";
  @SerializedName(SERIALIZED_NAME_VALIDATE_REQUEST_PARAMETERS)
  @javax.annotation.Nullable
  private Boolean validateRequestParameters;

  public CreateRequestValidatorRequest() {
  }

  public CreateRequestValidatorRequest name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the to-be-created RequestValidator.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public CreateRequestValidatorRequest validateRequestBody(@javax.annotation.Nullable Boolean validateRequestBody) {
    this.validateRequestBody = validateRequestBody;
    return this;
  }

  /**
   * A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;).
   * @return validateRequestBody
   */
  @javax.annotation.Nullable
  public Boolean getValidateRequestBody() {
    return validateRequestBody;
  }

  public void setValidateRequestBody(@javax.annotation.Nullable Boolean validateRequestBody) {
    this.validateRequestBody = validateRequestBody;
  }


  public CreateRequestValidatorRequest validateRequestParameters(@javax.annotation.Nullable Boolean validateRequestParameters) {
    this.validateRequestParameters = validateRequestParameters;
    return this;
  }

  /**
   * A Boolean flag to indicate whether to validate request parameters, &lt;code&gt;true&lt;/code&gt;, or not &lt;code&gt;false&lt;/code&gt;.
   * @return validateRequestParameters
   */
  @javax.annotation.Nullable
  public Boolean getValidateRequestParameters() {
    return validateRequestParameters;
  }

  public void setValidateRequestParameters(@javax.annotation.Nullable Boolean validateRequestParameters) {
    this.validateRequestParameters = validateRequestParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRequestValidatorRequest createRequestValidatorRequest = (CreateRequestValidatorRequest) o;
    return Objects.equals(this.name, createRequestValidatorRequest.name) &&
        Objects.equals(this.validateRequestBody, createRequestValidatorRequest.validateRequestBody) &&
        Objects.equals(this.validateRequestParameters, createRequestValidatorRequest.validateRequestParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, validateRequestBody, validateRequestParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRequestValidatorRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    validateRequestBody: ").append(toIndentedString(validateRequestBody)).append("\n");
    sb.append("    validateRequestParameters: ").append(toIndentedString(validateRequestParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("validateRequestBody");
    openapiFields.add("validateRequestParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRequestValidatorRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRequestValidatorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRequestValidatorRequest is not found in the empty JSON string", CreateRequestValidatorRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRequestValidatorRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRequestValidatorRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRequestValidatorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRequestValidatorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRequestValidatorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRequestValidatorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRequestValidatorRequest>() {
           @Override
           public void write(JsonWriter out, CreateRequestValidatorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRequestValidatorRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRequestValidatorRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRequestValidatorRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRequestValidatorRequest
   */
  public static CreateRequestValidatorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRequestValidatorRequest.class);
  }

  /**
   * Convert an instance of CreateRequestValidatorRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

