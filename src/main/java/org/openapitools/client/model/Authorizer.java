/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorizerType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an authorization layer for methods. If enabled on a method, API Gateway will activate the authorizer when a client calls the method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class Authorizer {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private AuthorizerType type;

  public static final String SERIALIZED_NAME_PROVIDER_A_R_NS = "providerARNs";
  @SerializedName(SERIALIZED_NAME_PROVIDER_A_R_NS)
  @javax.annotation.Nullable
  private List providerARNs;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "authType";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  @javax.annotation.Nullable
  private String authType;

  public static final String SERIALIZED_NAME_AUTHORIZER_URI = "authorizerUri";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_URI)
  @javax.annotation.Nullable
  private String authorizerUri;

  public static final String SERIALIZED_NAME_AUTHORIZER_CREDENTIALS = "authorizerCredentials";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_CREDENTIALS)
  @javax.annotation.Nullable
  private String authorizerCredentials;

  public static final String SERIALIZED_NAME_IDENTITY_SOURCE = "identitySource";
  @SerializedName(SERIALIZED_NAME_IDENTITY_SOURCE)
  @javax.annotation.Nullable
  private String identitySource;

  public static final String SERIALIZED_NAME_IDENTITY_VALIDATION_EXPRESSION = "identityValidationExpression";
  @SerializedName(SERIALIZED_NAME_IDENTITY_VALIDATION_EXPRESSION)
  @javax.annotation.Nullable
  private String identityValidationExpression;

  public static final String SERIALIZED_NAME_AUTHORIZER_RESULT_TTL_IN_SECONDS = "authorizerResultTtlInSeconds";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_RESULT_TTL_IN_SECONDS)
  @javax.annotation.Nullable
  private Integer authorizerResultTtlInSeconds;

  public Authorizer() {
  }

  public Authorizer id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Authorizer name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public Authorizer type(@javax.annotation.Nullable AuthorizerType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public AuthorizerType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable AuthorizerType type) {
    this.type = type;
  }


  public Authorizer providerARNs(@javax.annotation.Nullable List providerARNs) {
    this.providerARNs = providerARNs;
    return this;
  }

  /**
   * Get providerARNs
   * @return providerARNs
   */
  @javax.annotation.Nullable
  public List getProviderARNs() {
    return providerARNs;
  }

  public void setProviderARNs(@javax.annotation.Nullable List providerARNs) {
    this.providerARNs = providerARNs;
  }


  public Authorizer authType(@javax.annotation.Nullable String authType) {
    this.authType = authType;
    return this;
  }

  /**
   * Get authType
   * @return authType
   */
  @javax.annotation.Nullable
  public String getAuthType() {
    return authType;
  }

  public void setAuthType(@javax.annotation.Nullable String authType) {
    this.authType = authType;
  }


  public Authorizer authorizerUri(@javax.annotation.Nullable String authorizerUri) {
    this.authorizerUri = authorizerUri;
    return this;
  }

  /**
   * Get authorizerUri
   * @return authorizerUri
   */
  @javax.annotation.Nullable
  public String getAuthorizerUri() {
    return authorizerUri;
  }

  public void setAuthorizerUri(@javax.annotation.Nullable String authorizerUri) {
    this.authorizerUri = authorizerUri;
  }


  public Authorizer authorizerCredentials(@javax.annotation.Nullable String authorizerCredentials) {
    this.authorizerCredentials = authorizerCredentials;
    return this;
  }

  /**
   * Get authorizerCredentials
   * @return authorizerCredentials
   */
  @javax.annotation.Nullable
  public String getAuthorizerCredentials() {
    return authorizerCredentials;
  }

  public void setAuthorizerCredentials(@javax.annotation.Nullable String authorizerCredentials) {
    this.authorizerCredentials = authorizerCredentials;
  }


  public Authorizer identitySource(@javax.annotation.Nullable String identitySource) {
    this.identitySource = identitySource;
    return this;
  }

  /**
   * Get identitySource
   * @return identitySource
   */
  @javax.annotation.Nullable
  public String getIdentitySource() {
    return identitySource;
  }

  public void setIdentitySource(@javax.annotation.Nullable String identitySource) {
    this.identitySource = identitySource;
  }


  public Authorizer identityValidationExpression(@javax.annotation.Nullable String identityValidationExpression) {
    this.identityValidationExpression = identityValidationExpression;
    return this;
  }

  /**
   * Get identityValidationExpression
   * @return identityValidationExpression
   */
  @javax.annotation.Nullable
  public String getIdentityValidationExpression() {
    return identityValidationExpression;
  }

  public void setIdentityValidationExpression(@javax.annotation.Nullable String identityValidationExpression) {
    this.identityValidationExpression = identityValidationExpression;
  }


  public Authorizer authorizerResultTtlInSeconds(@javax.annotation.Nullable Integer authorizerResultTtlInSeconds) {
    this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
    return this;
  }

  /**
   * Get authorizerResultTtlInSeconds
   * @return authorizerResultTtlInSeconds
   */
  @javax.annotation.Nullable
  public Integer getAuthorizerResultTtlInSeconds() {
    return authorizerResultTtlInSeconds;
  }

  public void setAuthorizerResultTtlInSeconds(@javax.annotation.Nullable Integer authorizerResultTtlInSeconds) {
    this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Authorizer authorizer = (Authorizer) o;
    return Objects.equals(this.id, authorizer.id) &&
        Objects.equals(this.name, authorizer.name) &&
        Objects.equals(this.type, authorizer.type) &&
        Objects.equals(this.providerARNs, authorizer.providerARNs) &&
        Objects.equals(this.authType, authorizer.authType) &&
        Objects.equals(this.authorizerUri, authorizer.authorizerUri) &&
        Objects.equals(this.authorizerCredentials, authorizer.authorizerCredentials) &&
        Objects.equals(this.identitySource, authorizer.identitySource) &&
        Objects.equals(this.identityValidationExpression, authorizer.identityValidationExpression) &&
        Objects.equals(this.authorizerResultTtlInSeconds, authorizer.authorizerResultTtlInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, providerARNs, authType, authorizerUri, authorizerCredentials, identitySource, identityValidationExpression, authorizerResultTtlInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Authorizer {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    providerARNs: ").append(toIndentedString(providerARNs)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    authorizerUri: ").append(toIndentedString(authorizerUri)).append("\n");
    sb.append("    authorizerCredentials: ").append(toIndentedString(authorizerCredentials)).append("\n");
    sb.append("    identitySource: ").append(toIndentedString(identitySource)).append("\n");
    sb.append("    identityValidationExpression: ").append(toIndentedString(identityValidationExpression)).append("\n");
    sb.append("    authorizerResultTtlInSeconds: ").append(toIndentedString(authorizerResultTtlInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("providerARNs");
    openapiFields.add("authType");
    openapiFields.add("authorizerUri");
    openapiFields.add("authorizerCredentials");
    openapiFields.add("identitySource");
    openapiFields.add("identityValidationExpression");
    openapiFields.add("authorizerResultTtlInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Authorizer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Authorizer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Authorizer is not found in the empty JSON string", Authorizer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Authorizer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Authorizer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        AuthorizerType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `providerARNs`
      if (jsonObj.get("providerARNs") != null && !jsonObj.get("providerARNs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("providerARNs"));
      }
      // validate the optional field `authType`
      if (jsonObj.get("authType") != null && !jsonObj.get("authType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("authType"));
      }
      // validate the optional field `authorizerUri`
      if (jsonObj.get("authorizerUri") != null && !jsonObj.get("authorizerUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("authorizerUri"));
      }
      // validate the optional field `authorizerCredentials`
      if (jsonObj.get("authorizerCredentials") != null && !jsonObj.get("authorizerCredentials").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("authorizerCredentials"));
      }
      // validate the optional field `identitySource`
      if (jsonObj.get("identitySource") != null && !jsonObj.get("identitySource").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("identitySource"));
      }
      // validate the optional field `identityValidationExpression`
      if (jsonObj.get("identityValidationExpression") != null && !jsonObj.get("identityValidationExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("identityValidationExpression"));
      }
      // validate the optional field `authorizerResultTtlInSeconds`
      if (jsonObj.get("authorizerResultTtlInSeconds") != null && !jsonObj.get("authorizerResultTtlInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("authorizerResultTtlInSeconds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Authorizer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Authorizer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Authorizer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Authorizer.class));

       return (TypeAdapter<T>) new TypeAdapter<Authorizer>() {
           @Override
           public void write(JsonWriter out, Authorizer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Authorizer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Authorizer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Authorizer
   * @throws IOException if the JSON string is invalid with respect to Authorizer
   */
  public static Authorizer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Authorizer.class);
  }

  /**
   * Convert an instance of Authorizer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

