/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApiKeySourceType;
import org.openapitools.client.model.RestApiEndpointConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a REST API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class RestApi {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  @javax.annotation.Nullable
  private List warnings;

  public static final String SERIALIZED_NAME_BINARY_MEDIA_TYPES = "binaryMediaTypes";
  @SerializedName(SERIALIZED_NAME_BINARY_MEDIA_TYPES)
  @javax.annotation.Nullable
  private List binaryMediaTypes;

  public static final String SERIALIZED_NAME_MINIMUM_COMPRESSION_SIZE = "minimumCompressionSize";
  @SerializedName(SERIALIZED_NAME_MINIMUM_COMPRESSION_SIZE)
  @javax.annotation.Nullable
  private Integer minimumCompressionSize;

  public static final String SERIALIZED_NAME_API_KEY_SOURCE = "apiKeySource";
  @SerializedName(SERIALIZED_NAME_API_KEY_SOURCE)
  @javax.annotation.Nullable
  private ApiKeySourceType apiKeySource;

  public static final String SERIALIZED_NAME_ENDPOINT_CONFIGURATION = "endpointConfiguration";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_CONFIGURATION)
  @javax.annotation.Nullable
  private RestApiEndpointConfiguration endpointConfiguration;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  @javax.annotation.Nullable
  private String policy;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map tags;

  public static final String SERIALIZED_NAME_DISABLE_EXECUTE_API_ENDPOINT = "disableExecuteApiEndpoint";
  @SerializedName(SERIALIZED_NAME_DISABLE_EXECUTE_API_ENDPOINT)
  @javax.annotation.Nullable
  private Boolean disableExecuteApiEndpoint;

  public RestApi() {
  }

  public RestApi id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public RestApi name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public RestApi description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public RestApi createdDate(@javax.annotation.Nullable OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(@javax.annotation.Nullable OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public RestApi version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public RestApi warnings(@javax.annotation.Nullable List warnings) {
    this.warnings = warnings;
    return this;
  }

  /**
   * Get warnings
   * @return warnings
   */
  @javax.annotation.Nullable
  public List getWarnings() {
    return warnings;
  }

  public void setWarnings(@javax.annotation.Nullable List warnings) {
    this.warnings = warnings;
  }


  public RestApi binaryMediaTypes(@javax.annotation.Nullable List binaryMediaTypes) {
    this.binaryMediaTypes = binaryMediaTypes;
    return this;
  }

  /**
   * Get binaryMediaTypes
   * @return binaryMediaTypes
   */
  @javax.annotation.Nullable
  public List getBinaryMediaTypes() {
    return binaryMediaTypes;
  }

  public void setBinaryMediaTypes(@javax.annotation.Nullable List binaryMediaTypes) {
    this.binaryMediaTypes = binaryMediaTypes;
  }


  public RestApi minimumCompressionSize(@javax.annotation.Nullable Integer minimumCompressionSize) {
    this.minimumCompressionSize = minimumCompressionSize;
    return this;
  }

  /**
   * Get minimumCompressionSize
   * @return minimumCompressionSize
   */
  @javax.annotation.Nullable
  public Integer getMinimumCompressionSize() {
    return minimumCompressionSize;
  }

  public void setMinimumCompressionSize(@javax.annotation.Nullable Integer minimumCompressionSize) {
    this.minimumCompressionSize = minimumCompressionSize;
  }


  public RestApi apiKeySource(@javax.annotation.Nullable ApiKeySourceType apiKeySource) {
    this.apiKeySource = apiKeySource;
    return this;
  }

  /**
   * Get apiKeySource
   * @return apiKeySource
   */
  @javax.annotation.Nullable
  public ApiKeySourceType getApiKeySource() {
    return apiKeySource;
  }

  public void setApiKeySource(@javax.annotation.Nullable ApiKeySourceType apiKeySource) {
    this.apiKeySource = apiKeySource;
  }


  public RestApi endpointConfiguration(@javax.annotation.Nullable RestApiEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
    return this;
  }

  /**
   * Get endpointConfiguration
   * @return endpointConfiguration
   */
  @javax.annotation.Nullable
  public RestApiEndpointConfiguration getEndpointConfiguration() {
    return endpointConfiguration;
  }

  public void setEndpointConfiguration(@javax.annotation.Nullable RestApiEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
  }


  public RestApi policy(@javax.annotation.Nullable String policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(@javax.annotation.Nullable String policy) {
    this.policy = policy;
  }


  public RestApi tags(@javax.annotation.Nullable Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map tags) {
    this.tags = tags;
  }


  public RestApi disableExecuteApiEndpoint(@javax.annotation.Nullable Boolean disableExecuteApiEndpoint) {
    this.disableExecuteApiEndpoint = disableExecuteApiEndpoint;
    return this;
  }

  /**
   * Get disableExecuteApiEndpoint
   * @return disableExecuteApiEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getDisableExecuteApiEndpoint() {
    return disableExecuteApiEndpoint;
  }

  public void setDisableExecuteApiEndpoint(@javax.annotation.Nullable Boolean disableExecuteApiEndpoint) {
    this.disableExecuteApiEndpoint = disableExecuteApiEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestApi restApi = (RestApi) o;
    return Objects.equals(this.id, restApi.id) &&
        Objects.equals(this.name, restApi.name) &&
        Objects.equals(this.description, restApi.description) &&
        Objects.equals(this.createdDate, restApi.createdDate) &&
        Objects.equals(this.version, restApi.version) &&
        Objects.equals(this.warnings, restApi.warnings) &&
        Objects.equals(this.binaryMediaTypes, restApi.binaryMediaTypes) &&
        Objects.equals(this.minimumCompressionSize, restApi.minimumCompressionSize) &&
        Objects.equals(this.apiKeySource, restApi.apiKeySource) &&
        Objects.equals(this.endpointConfiguration, restApi.endpointConfiguration) &&
        Objects.equals(this.policy, restApi.policy) &&
        Objects.equals(this.tags, restApi.tags) &&
        Objects.equals(this.disableExecuteApiEndpoint, restApi.disableExecuteApiEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, createdDate, version, warnings, binaryMediaTypes, minimumCompressionSize, apiKeySource, endpointConfiguration, policy, tags, disableExecuteApiEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestApi {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    binaryMediaTypes: ").append(toIndentedString(binaryMediaTypes)).append("\n");
    sb.append("    minimumCompressionSize: ").append(toIndentedString(minimumCompressionSize)).append("\n");
    sb.append("    apiKeySource: ").append(toIndentedString(apiKeySource)).append("\n");
    sb.append("    endpointConfiguration: ").append(toIndentedString(endpointConfiguration)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    disableExecuteApiEndpoint: ").append(toIndentedString(disableExecuteApiEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("createdDate");
    openapiFields.add("version");
    openapiFields.add("warnings");
    openapiFields.add("binaryMediaTypes");
    openapiFields.add("minimumCompressionSize");
    openapiFields.add("apiKeySource");
    openapiFields.add("endpointConfiguration");
    openapiFields.add("policy");
    openapiFields.add("tags");
    openapiFields.add("disableExecuteApiEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestApi
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestApi.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestApi is not found in the empty JSON string", RestApi.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestApi.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestApi` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `createdDate`
      if (jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdDate"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("version"));
      }
      // validate the optional field `warnings`
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("warnings"));
      }
      // validate the optional field `binaryMediaTypes`
      if (jsonObj.get("binaryMediaTypes") != null && !jsonObj.get("binaryMediaTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("binaryMediaTypes"));
      }
      // validate the optional field `minimumCompressionSize`
      if (jsonObj.get("minimumCompressionSize") != null && !jsonObj.get("minimumCompressionSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("minimumCompressionSize"));
      }
      // validate the optional field `apiKeySource`
      if (jsonObj.get("apiKeySource") != null && !jsonObj.get("apiKeySource").isJsonNull()) {
        ApiKeySourceType.validateJsonElement(jsonObj.get("apiKeySource"));
      }
      // validate the optional field `endpointConfiguration`
      if (jsonObj.get("endpointConfiguration") != null && !jsonObj.get("endpointConfiguration").isJsonNull()) {
        RestApiEndpointConfiguration.validateJsonElement(jsonObj.get("endpointConfiguration"));
      }
      // validate the optional field `policy`
      if (jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("policy"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `disableExecuteApiEndpoint`
      if (jsonObj.get("disableExecuteApiEndpoint") != null && !jsonObj.get("disableExecuteApiEndpoint").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("disableExecuteApiEndpoint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestApi.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestApi' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestApi> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestApi.class));

       return (TypeAdapter<T>) new TypeAdapter<RestApi>() {
           @Override
           public void write(JsonWriter out, RestApi value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestApi read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestApi given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestApi
   * @throws IOException if the JSON string is invalid with respect to RestApi
   */
  public static RestApi fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestApi.class);
  }

  /**
   * Convert an instance of RestApi to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

