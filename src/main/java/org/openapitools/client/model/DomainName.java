/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.DomainNameEndpointConfiguration;
import org.openapitools.client.model.DomainNameMutualTlsAuthentication;
import org.openapitools.client.model.DomainNameStatus;
import org.openapitools.client.model.SecurityPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a custom domain name as a user-friendly host name of an API (RestApi).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class DomainName {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  @javax.annotation.Nullable
  private String domainName;

  public static final String SERIALIZED_NAME_CERTIFICATE_NAME = "certificateName";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_NAME)
  @javax.annotation.Nullable
  private String certificateName;

  public static final String SERIALIZED_NAME_CERTIFICATE_ARN = "certificateArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ARN)
  @javax.annotation.Nullable
  private String certificateArn;

  public static final String SERIALIZED_NAME_CERTIFICATE_UPLOAD_DATE = "certificateUploadDate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_UPLOAD_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime certificateUploadDate;

  public static final String SERIALIZED_NAME_REGIONAL_DOMAIN_NAME = "regionalDomainName";
  @SerializedName(SERIALIZED_NAME_REGIONAL_DOMAIN_NAME)
  @javax.annotation.Nullable
  private String regionalDomainName;

  public static final String SERIALIZED_NAME_REGIONAL_HOSTED_ZONE_ID = "regionalHostedZoneId";
  @SerializedName(SERIALIZED_NAME_REGIONAL_HOSTED_ZONE_ID)
  @javax.annotation.Nullable
  private String regionalHostedZoneId;

  public static final String SERIALIZED_NAME_REGIONAL_CERTIFICATE_NAME = "regionalCertificateName";
  @SerializedName(SERIALIZED_NAME_REGIONAL_CERTIFICATE_NAME)
  @javax.annotation.Nullable
  private String regionalCertificateName;

  public static final String SERIALIZED_NAME_REGIONAL_CERTIFICATE_ARN = "regionalCertificateArn";
  @SerializedName(SERIALIZED_NAME_REGIONAL_CERTIFICATE_ARN)
  @javax.annotation.Nullable
  private String regionalCertificateArn;

  public static final String SERIALIZED_NAME_DISTRIBUTION_DOMAIN_NAME = "distributionDomainName";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_DOMAIN_NAME)
  @javax.annotation.Nullable
  private String distributionDomainName;

  public static final String SERIALIZED_NAME_DISTRIBUTION_HOSTED_ZONE_ID = "distributionHostedZoneId";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_HOSTED_ZONE_ID)
  @javax.annotation.Nullable
  private String distributionHostedZoneId;

  public static final String SERIALIZED_NAME_ENDPOINT_CONFIGURATION = "endpointConfiguration";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_CONFIGURATION)
  @javax.annotation.Nullable
  private DomainNameEndpointConfiguration endpointConfiguration;

  public static final String SERIALIZED_NAME_DOMAIN_NAME_STATUS = "domainNameStatus";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME_STATUS)
  @javax.annotation.Nullable
  private DomainNameStatus domainNameStatus;

  public static final String SERIALIZED_NAME_DOMAIN_NAME_STATUS_MESSAGE = "domainNameStatusMessage";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME_STATUS_MESSAGE)
  @javax.annotation.Nullable
  private String domainNameStatusMessage;

  public static final String SERIALIZED_NAME_SECURITY_POLICY = "securityPolicy";
  @SerializedName(SERIALIZED_NAME_SECURITY_POLICY)
  @javax.annotation.Nullable
  private SecurityPolicy securityPolicy;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map tags;

  public static final String SERIALIZED_NAME_MUTUAL_TLS_AUTHENTICATION = "mutualTlsAuthentication";
  @SerializedName(SERIALIZED_NAME_MUTUAL_TLS_AUTHENTICATION)
  @javax.annotation.Nullable
  private DomainNameMutualTlsAuthentication mutualTlsAuthentication;

  public static final String SERIALIZED_NAME_OWNERSHIP_VERIFICATION_CERTIFICATE_ARN = "ownershipVerificationCertificateArn";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_VERIFICATION_CERTIFICATE_ARN)
  @javax.annotation.Nullable
  private String ownershipVerificationCertificateArn;

  public DomainName() {
  }

  public DomainName domainName(@javax.annotation.Nullable String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(@javax.annotation.Nullable String domainName) {
    this.domainName = domainName;
  }


  public DomainName certificateName(@javax.annotation.Nullable String certificateName) {
    this.certificateName = certificateName;
    return this;
  }

  /**
   * Get certificateName
   * @return certificateName
   */
  @javax.annotation.Nullable
  public String getCertificateName() {
    return certificateName;
  }

  public void setCertificateName(@javax.annotation.Nullable String certificateName) {
    this.certificateName = certificateName;
  }


  public DomainName certificateArn(@javax.annotation.Nullable String certificateArn) {
    this.certificateArn = certificateArn;
    return this;
  }

  /**
   * Get certificateArn
   * @return certificateArn
   */
  @javax.annotation.Nullable
  public String getCertificateArn() {
    return certificateArn;
  }

  public void setCertificateArn(@javax.annotation.Nullable String certificateArn) {
    this.certificateArn = certificateArn;
  }


  public DomainName certificateUploadDate(@javax.annotation.Nullable OffsetDateTime certificateUploadDate) {
    this.certificateUploadDate = certificateUploadDate;
    return this;
  }

  /**
   * Get certificateUploadDate
   * @return certificateUploadDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCertificateUploadDate() {
    return certificateUploadDate;
  }

  public void setCertificateUploadDate(@javax.annotation.Nullable OffsetDateTime certificateUploadDate) {
    this.certificateUploadDate = certificateUploadDate;
  }


  public DomainName regionalDomainName(@javax.annotation.Nullable String regionalDomainName) {
    this.regionalDomainName = regionalDomainName;
    return this;
  }

  /**
   * Get regionalDomainName
   * @return regionalDomainName
   */
  @javax.annotation.Nullable
  public String getRegionalDomainName() {
    return regionalDomainName;
  }

  public void setRegionalDomainName(@javax.annotation.Nullable String regionalDomainName) {
    this.regionalDomainName = regionalDomainName;
  }


  public DomainName regionalHostedZoneId(@javax.annotation.Nullable String regionalHostedZoneId) {
    this.regionalHostedZoneId = regionalHostedZoneId;
    return this;
  }

  /**
   * Get regionalHostedZoneId
   * @return regionalHostedZoneId
   */
  @javax.annotation.Nullable
  public String getRegionalHostedZoneId() {
    return regionalHostedZoneId;
  }

  public void setRegionalHostedZoneId(@javax.annotation.Nullable String regionalHostedZoneId) {
    this.regionalHostedZoneId = regionalHostedZoneId;
  }


  public DomainName regionalCertificateName(@javax.annotation.Nullable String regionalCertificateName) {
    this.regionalCertificateName = regionalCertificateName;
    return this;
  }

  /**
   * Get regionalCertificateName
   * @return regionalCertificateName
   */
  @javax.annotation.Nullable
  public String getRegionalCertificateName() {
    return regionalCertificateName;
  }

  public void setRegionalCertificateName(@javax.annotation.Nullable String regionalCertificateName) {
    this.regionalCertificateName = regionalCertificateName;
  }


  public DomainName regionalCertificateArn(@javax.annotation.Nullable String regionalCertificateArn) {
    this.regionalCertificateArn = regionalCertificateArn;
    return this;
  }

  /**
   * Get regionalCertificateArn
   * @return regionalCertificateArn
   */
  @javax.annotation.Nullable
  public String getRegionalCertificateArn() {
    return regionalCertificateArn;
  }

  public void setRegionalCertificateArn(@javax.annotation.Nullable String regionalCertificateArn) {
    this.regionalCertificateArn = regionalCertificateArn;
  }


  public DomainName distributionDomainName(@javax.annotation.Nullable String distributionDomainName) {
    this.distributionDomainName = distributionDomainName;
    return this;
  }

  /**
   * Get distributionDomainName
   * @return distributionDomainName
   */
  @javax.annotation.Nullable
  public String getDistributionDomainName() {
    return distributionDomainName;
  }

  public void setDistributionDomainName(@javax.annotation.Nullable String distributionDomainName) {
    this.distributionDomainName = distributionDomainName;
  }


  public DomainName distributionHostedZoneId(@javax.annotation.Nullable String distributionHostedZoneId) {
    this.distributionHostedZoneId = distributionHostedZoneId;
    return this;
  }

  /**
   * Get distributionHostedZoneId
   * @return distributionHostedZoneId
   */
  @javax.annotation.Nullable
  public String getDistributionHostedZoneId() {
    return distributionHostedZoneId;
  }

  public void setDistributionHostedZoneId(@javax.annotation.Nullable String distributionHostedZoneId) {
    this.distributionHostedZoneId = distributionHostedZoneId;
  }


  public DomainName endpointConfiguration(@javax.annotation.Nullable DomainNameEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
    return this;
  }

  /**
   * Get endpointConfiguration
   * @return endpointConfiguration
   */
  @javax.annotation.Nullable
  public DomainNameEndpointConfiguration getEndpointConfiguration() {
    return endpointConfiguration;
  }

  public void setEndpointConfiguration(@javax.annotation.Nullable DomainNameEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
  }


  public DomainName domainNameStatus(@javax.annotation.Nullable DomainNameStatus domainNameStatus) {
    this.domainNameStatus = domainNameStatus;
    return this;
  }

  /**
   * Get domainNameStatus
   * @return domainNameStatus
   */
  @javax.annotation.Nullable
  public DomainNameStatus getDomainNameStatus() {
    return domainNameStatus;
  }

  public void setDomainNameStatus(@javax.annotation.Nullable DomainNameStatus domainNameStatus) {
    this.domainNameStatus = domainNameStatus;
  }


  public DomainName domainNameStatusMessage(@javax.annotation.Nullable String domainNameStatusMessage) {
    this.domainNameStatusMessage = domainNameStatusMessage;
    return this;
  }

  /**
   * Get domainNameStatusMessage
   * @return domainNameStatusMessage
   */
  @javax.annotation.Nullable
  public String getDomainNameStatusMessage() {
    return domainNameStatusMessage;
  }

  public void setDomainNameStatusMessage(@javax.annotation.Nullable String domainNameStatusMessage) {
    this.domainNameStatusMessage = domainNameStatusMessage;
  }


  public DomainName securityPolicy(@javax.annotation.Nullable SecurityPolicy securityPolicy) {
    this.securityPolicy = securityPolicy;
    return this;
  }

  /**
   * Get securityPolicy
   * @return securityPolicy
   */
  @javax.annotation.Nullable
  public SecurityPolicy getSecurityPolicy() {
    return securityPolicy;
  }

  public void setSecurityPolicy(@javax.annotation.Nullable SecurityPolicy securityPolicy) {
    this.securityPolicy = securityPolicy;
  }


  public DomainName tags(@javax.annotation.Nullable Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map tags) {
    this.tags = tags;
  }


  public DomainName mutualTlsAuthentication(@javax.annotation.Nullable DomainNameMutualTlsAuthentication mutualTlsAuthentication) {
    this.mutualTlsAuthentication = mutualTlsAuthentication;
    return this;
  }

  /**
   * Get mutualTlsAuthentication
   * @return mutualTlsAuthentication
   */
  @javax.annotation.Nullable
  public DomainNameMutualTlsAuthentication getMutualTlsAuthentication() {
    return mutualTlsAuthentication;
  }

  public void setMutualTlsAuthentication(@javax.annotation.Nullable DomainNameMutualTlsAuthentication mutualTlsAuthentication) {
    this.mutualTlsAuthentication = mutualTlsAuthentication;
  }


  public DomainName ownershipVerificationCertificateArn(@javax.annotation.Nullable String ownershipVerificationCertificateArn) {
    this.ownershipVerificationCertificateArn = ownershipVerificationCertificateArn;
    return this;
  }

  /**
   * Get ownershipVerificationCertificateArn
   * @return ownershipVerificationCertificateArn
   */
  @javax.annotation.Nullable
  public String getOwnershipVerificationCertificateArn() {
    return ownershipVerificationCertificateArn;
  }

  public void setOwnershipVerificationCertificateArn(@javax.annotation.Nullable String ownershipVerificationCertificateArn) {
    this.ownershipVerificationCertificateArn = ownershipVerificationCertificateArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainName domainName = (DomainName) o;
    return Objects.equals(this.domainName, domainName.domainName) &&
        Objects.equals(this.certificateName, domainName.certificateName) &&
        Objects.equals(this.certificateArn, domainName.certificateArn) &&
        Objects.equals(this.certificateUploadDate, domainName.certificateUploadDate) &&
        Objects.equals(this.regionalDomainName, domainName.regionalDomainName) &&
        Objects.equals(this.regionalHostedZoneId, domainName.regionalHostedZoneId) &&
        Objects.equals(this.regionalCertificateName, domainName.regionalCertificateName) &&
        Objects.equals(this.regionalCertificateArn, domainName.regionalCertificateArn) &&
        Objects.equals(this.distributionDomainName, domainName.distributionDomainName) &&
        Objects.equals(this.distributionHostedZoneId, domainName.distributionHostedZoneId) &&
        Objects.equals(this.endpointConfiguration, domainName.endpointConfiguration) &&
        Objects.equals(this.domainNameStatus, domainName.domainNameStatus) &&
        Objects.equals(this.domainNameStatusMessage, domainName.domainNameStatusMessage) &&
        Objects.equals(this.securityPolicy, domainName.securityPolicy) &&
        Objects.equals(this.tags, domainName.tags) &&
        Objects.equals(this.mutualTlsAuthentication, domainName.mutualTlsAuthentication) &&
        Objects.equals(this.ownershipVerificationCertificateArn, domainName.ownershipVerificationCertificateArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, certificateName, certificateArn, certificateUploadDate, regionalDomainName, regionalHostedZoneId, regionalCertificateName, regionalCertificateArn, distributionDomainName, distributionHostedZoneId, endpointConfiguration, domainNameStatus, domainNameStatusMessage, securityPolicy, tags, mutualTlsAuthentication, ownershipVerificationCertificateArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainName {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    certificateName: ").append(toIndentedString(certificateName)).append("\n");
    sb.append("    certificateArn: ").append(toIndentedString(certificateArn)).append("\n");
    sb.append("    certificateUploadDate: ").append(toIndentedString(certificateUploadDate)).append("\n");
    sb.append("    regionalDomainName: ").append(toIndentedString(regionalDomainName)).append("\n");
    sb.append("    regionalHostedZoneId: ").append(toIndentedString(regionalHostedZoneId)).append("\n");
    sb.append("    regionalCertificateName: ").append(toIndentedString(regionalCertificateName)).append("\n");
    sb.append("    regionalCertificateArn: ").append(toIndentedString(regionalCertificateArn)).append("\n");
    sb.append("    distributionDomainName: ").append(toIndentedString(distributionDomainName)).append("\n");
    sb.append("    distributionHostedZoneId: ").append(toIndentedString(distributionHostedZoneId)).append("\n");
    sb.append("    endpointConfiguration: ").append(toIndentedString(endpointConfiguration)).append("\n");
    sb.append("    domainNameStatus: ").append(toIndentedString(domainNameStatus)).append("\n");
    sb.append("    domainNameStatusMessage: ").append(toIndentedString(domainNameStatusMessage)).append("\n");
    sb.append("    securityPolicy: ").append(toIndentedString(securityPolicy)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    mutualTlsAuthentication: ").append(toIndentedString(mutualTlsAuthentication)).append("\n");
    sb.append("    ownershipVerificationCertificateArn: ").append(toIndentedString(ownershipVerificationCertificateArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domainName");
    openapiFields.add("certificateName");
    openapiFields.add("certificateArn");
    openapiFields.add("certificateUploadDate");
    openapiFields.add("regionalDomainName");
    openapiFields.add("regionalHostedZoneId");
    openapiFields.add("regionalCertificateName");
    openapiFields.add("regionalCertificateArn");
    openapiFields.add("distributionDomainName");
    openapiFields.add("distributionHostedZoneId");
    openapiFields.add("endpointConfiguration");
    openapiFields.add("domainNameStatus");
    openapiFields.add("domainNameStatusMessage");
    openapiFields.add("securityPolicy");
    openapiFields.add("tags");
    openapiFields.add("mutualTlsAuthentication");
    openapiFields.add("ownershipVerificationCertificateArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainName is not found in the empty JSON string", DomainName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `domainName`
      if (jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("domainName"));
      }
      // validate the optional field `certificateName`
      if (jsonObj.get("certificateName") != null && !jsonObj.get("certificateName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("certificateName"));
      }
      // validate the optional field `certificateArn`
      if (jsonObj.get("certificateArn") != null && !jsonObj.get("certificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("certificateArn"));
      }
      // validate the optional field `certificateUploadDate`
      if (jsonObj.get("certificateUploadDate") != null && !jsonObj.get("certificateUploadDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("certificateUploadDate"));
      }
      // validate the optional field `regionalDomainName`
      if (jsonObj.get("regionalDomainName") != null && !jsonObj.get("regionalDomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("regionalDomainName"));
      }
      // validate the optional field `regionalHostedZoneId`
      if (jsonObj.get("regionalHostedZoneId") != null && !jsonObj.get("regionalHostedZoneId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("regionalHostedZoneId"));
      }
      // validate the optional field `regionalCertificateName`
      if (jsonObj.get("regionalCertificateName") != null && !jsonObj.get("regionalCertificateName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("regionalCertificateName"));
      }
      // validate the optional field `regionalCertificateArn`
      if (jsonObj.get("regionalCertificateArn") != null && !jsonObj.get("regionalCertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("regionalCertificateArn"));
      }
      // validate the optional field `distributionDomainName`
      if (jsonObj.get("distributionDomainName") != null && !jsonObj.get("distributionDomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("distributionDomainName"));
      }
      // validate the optional field `distributionHostedZoneId`
      if (jsonObj.get("distributionHostedZoneId") != null && !jsonObj.get("distributionHostedZoneId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("distributionHostedZoneId"));
      }
      // validate the optional field `endpointConfiguration`
      if (jsonObj.get("endpointConfiguration") != null && !jsonObj.get("endpointConfiguration").isJsonNull()) {
        DomainNameEndpointConfiguration.validateJsonElement(jsonObj.get("endpointConfiguration"));
      }
      // validate the optional field `domainNameStatus`
      if (jsonObj.get("domainNameStatus") != null && !jsonObj.get("domainNameStatus").isJsonNull()) {
        DomainNameStatus.validateJsonElement(jsonObj.get("domainNameStatus"));
      }
      // validate the optional field `domainNameStatusMessage`
      if (jsonObj.get("domainNameStatusMessage") != null && !jsonObj.get("domainNameStatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("domainNameStatusMessage"));
      }
      // validate the optional field `securityPolicy`
      if (jsonObj.get("securityPolicy") != null && !jsonObj.get("securityPolicy").isJsonNull()) {
        SecurityPolicy.validateJsonElement(jsonObj.get("securityPolicy"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `mutualTlsAuthentication`
      if (jsonObj.get("mutualTlsAuthentication") != null && !jsonObj.get("mutualTlsAuthentication").isJsonNull()) {
        DomainNameMutualTlsAuthentication.validateJsonElement(jsonObj.get("mutualTlsAuthentication"));
      }
      // validate the optional field `ownershipVerificationCertificateArn`
      if (jsonObj.get("ownershipVerificationCertificateArn") != null && !jsonObj.get("ownershipVerificationCertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ownershipVerificationCertificateArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainName.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainName>() {
           @Override
           public void write(JsonWriter out, DomainName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainName
   * @throws IOException if the JSON string is invalid with respect to DomainName
   */
  public static DomainName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainName.class);
  }

  /**
   * Convert an instance of DomainName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

