/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutMethodRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class PutMethodRequest {
  public static final String SERIALIZED_NAME_AUTHORIZATION_TYPE = "authorizationType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TYPE)
  @javax.annotation.Nonnull
  private String authorizationType;

  public static final String SERIALIZED_NAME_AUTHORIZER_ID = "authorizerId";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_ID)
  @javax.annotation.Nullable
  private String authorizerId;

  public static final String SERIALIZED_NAME_API_KEY_REQUIRED = "apiKeyRequired";
  @SerializedName(SERIALIZED_NAME_API_KEY_REQUIRED)
  @javax.annotation.Nullable
  private Boolean apiKeyRequired;

  public static final String SERIALIZED_NAME_OPERATION_NAME = "operationName";
  @SerializedName(SERIALIZED_NAME_OPERATION_NAME)
  @javax.annotation.Nullable
  private String operationName;

  public static final String SERIALIZED_NAME_REQUEST_PARAMETERS = "requestParameters";
  @SerializedName(SERIALIZED_NAME_REQUEST_PARAMETERS)
  @javax.annotation.Nullable
  private Map<String, Boolean> requestParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUEST_MODELS = "requestModels";
  @SerializedName(SERIALIZED_NAME_REQUEST_MODELS)
  @javax.annotation.Nullable
  private Map<String, String> requestModels = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUEST_VALIDATOR_ID = "requestValidatorId";
  @SerializedName(SERIALIZED_NAME_REQUEST_VALIDATOR_ID)
  @javax.annotation.Nullable
  private String requestValidatorId;

  public static final String SERIALIZED_NAME_AUTHORIZATION_SCOPES = "authorizationScopes";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_SCOPES)
  @javax.annotation.Nullable
  private List<String> authorizationScopes = new ArrayList<>();

  public PutMethodRequest() {
  }

  public PutMethodRequest authorizationType(@javax.annotation.Nonnull String authorizationType) {
    this.authorizationType = authorizationType;
    return this;
  }

  /**
   * The method&#39;s authorization type. Valid values are &lt;code&gt;NONE&lt;/code&gt; for open access, &lt;code&gt;AWS_IAM&lt;/code&gt; for using AWS IAM permissions, &lt;code&gt;CUSTOM&lt;/code&gt; for using a custom authorizer, or &lt;code&gt;COGNITO_USER_POOLS&lt;/code&gt; for using a Cognito user pool.
   * @return authorizationType
   */
  @javax.annotation.Nonnull
  public String getAuthorizationType() {
    return authorizationType;
  }

  public void setAuthorizationType(@javax.annotation.Nonnull String authorizationType) {
    this.authorizationType = authorizationType;
  }


  public PutMethodRequest authorizerId(@javax.annotation.Nullable String authorizerId) {
    this.authorizerId = authorizerId;
    return this;
  }

  /**
   * Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
   * @return authorizerId
   */
  @javax.annotation.Nullable
  public String getAuthorizerId() {
    return authorizerId;
  }

  public void setAuthorizerId(@javax.annotation.Nullable String authorizerId) {
    this.authorizerId = authorizerId;
  }


  public PutMethodRequest apiKeyRequired(@javax.annotation.Nullable Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
    return this;
  }

  /**
   * Specifies whether the method required a valid ApiKey.
   * @return apiKeyRequired
   */
  @javax.annotation.Nullable
  public Boolean getApiKeyRequired() {
    return apiKeyRequired;
  }

  public void setApiKeyRequired(@javax.annotation.Nullable Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
  }


  public PutMethodRequest operationName(@javax.annotation.Nullable String operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * A human-friendly operation identifier for the method. For example, you can assign the &lt;code&gt;operationName&lt;/code&gt; of &lt;code&gt;ListPets&lt;/code&gt; for the &lt;code&gt;GET /pets&lt;/code&gt; method in the &lt;code&gt;PetStore&lt;/code&gt; example.
   * @return operationName
   */
  @javax.annotation.Nullable
  public String getOperationName() {
    return operationName;
  }

  public void setOperationName(@javax.annotation.Nullable String operationName) {
    this.operationName = operationName;
  }


  public PutMethodRequest requestParameters(@javax.annotation.Nullable Map<String, Boolean> requestParameters) {
    this.requestParameters = requestParameters;
    return this;
  }

  public PutMethodRequest putRequestParametersItem(String key, Boolean requestParametersItem) {
    if (this.requestParameters == null) {
      this.requestParameters = new HashMap<>();
    }
    this.requestParameters.put(key, requestParametersItem);
    return this;
  }

  /**
   * A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of &lt;code&gt;method.request.{location}.{name}&lt;/code&gt;, where &lt;code&gt;location&lt;/code&gt; is &lt;code&gt;querystring&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, or &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (&lt;code&gt;true&lt;/code&gt;) or optional (&lt;code&gt;false&lt;/code&gt;). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.
   * @return requestParameters
   */
  @javax.annotation.Nullable
  public Map<String, Boolean> getRequestParameters() {
    return requestParameters;
  }

  public void setRequestParameters(@javax.annotation.Nullable Map<String, Boolean> requestParameters) {
    this.requestParameters = requestParameters;
  }


  public PutMethodRequest requestModels(@javax.annotation.Nullable Map<String, String> requestModels) {
    this.requestModels = requestModels;
    return this;
  }

  public PutMethodRequest putRequestModelsItem(String key, String requestModelsItem) {
    if (this.requestModels == null) {
      this.requestModels = new HashMap<>();
    }
    this.requestModels.put(key, requestModelsItem);
    return this;
  }

  /**
   * Specifies the Model resources used for the request&#39;s content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.
   * @return requestModels
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequestModels() {
    return requestModels;
  }

  public void setRequestModels(@javax.annotation.Nullable Map<String, String> requestModels) {
    this.requestModels = requestModels;
  }


  public PutMethodRequest requestValidatorId(@javax.annotation.Nullable String requestValidatorId) {
    this.requestValidatorId = requestValidatorId;
    return this;
  }

  /**
   * The identifier of a RequestValidator for validating the method request.
   * @return requestValidatorId
   */
  @javax.annotation.Nullable
  public String getRequestValidatorId() {
    return requestValidatorId;
  }

  public void setRequestValidatorId(@javax.annotation.Nullable String requestValidatorId) {
    this.requestValidatorId = requestValidatorId;
  }


  public PutMethodRequest authorizationScopes(@javax.annotation.Nullable List<String> authorizationScopes) {
    this.authorizationScopes = authorizationScopes;
    return this;
  }

  public PutMethodRequest addAuthorizationScopesItem(String authorizationScopesItem) {
    if (this.authorizationScopes == null) {
      this.authorizationScopes = new ArrayList<>();
    }
    this.authorizationScopes.add(authorizationScopesItem);
    return this;
  }

  /**
   * A list of authorization scopes configured on the method. The scopes are used with a &lt;code&gt;COGNITO_USER_POOLS&lt;/code&gt; authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
   * @return authorizationScopes
   */
  @javax.annotation.Nullable
  public List<String> getAuthorizationScopes() {
    return authorizationScopes;
  }

  public void setAuthorizationScopes(@javax.annotation.Nullable List<String> authorizationScopes) {
    this.authorizationScopes = authorizationScopes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutMethodRequest putMethodRequest = (PutMethodRequest) o;
    return Objects.equals(this.authorizationType, putMethodRequest.authorizationType) &&
        Objects.equals(this.authorizerId, putMethodRequest.authorizerId) &&
        Objects.equals(this.apiKeyRequired, putMethodRequest.apiKeyRequired) &&
        Objects.equals(this.operationName, putMethodRequest.operationName) &&
        Objects.equals(this.requestParameters, putMethodRequest.requestParameters) &&
        Objects.equals(this.requestModels, putMethodRequest.requestModels) &&
        Objects.equals(this.requestValidatorId, putMethodRequest.requestValidatorId) &&
        Objects.equals(this.authorizationScopes, putMethodRequest.authorizationScopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationType, authorizerId, apiKeyRequired, operationName, requestParameters, requestModels, requestValidatorId, authorizationScopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutMethodRequest {\n");
    sb.append("    authorizationType: ").append(toIndentedString(authorizationType)).append("\n");
    sb.append("    authorizerId: ").append(toIndentedString(authorizerId)).append("\n");
    sb.append("    apiKeyRequired: ").append(toIndentedString(apiKeyRequired)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("    requestModels: ").append(toIndentedString(requestModels)).append("\n");
    sb.append("    requestValidatorId: ").append(toIndentedString(requestValidatorId)).append("\n");
    sb.append("    authorizationScopes: ").append(toIndentedString(authorizationScopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationType");
    openapiFields.add("authorizerId");
    openapiFields.add("apiKeyRequired");
    openapiFields.add("operationName");
    openapiFields.add("requestParameters");
    openapiFields.add("requestModels");
    openapiFields.add("requestValidatorId");
    openapiFields.add("authorizationScopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutMethodRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutMethodRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutMethodRequest is not found in the empty JSON string", PutMethodRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutMethodRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutMethodRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutMethodRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("authorizationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationType").toString()));
      }
      if ((jsonObj.get("authorizerId") != null && !jsonObj.get("authorizerId").isJsonNull()) && !jsonObj.get("authorizerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizerId").toString()));
      }
      if ((jsonObj.get("operationName") != null && !jsonObj.get("operationName").isJsonNull()) && !jsonObj.get("operationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationName").toString()));
      }
      if ((jsonObj.get("requestValidatorId") != null && !jsonObj.get("requestValidatorId").isJsonNull()) && !jsonObj.get("requestValidatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestValidatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestValidatorId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authorizationScopes") != null && !jsonObj.get("authorizationScopes").isJsonNull() && !jsonObj.get("authorizationScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationScopes` to be an array in the JSON string but got `%s`", jsonObj.get("authorizationScopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutMethodRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutMethodRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutMethodRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutMethodRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutMethodRequest>() {
           @Override
           public void write(JsonWriter out, PutMethodRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutMethodRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutMethodRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutMethodRequest
   * @throws IOException if the JSON string is invalid with respect to PutMethodRequest
   */
  public static PutMethodRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutMethodRequest.class);
  }

  /**
   * Convert an instance of PutMethodRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

