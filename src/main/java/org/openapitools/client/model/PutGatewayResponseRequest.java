/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutGatewayResponseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class PutGatewayResponseRequest {
  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  @javax.annotation.Nullable
  private String statusCode;

  public static final String SERIALIZED_NAME_RESPONSE_PARAMETERS = "responseParameters";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PARAMETERS)
  @javax.annotation.Nullable
  private Map<String, String> responseParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_RESPONSE_TEMPLATES = "responseTemplates";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TEMPLATES)
  @javax.annotation.Nullable
  private Map<String, String> responseTemplates = new HashMap<>();

  public PutGatewayResponseRequest() {
  }

  public PutGatewayResponseRequest statusCode(@javax.annotation.Nullable String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * The status code.
   * @return statusCode
   */
  @javax.annotation.Nullable
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(@javax.annotation.Nullable String statusCode) {
    this.statusCode = statusCode;
  }


  public PutGatewayResponseRequest responseParameters(@javax.annotation.Nullable Map<String, String> responseParameters) {
    this.responseParameters = responseParameters;
    return this;
  }

  public PutGatewayResponseRequest putResponseParametersItem(String key, String responseParametersItem) {
    if (this.responseParameters == null) {
      this.responseParameters = new HashMap<>();
    }
    this.responseParameters.put(key, responseParametersItem);
    return this;
  }

  /**
   * Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
   * @return responseParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getResponseParameters() {
    return responseParameters;
  }

  public void setResponseParameters(@javax.annotation.Nullable Map<String, String> responseParameters) {
    this.responseParameters = responseParameters;
  }


  public PutGatewayResponseRequest responseTemplates(@javax.annotation.Nullable Map<String, String> responseTemplates) {
    this.responseTemplates = responseTemplates;
    return this;
  }

  public PutGatewayResponseRequest putResponseTemplatesItem(String key, String responseTemplatesItem) {
    if (this.responseTemplates == null) {
      this.responseTemplates = new HashMap<>();
    }
    this.responseTemplates.put(key, responseTemplatesItem);
    return this;
  }

  /**
   * Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
   * @return responseTemplates
   */
  @javax.annotation.Nullable
  public Map<String, String> getResponseTemplates() {
    return responseTemplates;
  }

  public void setResponseTemplates(@javax.annotation.Nullable Map<String, String> responseTemplates) {
    this.responseTemplates = responseTemplates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutGatewayResponseRequest putGatewayResponseRequest = (PutGatewayResponseRequest) o;
    return Objects.equals(this.statusCode, putGatewayResponseRequest.statusCode) &&
        Objects.equals(this.responseParameters, putGatewayResponseRequest.responseParameters) &&
        Objects.equals(this.responseTemplates, putGatewayResponseRequest.responseTemplates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusCode, responseParameters, responseTemplates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutGatewayResponseRequest {\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    responseParameters: ").append(toIndentedString(responseParameters)).append("\n");
    sb.append("    responseTemplates: ").append(toIndentedString(responseTemplates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("statusCode");
    openapiFields.add("responseParameters");
    openapiFields.add("responseTemplates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutGatewayResponseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutGatewayResponseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutGatewayResponseRequest is not found in the empty JSON string", PutGatewayResponseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutGatewayResponseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutGatewayResponseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) && !jsonObj.get("statusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutGatewayResponseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutGatewayResponseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutGatewayResponseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutGatewayResponseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutGatewayResponseRequest>() {
           @Override
           public void write(JsonWriter out, PutGatewayResponseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutGatewayResponseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutGatewayResponseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutGatewayResponseRequest
   * @throws IOException if the JSON string is invalid with respect to PutGatewayResponseRequest
   */
  public static PutGatewayResponseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutGatewayResponseRequest.class);
  }

  /**
   * Convert an instance of PutGatewayResponseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

