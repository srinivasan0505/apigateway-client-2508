/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.GatewayResponseType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A gateway response of a given response type and status code, with optional response parameters and mapping templates.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class GatewayResponse {
  public static final String SERIALIZED_NAME_RESPONSE_TYPE = "responseType";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPE)
  @javax.annotation.Nullable
  private GatewayResponseType responseType;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  @javax.annotation.Nullable
  private String statusCode;

  public static final String SERIALIZED_NAME_RESPONSE_PARAMETERS = "responseParameters";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PARAMETERS)
  @javax.annotation.Nullable
  private Map responseParameters;

  public static final String SERIALIZED_NAME_RESPONSE_TEMPLATES = "responseTemplates";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TEMPLATES)
  @javax.annotation.Nullable
  private Map responseTemplates;

  public static final String SERIALIZED_NAME_DEFAULT_RESPONSE = "defaultResponse";
  @SerializedName(SERIALIZED_NAME_DEFAULT_RESPONSE)
  @javax.annotation.Nullable
  private Boolean defaultResponse;

  public GatewayResponse() {
  }

  public GatewayResponse responseType(@javax.annotation.Nullable GatewayResponseType responseType) {
    this.responseType = responseType;
    return this;
  }

  /**
   * Get responseType
   * @return responseType
   */
  @javax.annotation.Nullable
  public GatewayResponseType getResponseType() {
    return responseType;
  }

  public void setResponseType(@javax.annotation.Nullable GatewayResponseType responseType) {
    this.responseType = responseType;
  }


  public GatewayResponse statusCode(@javax.annotation.Nullable String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(@javax.annotation.Nullable String statusCode) {
    this.statusCode = statusCode;
  }


  public GatewayResponse responseParameters(@javax.annotation.Nullable Map responseParameters) {
    this.responseParameters = responseParameters;
    return this;
  }

  /**
   * Get responseParameters
   * @return responseParameters
   */
  @javax.annotation.Nullable
  public Map getResponseParameters() {
    return responseParameters;
  }

  public void setResponseParameters(@javax.annotation.Nullable Map responseParameters) {
    this.responseParameters = responseParameters;
  }


  public GatewayResponse responseTemplates(@javax.annotation.Nullable Map responseTemplates) {
    this.responseTemplates = responseTemplates;
    return this;
  }

  /**
   * Get responseTemplates
   * @return responseTemplates
   */
  @javax.annotation.Nullable
  public Map getResponseTemplates() {
    return responseTemplates;
  }

  public void setResponseTemplates(@javax.annotation.Nullable Map responseTemplates) {
    this.responseTemplates = responseTemplates;
  }


  public GatewayResponse defaultResponse(@javax.annotation.Nullable Boolean defaultResponse) {
    this.defaultResponse = defaultResponse;
    return this;
  }

  /**
   * Get defaultResponse
   * @return defaultResponse
   */
  @javax.annotation.Nullable
  public Boolean getDefaultResponse() {
    return defaultResponse;
  }

  public void setDefaultResponse(@javax.annotation.Nullable Boolean defaultResponse) {
    this.defaultResponse = defaultResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayResponse gatewayResponse = (GatewayResponse) o;
    return Objects.equals(this.responseType, gatewayResponse.responseType) &&
        Objects.equals(this.statusCode, gatewayResponse.statusCode) &&
        Objects.equals(this.responseParameters, gatewayResponse.responseParameters) &&
        Objects.equals(this.responseTemplates, gatewayResponse.responseTemplates) &&
        Objects.equals(this.defaultResponse, gatewayResponse.defaultResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseType, statusCode, responseParameters, responseTemplates, defaultResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayResponse {\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    responseParameters: ").append(toIndentedString(responseParameters)).append("\n");
    sb.append("    responseTemplates: ").append(toIndentedString(responseTemplates)).append("\n");
    sb.append("    defaultResponse: ").append(toIndentedString(defaultResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responseType");
    openapiFields.add("statusCode");
    openapiFields.add("responseParameters");
    openapiFields.add("responseTemplates");
    openapiFields.add("defaultResponse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayResponse is not found in the empty JSON string", GatewayResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `responseType`
      if (jsonObj.get("responseType") != null && !jsonObj.get("responseType").isJsonNull()) {
        GatewayResponseType.validateJsonElement(jsonObj.get("responseType"));
      }
      // validate the optional field `statusCode`
      if (jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusCode"));
      }
      // validate the optional field `responseParameters`
      if (jsonObj.get("responseParameters") != null && !jsonObj.get("responseParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("responseParameters"));
      }
      // validate the optional field `responseTemplates`
      if (jsonObj.get("responseTemplates") != null && !jsonObj.get("responseTemplates").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("responseTemplates"));
      }
      // validate the optional field `defaultResponse`
      if (jsonObj.get("defaultResponse") != null && !jsonObj.get("defaultResponse").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("defaultResponse"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayResponse>() {
           @Override
           public void write(JsonWriter out, GatewayResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayResponse
   * @throws IOException if the JSON string is invalid with respect to GatewayResponse
   */
  public static GatewayResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayResponse.class);
  }

  /**
   * Convert an instance of GatewayResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

