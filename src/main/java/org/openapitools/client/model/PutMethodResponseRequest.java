/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutMethodResponseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class PutMethodResponseRequest {
  public static final String SERIALIZED_NAME_RESPONSE_PARAMETERS = "responseParameters";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PARAMETERS)
  @javax.annotation.Nullable
  private Map<String, Boolean> responseParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_RESPONSE_MODELS = "responseModels";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MODELS)
  @javax.annotation.Nullable
  private Map<String, String> responseModels = new HashMap<>();

  public PutMethodResponseRequest() {
  }

  public PutMethodResponseRequest responseParameters(@javax.annotation.Nullable Map<String, Boolean> responseParameters) {
    this.responseParameters = responseParameters;
    return this;
  }

  public PutMethodResponseRequest putResponseParametersItem(String key, Boolean responseParametersItem) {
    if (this.responseParameters == null) {
      this.responseParameters = new HashMap<>();
    }
    this.responseParameters.put(key, responseParametersItem);
    return this;
  }

  /**
   * A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of &lt;code&gt;method.response.header.{name}&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in &lt;code&gt;integration.response.header.{name}&lt;/code&gt;, a static value enclosed within a pair of single quotes (e.g., &lt;code&gt;&#39;application/json&#39;&lt;/code&gt;), or a JSON expression from the back-end response payload in the form of &lt;code&gt;integration.response.body.{JSON-expression}&lt;/code&gt;, where &lt;code&gt;JSON-expression&lt;/code&gt; is a valid JSON expression without the &lt;code&gt;$&lt;/code&gt; prefix.)
   * @return responseParameters
   */
  @javax.annotation.Nullable
  public Map<String, Boolean> getResponseParameters() {
    return responseParameters;
  }

  public void setResponseParameters(@javax.annotation.Nullable Map<String, Boolean> responseParameters) {
    this.responseParameters = responseParameters;
  }


  public PutMethodResponseRequest responseModels(@javax.annotation.Nullable Map<String, String> responseModels) {
    this.responseModels = responseModels;
    return this;
  }

  public PutMethodResponseRequest putResponseModelsItem(String key, String responseModelsItem) {
    if (this.responseModels == null) {
      this.responseModels = new HashMap<>();
    }
    this.responseModels.put(key, responseModelsItem);
    return this;
  }

  /**
   * Specifies the Model resources used for the response&#39;s content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.
   * @return responseModels
   */
  @javax.annotation.Nullable
  public Map<String, String> getResponseModels() {
    return responseModels;
  }

  public void setResponseModels(@javax.annotation.Nullable Map<String, String> responseModels) {
    this.responseModels = responseModels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutMethodResponseRequest putMethodResponseRequest = (PutMethodResponseRequest) o;
    return Objects.equals(this.responseParameters, putMethodResponseRequest.responseParameters) &&
        Objects.equals(this.responseModels, putMethodResponseRequest.responseModels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseParameters, responseModels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutMethodResponseRequest {\n");
    sb.append("    responseParameters: ").append(toIndentedString(responseParameters)).append("\n");
    sb.append("    responseModels: ").append(toIndentedString(responseModels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responseParameters");
    openapiFields.add("responseModels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutMethodResponseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutMethodResponseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutMethodResponseRequest is not found in the empty JSON string", PutMethodResponseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutMethodResponseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutMethodResponseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutMethodResponseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutMethodResponseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutMethodResponseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutMethodResponseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutMethodResponseRequest>() {
           @Override
           public void write(JsonWriter out, PutMethodResponseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutMethodResponseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutMethodResponseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutMethodResponseRequest
   * @throws IOException if the JSON string is invalid with respect to PutMethodResponseRequest
   */
  public static PutMethodResponseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutMethodResponseRequest.class);
  }

  /**
   * Convert an instance of PutMethodResponseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

