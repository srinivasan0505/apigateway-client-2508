/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutIntegrationResponseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class PutIntegrationResponseRequest {
  public static final String SERIALIZED_NAME_SELECTION_PATTERN = "selectionPattern";
  @SerializedName(SERIALIZED_NAME_SELECTION_PATTERN)
  @javax.annotation.Nullable
  private String selectionPattern;

  public static final String SERIALIZED_NAME_RESPONSE_PARAMETERS = "responseParameters";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PARAMETERS)
  @javax.annotation.Nullable
  private Map<String, String> responseParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_RESPONSE_TEMPLATES = "responseTemplates";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TEMPLATES)
  @javax.annotation.Nullable
  private Map<String, String> responseTemplates = new HashMap<>();

  /**
   * &lt;p&gt;Specifies how to handle response payload content type conversions. Supported values are &lt;code&gt;CONVERT_TO_BINARY&lt;/code&gt; and &lt;code&gt;CONVERT_TO_TEXT&lt;/code&gt;, with the following behaviors:&lt;/p&gt; &lt;p&gt;If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.&lt;/p&gt;
   */
  @JsonAdapter(ContentHandlingEnum.Adapter.class)
  public enum ContentHandlingEnum {
    BINARY("CONVERT_TO_BINARY"),
    
    TEXT("CONVERT_TO_TEXT");

    private String value;

    ContentHandlingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentHandlingEnum fromValue(String value) {
      for (ContentHandlingEnum b : ContentHandlingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentHandlingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentHandlingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentHandlingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentHandlingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentHandlingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_HANDLING = "contentHandling";
  @SerializedName(SERIALIZED_NAME_CONTENT_HANDLING)
  @javax.annotation.Nullable
  private ContentHandlingEnum contentHandling;

  public PutIntegrationResponseRequest() {
  }

  public PutIntegrationResponseRequest selectionPattern(@javax.annotation.Nullable String selectionPattern) {
    this.selectionPattern = selectionPattern;
    return this;
  }

  /**
   * Specifies the selection pattern of a put integration response.
   * @return selectionPattern
   */
  @javax.annotation.Nullable
  public String getSelectionPattern() {
    return selectionPattern;
  }

  public void setSelectionPattern(@javax.annotation.Nullable String selectionPattern) {
    this.selectionPattern = selectionPattern;
  }


  public PutIntegrationResponseRequest responseParameters(@javax.annotation.Nullable Map<String, String> responseParameters) {
    this.responseParameters = responseParameters;
    return this;
  }

  public PutIntegrationResponseRequest putResponseParametersItem(String key, String responseParametersItem) {
    if (this.responseParameters == null) {
      this.responseParameters = new HashMap<>();
    }
    this.responseParameters.put(key, responseParametersItem);
    return this;
  }

  /**
   * A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of &lt;code&gt;method.response.header.{name}&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is a valid and unique header name. The mapped non-static value must match the pattern of &lt;code&gt;integration.response.header.{name}&lt;/code&gt; or &lt;code&gt;integration.response.body.{JSON-expression}&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; must be a valid and unique response header name and &lt;code&gt;JSON-expression&lt;/code&gt; a valid JSON expression without the &lt;code&gt;$&lt;/code&gt; prefix.
   * @return responseParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getResponseParameters() {
    return responseParameters;
  }

  public void setResponseParameters(@javax.annotation.Nullable Map<String, String> responseParameters) {
    this.responseParameters = responseParameters;
  }


  public PutIntegrationResponseRequest responseTemplates(@javax.annotation.Nullable Map<String, String> responseTemplates) {
    this.responseTemplates = responseTemplates;
    return this;
  }

  public PutIntegrationResponseRequest putResponseTemplatesItem(String key, String responseTemplatesItem) {
    if (this.responseTemplates == null) {
      this.responseTemplates = new HashMap<>();
    }
    this.responseTemplates.put(key, responseTemplatesItem);
    return this;
  }

  /**
   * Specifies a put integration response&#39;s templates.
   * @return responseTemplates
   */
  @javax.annotation.Nullable
  public Map<String, String> getResponseTemplates() {
    return responseTemplates;
  }

  public void setResponseTemplates(@javax.annotation.Nullable Map<String, String> responseTemplates) {
    this.responseTemplates = responseTemplates;
  }


  public PutIntegrationResponseRequest contentHandling(@javax.annotation.Nullable ContentHandlingEnum contentHandling) {
    this.contentHandling = contentHandling;
    return this;
  }

  /**
   * &lt;p&gt;Specifies how to handle response payload content type conversions. Supported values are &lt;code&gt;CONVERT_TO_BINARY&lt;/code&gt; and &lt;code&gt;CONVERT_TO_TEXT&lt;/code&gt;, with the following behaviors:&lt;/p&gt; &lt;p&gt;If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.&lt;/p&gt;
   * @return contentHandling
   */
  @javax.annotation.Nullable
  public ContentHandlingEnum getContentHandling() {
    return contentHandling;
  }

  public void setContentHandling(@javax.annotation.Nullable ContentHandlingEnum contentHandling) {
    this.contentHandling = contentHandling;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutIntegrationResponseRequest putIntegrationResponseRequest = (PutIntegrationResponseRequest) o;
    return Objects.equals(this.selectionPattern, putIntegrationResponseRequest.selectionPattern) &&
        Objects.equals(this.responseParameters, putIntegrationResponseRequest.responseParameters) &&
        Objects.equals(this.responseTemplates, putIntegrationResponseRequest.responseTemplates) &&
        Objects.equals(this.contentHandling, putIntegrationResponseRequest.contentHandling);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selectionPattern, responseParameters, responseTemplates, contentHandling);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutIntegrationResponseRequest {\n");
    sb.append("    selectionPattern: ").append(toIndentedString(selectionPattern)).append("\n");
    sb.append("    responseParameters: ").append(toIndentedString(responseParameters)).append("\n");
    sb.append("    responseTemplates: ").append(toIndentedString(responseTemplates)).append("\n");
    sb.append("    contentHandling: ").append(toIndentedString(contentHandling)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("selectionPattern");
    openapiFields.add("responseParameters");
    openapiFields.add("responseTemplates");
    openapiFields.add("contentHandling");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutIntegrationResponseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutIntegrationResponseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutIntegrationResponseRequest is not found in the empty JSON string", PutIntegrationResponseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutIntegrationResponseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutIntegrationResponseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("selectionPattern") != null && !jsonObj.get("selectionPattern").isJsonNull()) && !jsonObj.get("selectionPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectionPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectionPattern").toString()));
      }
      if ((jsonObj.get("contentHandling") != null && !jsonObj.get("contentHandling").isJsonNull()) && !jsonObj.get("contentHandling").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentHandling` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentHandling").toString()));
      }
      // validate the optional field `contentHandling`
      if (jsonObj.get("contentHandling") != null && !jsonObj.get("contentHandling").isJsonNull()) {
        ContentHandlingEnum.validateJsonElement(jsonObj.get("contentHandling"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutIntegrationResponseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutIntegrationResponseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutIntegrationResponseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutIntegrationResponseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutIntegrationResponseRequest>() {
           @Override
           public void write(JsonWriter out, PutIntegrationResponseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutIntegrationResponseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutIntegrationResponseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutIntegrationResponseRequest
   * @throws IOException if the JSON string is invalid with respect to PutIntegrationResponseRequest
   */
  public static PutIntegrationResponseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutIntegrationResponseRequest.class);
  }

  /**
   * Convert an instance of PutIntegrationResponseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

