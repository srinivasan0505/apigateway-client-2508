/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UnauthorizedCacheControlHeaderStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the method setting properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class MethodSetting {
  public static final String SERIALIZED_NAME_METRICS_ENABLED = "metricsEnabled";
  @SerializedName(SERIALIZED_NAME_METRICS_ENABLED)
  @javax.annotation.Nullable
  private Boolean metricsEnabled;

  public static final String SERIALIZED_NAME_LOGGING_LEVEL = "loggingLevel";
  @SerializedName(SERIALIZED_NAME_LOGGING_LEVEL)
  @javax.annotation.Nullable
  private String loggingLevel;

  public static final String SERIALIZED_NAME_DATA_TRACE_ENABLED = "dataTraceEnabled";
  @SerializedName(SERIALIZED_NAME_DATA_TRACE_ENABLED)
  @javax.annotation.Nullable
  private Boolean dataTraceEnabled;

  public static final String SERIALIZED_NAME_THROTTLING_BURST_LIMIT = "throttlingBurstLimit";
  @SerializedName(SERIALIZED_NAME_THROTTLING_BURST_LIMIT)
  @javax.annotation.Nullable
  private Integer throttlingBurstLimit;

  public static final String SERIALIZED_NAME_THROTTLING_RATE_LIMIT = "throttlingRateLimit";
  @SerializedName(SERIALIZED_NAME_THROTTLING_RATE_LIMIT)
  @javax.annotation.Nullable
  private Double throttlingRateLimit;

  public static final String SERIALIZED_NAME_CACHING_ENABLED = "cachingEnabled";
  @SerializedName(SERIALIZED_NAME_CACHING_ENABLED)
  @javax.annotation.Nullable
  private Boolean cachingEnabled;

  public static final String SERIALIZED_NAME_CACHE_TTL_IN_SECONDS = "cacheTtlInSeconds";
  @SerializedName(SERIALIZED_NAME_CACHE_TTL_IN_SECONDS)
  @javax.annotation.Nullable
  private Integer cacheTtlInSeconds;

  public static final String SERIALIZED_NAME_CACHE_DATA_ENCRYPTED = "cacheDataEncrypted";
  @SerializedName(SERIALIZED_NAME_CACHE_DATA_ENCRYPTED)
  @javax.annotation.Nullable
  private Boolean cacheDataEncrypted;

  public static final String SERIALIZED_NAME_REQUIRE_AUTHORIZATION_FOR_CACHE_CONTROL = "requireAuthorizationForCacheControl";
  @SerializedName(SERIALIZED_NAME_REQUIRE_AUTHORIZATION_FOR_CACHE_CONTROL)
  @javax.annotation.Nullable
  private Boolean requireAuthorizationForCacheControl;

  public static final String SERIALIZED_NAME_UNAUTHORIZED_CACHE_CONTROL_HEADER_STRATEGY = "unauthorizedCacheControlHeaderStrategy";
  @SerializedName(SERIALIZED_NAME_UNAUTHORIZED_CACHE_CONTROL_HEADER_STRATEGY)
  @javax.annotation.Nullable
  private UnauthorizedCacheControlHeaderStrategy unauthorizedCacheControlHeaderStrategy;

  public MethodSetting() {
  }

  public MethodSetting metricsEnabled(@javax.annotation.Nullable Boolean metricsEnabled) {
    this.metricsEnabled = metricsEnabled;
    return this;
  }

  /**
   * Get metricsEnabled
   * @return metricsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMetricsEnabled() {
    return metricsEnabled;
  }

  public void setMetricsEnabled(@javax.annotation.Nullable Boolean metricsEnabled) {
    this.metricsEnabled = metricsEnabled;
  }


  public MethodSetting loggingLevel(@javax.annotation.Nullable String loggingLevel) {
    this.loggingLevel = loggingLevel;
    return this;
  }

  /**
   * Get loggingLevel
   * @return loggingLevel
   */
  @javax.annotation.Nullable
  public String getLoggingLevel() {
    return loggingLevel;
  }

  public void setLoggingLevel(@javax.annotation.Nullable String loggingLevel) {
    this.loggingLevel = loggingLevel;
  }


  public MethodSetting dataTraceEnabled(@javax.annotation.Nullable Boolean dataTraceEnabled) {
    this.dataTraceEnabled = dataTraceEnabled;
    return this;
  }

  /**
   * Get dataTraceEnabled
   * @return dataTraceEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDataTraceEnabled() {
    return dataTraceEnabled;
  }

  public void setDataTraceEnabled(@javax.annotation.Nullable Boolean dataTraceEnabled) {
    this.dataTraceEnabled = dataTraceEnabled;
  }


  public MethodSetting throttlingBurstLimit(@javax.annotation.Nullable Integer throttlingBurstLimit) {
    this.throttlingBurstLimit = throttlingBurstLimit;
    return this;
  }

  /**
   * Get throttlingBurstLimit
   * @return throttlingBurstLimit
   */
  @javax.annotation.Nullable
  public Integer getThrottlingBurstLimit() {
    return throttlingBurstLimit;
  }

  public void setThrottlingBurstLimit(@javax.annotation.Nullable Integer throttlingBurstLimit) {
    this.throttlingBurstLimit = throttlingBurstLimit;
  }


  public MethodSetting throttlingRateLimit(@javax.annotation.Nullable Double throttlingRateLimit) {
    this.throttlingRateLimit = throttlingRateLimit;
    return this;
  }

  /**
   * Get throttlingRateLimit
   * @return throttlingRateLimit
   */
  @javax.annotation.Nullable
  public Double getThrottlingRateLimit() {
    return throttlingRateLimit;
  }

  public void setThrottlingRateLimit(@javax.annotation.Nullable Double throttlingRateLimit) {
    this.throttlingRateLimit = throttlingRateLimit;
  }


  public MethodSetting cachingEnabled(@javax.annotation.Nullable Boolean cachingEnabled) {
    this.cachingEnabled = cachingEnabled;
    return this;
  }

  /**
   * Get cachingEnabled
   * @return cachingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCachingEnabled() {
    return cachingEnabled;
  }

  public void setCachingEnabled(@javax.annotation.Nullable Boolean cachingEnabled) {
    this.cachingEnabled = cachingEnabled;
  }


  public MethodSetting cacheTtlInSeconds(@javax.annotation.Nullable Integer cacheTtlInSeconds) {
    this.cacheTtlInSeconds = cacheTtlInSeconds;
    return this;
  }

  /**
   * Get cacheTtlInSeconds
   * @return cacheTtlInSeconds
   */
  @javax.annotation.Nullable
  public Integer getCacheTtlInSeconds() {
    return cacheTtlInSeconds;
  }

  public void setCacheTtlInSeconds(@javax.annotation.Nullable Integer cacheTtlInSeconds) {
    this.cacheTtlInSeconds = cacheTtlInSeconds;
  }


  public MethodSetting cacheDataEncrypted(@javax.annotation.Nullable Boolean cacheDataEncrypted) {
    this.cacheDataEncrypted = cacheDataEncrypted;
    return this;
  }

  /**
   * Get cacheDataEncrypted
   * @return cacheDataEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getCacheDataEncrypted() {
    return cacheDataEncrypted;
  }

  public void setCacheDataEncrypted(@javax.annotation.Nullable Boolean cacheDataEncrypted) {
    this.cacheDataEncrypted = cacheDataEncrypted;
  }


  public MethodSetting requireAuthorizationForCacheControl(@javax.annotation.Nullable Boolean requireAuthorizationForCacheControl) {
    this.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl;
    return this;
  }

  /**
   * Get requireAuthorizationForCacheControl
   * @return requireAuthorizationForCacheControl
   */
  @javax.annotation.Nullable
  public Boolean getRequireAuthorizationForCacheControl() {
    return requireAuthorizationForCacheControl;
  }

  public void setRequireAuthorizationForCacheControl(@javax.annotation.Nullable Boolean requireAuthorizationForCacheControl) {
    this.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl;
  }


  public MethodSetting unauthorizedCacheControlHeaderStrategy(@javax.annotation.Nullable UnauthorizedCacheControlHeaderStrategy unauthorizedCacheControlHeaderStrategy) {
    this.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy;
    return this;
  }

  /**
   * Get unauthorizedCacheControlHeaderStrategy
   * @return unauthorizedCacheControlHeaderStrategy
   */
  @javax.annotation.Nullable
  public UnauthorizedCacheControlHeaderStrategy getUnauthorizedCacheControlHeaderStrategy() {
    return unauthorizedCacheControlHeaderStrategy;
  }

  public void setUnauthorizedCacheControlHeaderStrategy(@javax.annotation.Nullable UnauthorizedCacheControlHeaderStrategy unauthorizedCacheControlHeaderStrategy) {
    this.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MethodSetting methodSetting = (MethodSetting) o;
    return Objects.equals(this.metricsEnabled, methodSetting.metricsEnabled) &&
        Objects.equals(this.loggingLevel, methodSetting.loggingLevel) &&
        Objects.equals(this.dataTraceEnabled, methodSetting.dataTraceEnabled) &&
        Objects.equals(this.throttlingBurstLimit, methodSetting.throttlingBurstLimit) &&
        Objects.equals(this.throttlingRateLimit, methodSetting.throttlingRateLimit) &&
        Objects.equals(this.cachingEnabled, methodSetting.cachingEnabled) &&
        Objects.equals(this.cacheTtlInSeconds, methodSetting.cacheTtlInSeconds) &&
        Objects.equals(this.cacheDataEncrypted, methodSetting.cacheDataEncrypted) &&
        Objects.equals(this.requireAuthorizationForCacheControl, methodSetting.requireAuthorizationForCacheControl) &&
        Objects.equals(this.unauthorizedCacheControlHeaderStrategy, methodSetting.unauthorizedCacheControlHeaderStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricsEnabled, loggingLevel, dataTraceEnabled, throttlingBurstLimit, throttlingRateLimit, cachingEnabled, cacheTtlInSeconds, cacheDataEncrypted, requireAuthorizationForCacheControl, unauthorizedCacheControlHeaderStrategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MethodSetting {\n");
    sb.append("    metricsEnabled: ").append(toIndentedString(metricsEnabled)).append("\n");
    sb.append("    loggingLevel: ").append(toIndentedString(loggingLevel)).append("\n");
    sb.append("    dataTraceEnabled: ").append(toIndentedString(dataTraceEnabled)).append("\n");
    sb.append("    throttlingBurstLimit: ").append(toIndentedString(throttlingBurstLimit)).append("\n");
    sb.append("    throttlingRateLimit: ").append(toIndentedString(throttlingRateLimit)).append("\n");
    sb.append("    cachingEnabled: ").append(toIndentedString(cachingEnabled)).append("\n");
    sb.append("    cacheTtlInSeconds: ").append(toIndentedString(cacheTtlInSeconds)).append("\n");
    sb.append("    cacheDataEncrypted: ").append(toIndentedString(cacheDataEncrypted)).append("\n");
    sb.append("    requireAuthorizationForCacheControl: ").append(toIndentedString(requireAuthorizationForCacheControl)).append("\n");
    sb.append("    unauthorizedCacheControlHeaderStrategy: ").append(toIndentedString(unauthorizedCacheControlHeaderStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metricsEnabled");
    openapiFields.add("loggingLevel");
    openapiFields.add("dataTraceEnabled");
    openapiFields.add("throttlingBurstLimit");
    openapiFields.add("throttlingRateLimit");
    openapiFields.add("cachingEnabled");
    openapiFields.add("cacheTtlInSeconds");
    openapiFields.add("cacheDataEncrypted");
    openapiFields.add("requireAuthorizationForCacheControl");
    openapiFields.add("unauthorizedCacheControlHeaderStrategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MethodSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MethodSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MethodSetting is not found in the empty JSON string", MethodSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MethodSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MethodSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `metricsEnabled`
      if (jsonObj.get("metricsEnabled") != null && !jsonObj.get("metricsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("metricsEnabled"));
      }
      // validate the optional field `loggingLevel`
      if (jsonObj.get("loggingLevel") != null && !jsonObj.get("loggingLevel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("loggingLevel"));
      }
      // validate the optional field `dataTraceEnabled`
      if (jsonObj.get("dataTraceEnabled") != null && !jsonObj.get("dataTraceEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("dataTraceEnabled"));
      }
      // validate the optional field `throttlingBurstLimit`
      if (jsonObj.get("throttlingBurstLimit") != null && !jsonObj.get("throttlingBurstLimit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("throttlingBurstLimit"));
      }
      // validate the optional field `throttlingRateLimit`
      if (jsonObj.get("throttlingRateLimit") != null && !jsonObj.get("throttlingRateLimit").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("throttlingRateLimit"));
      }
      // validate the optional field `cachingEnabled`
      if (jsonObj.get("cachingEnabled") != null && !jsonObj.get("cachingEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("cachingEnabled"));
      }
      // validate the optional field `cacheTtlInSeconds`
      if (jsonObj.get("cacheTtlInSeconds") != null && !jsonObj.get("cacheTtlInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("cacheTtlInSeconds"));
      }
      // validate the optional field `cacheDataEncrypted`
      if (jsonObj.get("cacheDataEncrypted") != null && !jsonObj.get("cacheDataEncrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("cacheDataEncrypted"));
      }
      // validate the optional field `requireAuthorizationForCacheControl`
      if (jsonObj.get("requireAuthorizationForCacheControl") != null && !jsonObj.get("requireAuthorizationForCacheControl").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("requireAuthorizationForCacheControl"));
      }
      // validate the optional field `unauthorizedCacheControlHeaderStrategy`
      if (jsonObj.get("unauthorizedCacheControlHeaderStrategy") != null && !jsonObj.get("unauthorizedCacheControlHeaderStrategy").isJsonNull()) {
        UnauthorizedCacheControlHeaderStrategy.validateJsonElement(jsonObj.get("unauthorizedCacheControlHeaderStrategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MethodSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MethodSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MethodSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MethodSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<MethodSetting>() {
           @Override
           public void write(JsonWriter out, MethodSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MethodSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MethodSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MethodSetting
   * @throws IOException if the JSON string is invalid with respect to MethodSetting
   */
  public static MethodSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MethodSetting.class);
  }

  /**
   * Convert an instance of MethodSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

