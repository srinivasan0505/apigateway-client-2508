/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDocumentationVersionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateDocumentationVersionRequest {
  public static final String SERIALIZED_NAME_DOCUMENTATION_VERSION = "documentationVersion";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_VERSION)
  @javax.annotation.Nonnull
  private String documentationVersion;

  public static final String SERIALIZED_NAME_STAGE_NAME = "stageName";
  @SerializedName(SERIALIZED_NAME_STAGE_NAME)
  @javax.annotation.Nullable
  private String stageName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public CreateDocumentationVersionRequest() {
  }

  public CreateDocumentationVersionRequest documentationVersion(@javax.annotation.Nonnull String documentationVersion) {
    this.documentationVersion = documentationVersion;
    return this;
  }

  /**
   * The version identifier of the new snapshot.
   * @return documentationVersion
   */
  @javax.annotation.Nonnull
  public String getDocumentationVersion() {
    return documentationVersion;
  }

  public void setDocumentationVersion(@javax.annotation.Nonnull String documentationVersion) {
    this.documentationVersion = documentationVersion;
  }


  public CreateDocumentationVersionRequest stageName(@javax.annotation.Nullable String stageName) {
    this.stageName = stageName;
    return this;
  }

  /**
   * The stage name to be associated with the new documentation snapshot.
   * @return stageName
   */
  @javax.annotation.Nullable
  public String getStageName() {
    return stageName;
  }

  public void setStageName(@javax.annotation.Nullable String stageName) {
    this.stageName = stageName;
  }


  public CreateDocumentationVersionRequest description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A description about the new documentation snapshot.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDocumentationVersionRequest createDocumentationVersionRequest = (CreateDocumentationVersionRequest) o;
    return Objects.equals(this.documentationVersion, createDocumentationVersionRequest.documentationVersion) &&
        Objects.equals(this.stageName, createDocumentationVersionRequest.stageName) &&
        Objects.equals(this.description, createDocumentationVersionRequest.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentationVersion, stageName, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDocumentationVersionRequest {\n");
    sb.append("    documentationVersion: ").append(toIndentedString(documentationVersion)).append("\n");
    sb.append("    stageName: ").append(toIndentedString(stageName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentationVersion");
    openapiFields.add("stageName");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentationVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDocumentationVersionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDocumentationVersionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDocumentationVersionRequest is not found in the empty JSON string", CreateDocumentationVersionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDocumentationVersionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDocumentationVersionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDocumentationVersionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("documentationVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentationVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentationVersion").toString()));
      }
      if ((jsonObj.get("stageName") != null && !jsonObj.get("stageName").isJsonNull()) && !jsonObj.get("stageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stageName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDocumentationVersionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDocumentationVersionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDocumentationVersionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDocumentationVersionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDocumentationVersionRequest>() {
           @Override
           public void write(JsonWriter out, CreateDocumentationVersionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDocumentationVersionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDocumentationVersionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDocumentationVersionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDocumentationVersionRequest
   */
  public static CreateDocumentationVersionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDocumentationVersionRequest.class);
  }

  /**
   * Convert an instance of CreateDocumentationVersionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

