/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApiStage;
import org.openapitools.client.model.CreateUsagePlanRequestQuota;
import org.openapitools.client.model.CreateUsagePlanRequestThrottle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUsagePlanRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateUsagePlanRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_API_STAGES = "apiStages";
  @SerializedName(SERIALIZED_NAME_API_STAGES)
  @javax.annotation.Nullable
  private List<ApiStage> apiStages = new ArrayList<>();

  public static final String SERIALIZED_NAME_THROTTLE = "throttle";
  @SerializedName(SERIALIZED_NAME_THROTTLE)
  @javax.annotation.Nullable
  private CreateUsagePlanRequestThrottle throttle;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  @javax.annotation.Nullable
  private CreateUsagePlanRequestQuota quota;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, String> tags = new HashMap<>();

  public CreateUsagePlanRequest() {
  }

  public CreateUsagePlanRequest name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the usage plan.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateUsagePlanRequest description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the usage plan.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateUsagePlanRequest apiStages(@javax.annotation.Nullable List<ApiStage> apiStages) {
    this.apiStages = apiStages;
    return this;
  }

  public CreateUsagePlanRequest addApiStagesItem(ApiStage apiStagesItem) {
    if (this.apiStages == null) {
      this.apiStages = new ArrayList<>();
    }
    this.apiStages.add(apiStagesItem);
    return this;
  }

  /**
   * The associated API stages of the usage plan.
   * @return apiStages
   */
  @javax.annotation.Nullable
  public List<ApiStage> getApiStages() {
    return apiStages;
  }

  public void setApiStages(@javax.annotation.Nullable List<ApiStage> apiStages) {
    this.apiStages = apiStages;
  }


  public CreateUsagePlanRequest throttle(@javax.annotation.Nullable CreateUsagePlanRequestThrottle throttle) {
    this.throttle = throttle;
    return this;
  }

  /**
   * Get throttle
   * @return throttle
   */
  @javax.annotation.Nullable
  public CreateUsagePlanRequestThrottle getThrottle() {
    return throttle;
  }

  public void setThrottle(@javax.annotation.Nullable CreateUsagePlanRequestThrottle throttle) {
    this.throttle = throttle;
  }


  public CreateUsagePlanRequest quota(@javax.annotation.Nullable CreateUsagePlanRequestQuota quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Get quota
   * @return quota
   */
  @javax.annotation.Nullable
  public CreateUsagePlanRequestQuota getQuota() {
    return quota;
  }

  public void setQuota(@javax.annotation.Nullable CreateUsagePlanRequestQuota quota) {
    this.quota = quota;
  }


  public CreateUsagePlanRequest tags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateUsagePlanRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The key-value map of strings. The valid character set is [a-zA-Z+-&#x3D;._:/]. The tag key can be up to 128 characters and must not start with &lt;code&gt;aws:&lt;/code&gt;. The tag value can be up to 256 characters.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUsagePlanRequest createUsagePlanRequest = (CreateUsagePlanRequest) o;
    return Objects.equals(this.name, createUsagePlanRequest.name) &&
        Objects.equals(this.description, createUsagePlanRequest.description) &&
        Objects.equals(this.apiStages, createUsagePlanRequest.apiStages) &&
        Objects.equals(this.throttle, createUsagePlanRequest.throttle) &&
        Objects.equals(this.quota, createUsagePlanRequest.quota) &&
        Objects.equals(this.tags, createUsagePlanRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, apiStages, throttle, quota, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUsagePlanRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    apiStages: ").append(toIndentedString(apiStages)).append("\n");
    sb.append("    throttle: ").append(toIndentedString(throttle)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("apiStages");
    openapiFields.add("throttle");
    openapiFields.add("quota");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUsagePlanRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUsagePlanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUsagePlanRequest is not found in the empty JSON string", CreateUsagePlanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUsagePlanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUsagePlanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUsagePlanRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("apiStages") != null && !jsonObj.get("apiStages").isJsonNull()) {
        JsonArray jsonArrayapiStages = jsonObj.getAsJsonArray("apiStages");
        if (jsonArrayapiStages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apiStages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apiStages` to be an array in the JSON string but got `%s`", jsonObj.get("apiStages").toString()));
          }

          // validate the optional field `apiStages` (array)
          for (int i = 0; i < jsonArrayapiStages.size(); i++) {
            ApiStage.validateJsonElement(jsonArrayapiStages.get(i));
          };
        }
      }
      // validate the optional field `throttle`
      if (jsonObj.get("throttle") != null && !jsonObj.get("throttle").isJsonNull()) {
        CreateUsagePlanRequestThrottle.validateJsonElement(jsonObj.get("throttle"));
      }
      // validate the optional field `quota`
      if (jsonObj.get("quota") != null && !jsonObj.get("quota").isJsonNull()) {
        CreateUsagePlanRequestQuota.validateJsonElement(jsonObj.get("quota"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUsagePlanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUsagePlanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUsagePlanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUsagePlanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUsagePlanRequest>() {
           @Override
           public void write(JsonWriter out, CreateUsagePlanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUsagePlanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUsagePlanRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUsagePlanRequest
   * @throws IOException if the JSON string is invalid with respect to CreateUsagePlanRequest
   */
  public static CreateUsagePlanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUsagePlanRequest.class);
  }

  /**
   * Convert an instance of CreateUsagePlanRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

