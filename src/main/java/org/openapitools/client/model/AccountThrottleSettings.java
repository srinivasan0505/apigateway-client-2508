/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountThrottleSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class AccountThrottleSettings {
  public static final String SERIALIZED_NAME_BURST_LIMIT = "burstLimit";
  @SerializedName(SERIALIZED_NAME_BURST_LIMIT)
  @javax.annotation.Nullable
  private Integer burstLimit;

  public static final String SERIALIZED_NAME_RATE_LIMIT = "rateLimit";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT)
  @javax.annotation.Nullable
  private Double rateLimit;

  public AccountThrottleSettings() {
  }

  public AccountThrottleSettings burstLimit(@javax.annotation.Nullable Integer burstLimit) {
    this.burstLimit = burstLimit;
    return this;
  }

  /**
   * Get burstLimit
   * @return burstLimit
   */
  @javax.annotation.Nullable
  public Integer getBurstLimit() {
    return burstLimit;
  }

  public void setBurstLimit(@javax.annotation.Nullable Integer burstLimit) {
    this.burstLimit = burstLimit;
  }


  public AccountThrottleSettings rateLimit(@javax.annotation.Nullable Double rateLimit) {
    this.rateLimit = rateLimit;
    return this;
  }

  /**
   * Get rateLimit
   * @return rateLimit
   */
  @javax.annotation.Nullable
  public Double getRateLimit() {
    return rateLimit;
  }

  public void setRateLimit(@javax.annotation.Nullable Double rateLimit) {
    this.rateLimit = rateLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountThrottleSettings accountThrottleSettings = (AccountThrottleSettings) o;
    return Objects.equals(this.burstLimit, accountThrottleSettings.burstLimit) &&
        Objects.equals(this.rateLimit, accountThrottleSettings.rateLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(burstLimit, rateLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountThrottleSettings {\n");
    sb.append("    burstLimit: ").append(toIndentedString(burstLimit)).append("\n");
    sb.append("    rateLimit: ").append(toIndentedString(rateLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("burstLimit");
    openapiFields.add("rateLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountThrottleSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountThrottleSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountThrottleSettings is not found in the empty JSON string", AccountThrottleSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountThrottleSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountThrottleSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `burstLimit`
      if (jsonObj.get("burstLimit") != null && !jsonObj.get("burstLimit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("burstLimit"));
      }
      // validate the optional field `rateLimit`
      if (jsonObj.get("rateLimit") != null && !jsonObj.get("rateLimit").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("rateLimit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountThrottleSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountThrottleSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountThrottleSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountThrottleSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountThrottleSettings>() {
           @Override
           public void write(JsonWriter out, AccountThrottleSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountThrottleSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountThrottleSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountThrottleSettings
   * @throws IOException if the JSON string is invalid with respect to AccountThrottleSettings
   */
  public static AccountThrottleSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountThrottleSettings.class);
  }

  /**
   * Convert an instance of AccountThrottleSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

