/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a summary of a Method resource, given a particular date and time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class MethodSnapshot {
  public static final String SERIALIZED_NAME_AUTHORIZATION_TYPE = "authorizationType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TYPE)
  @javax.annotation.Nullable
  private String authorizationType;

  public static final String SERIALIZED_NAME_API_KEY_REQUIRED = "apiKeyRequired";
  @SerializedName(SERIALIZED_NAME_API_KEY_REQUIRED)
  @javax.annotation.Nullable
  private Boolean apiKeyRequired;

  public MethodSnapshot() {
  }

  public MethodSnapshot authorizationType(@javax.annotation.Nullable String authorizationType) {
    this.authorizationType = authorizationType;
    return this;
  }

  /**
   * Get authorizationType
   * @return authorizationType
   */
  @javax.annotation.Nullable
  public String getAuthorizationType() {
    return authorizationType;
  }

  public void setAuthorizationType(@javax.annotation.Nullable String authorizationType) {
    this.authorizationType = authorizationType;
  }


  public MethodSnapshot apiKeyRequired(@javax.annotation.Nullable Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
    return this;
  }

  /**
   * Get apiKeyRequired
   * @return apiKeyRequired
   */
  @javax.annotation.Nullable
  public Boolean getApiKeyRequired() {
    return apiKeyRequired;
  }

  public void setApiKeyRequired(@javax.annotation.Nullable Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MethodSnapshot methodSnapshot = (MethodSnapshot) o;
    return Objects.equals(this.authorizationType, methodSnapshot.authorizationType) &&
        Objects.equals(this.apiKeyRequired, methodSnapshot.apiKeyRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationType, apiKeyRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MethodSnapshot {\n");
    sb.append("    authorizationType: ").append(toIndentedString(authorizationType)).append("\n");
    sb.append("    apiKeyRequired: ").append(toIndentedString(apiKeyRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationType");
    openapiFields.add("apiKeyRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MethodSnapshot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MethodSnapshot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MethodSnapshot is not found in the empty JSON string", MethodSnapshot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MethodSnapshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MethodSnapshot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authorizationType`
      if (jsonObj.get("authorizationType") != null && !jsonObj.get("authorizationType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("authorizationType"));
      }
      // validate the optional field `apiKeyRequired`
      if (jsonObj.get("apiKeyRequired") != null && !jsonObj.get("apiKeyRequired").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("apiKeyRequired"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MethodSnapshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MethodSnapshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MethodSnapshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MethodSnapshot.class));

       return (TypeAdapter<T>) new TypeAdapter<MethodSnapshot>() {
           @Override
           public void write(JsonWriter out, MethodSnapshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MethodSnapshot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MethodSnapshot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MethodSnapshot
   * @throws IOException if the JSON string is invalid with respect to MethodSnapshot
   */
  public static MethodSnapshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MethodSnapshot.class);
  }

  /**
   * Convert an instance of MethodSnapshot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

