/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateDomainNameRequestEndpointConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRestApiRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateRestApiRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_CLONE_FROM = "cloneFrom";
  @SerializedName(SERIALIZED_NAME_CLONE_FROM)
  @javax.annotation.Nullable
  private String cloneFrom;

  public static final String SERIALIZED_NAME_BINARY_MEDIA_TYPES = "binaryMediaTypes";
  @SerializedName(SERIALIZED_NAME_BINARY_MEDIA_TYPES)
  @javax.annotation.Nullable
  private List<String> binaryMediaTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMUM_COMPRESSION_SIZE = "minimumCompressionSize";
  @SerializedName(SERIALIZED_NAME_MINIMUM_COMPRESSION_SIZE)
  @javax.annotation.Nullable
  private Integer minimumCompressionSize;

  /**
   * The source of the API key for metering requests according to a usage plan. Valid values are: &amp;gt;&lt;code&gt;HEADER&lt;/code&gt; to read the API key from the &lt;code&gt;X-API-Key&lt;/code&gt; header of a request. &lt;code&gt;AUTHORIZER&lt;/code&gt; to read the API key from the &lt;code&gt;UsageIdentifierKey&lt;/code&gt; from a custom authorizer.
   */
  @JsonAdapter(ApiKeySourceEnum.Adapter.class)
  public enum ApiKeySourceEnum {
    HEADER("HEADER"),
    
    AUTHORIZER("AUTHORIZER");

    private String value;

    ApiKeySourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiKeySourceEnum fromValue(String value) {
      for (ApiKeySourceEnum b : ApiKeySourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiKeySourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiKeySourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiKeySourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiKeySourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiKeySourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_KEY_SOURCE = "apiKeySource";
  @SerializedName(SERIALIZED_NAME_API_KEY_SOURCE)
  @javax.annotation.Nullable
  private ApiKeySourceEnum apiKeySource;

  public static final String SERIALIZED_NAME_ENDPOINT_CONFIGURATION = "endpointConfiguration";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_CONFIGURATION)
  @javax.annotation.Nullable
  private CreateDomainNameRequestEndpointConfiguration endpointConfiguration;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  @javax.annotation.Nullable
  private String policy;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_DISABLE_EXECUTE_API_ENDPOINT = "disableExecuteApiEndpoint";
  @SerializedName(SERIALIZED_NAME_DISABLE_EXECUTE_API_ENDPOINT)
  @javax.annotation.Nullable
  private Boolean disableExecuteApiEndpoint;

  public CreateRestApiRequest() {
  }

  public CreateRestApiRequest name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the RestApi.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateRestApiRequest description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the RestApi.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateRestApiRequest version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * A version identifier for the API.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public CreateRestApiRequest cloneFrom(@javax.annotation.Nullable String cloneFrom) {
    this.cloneFrom = cloneFrom;
    return this;
  }

  /**
   * The ID of the RestApi that you want to clone from.
   * @return cloneFrom
   */
  @javax.annotation.Nullable
  public String getCloneFrom() {
    return cloneFrom;
  }

  public void setCloneFrom(@javax.annotation.Nullable String cloneFrom) {
    this.cloneFrom = cloneFrom;
  }


  public CreateRestApiRequest binaryMediaTypes(@javax.annotation.Nullable List<String> binaryMediaTypes) {
    this.binaryMediaTypes = binaryMediaTypes;
    return this;
  }

  public CreateRestApiRequest addBinaryMediaTypesItem(String binaryMediaTypesItem) {
    if (this.binaryMediaTypes == null) {
      this.binaryMediaTypes = new ArrayList<>();
    }
    this.binaryMediaTypes.add(binaryMediaTypesItem);
    return this;
  }

  /**
   * The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
   * @return binaryMediaTypes
   */
  @javax.annotation.Nullable
  public List<String> getBinaryMediaTypes() {
    return binaryMediaTypes;
  }

  public void setBinaryMediaTypes(@javax.annotation.Nullable List<String> binaryMediaTypes) {
    this.binaryMediaTypes = binaryMediaTypes;
  }


  public CreateRestApiRequest minimumCompressionSize(@javax.annotation.Nullable Integer minimumCompressionSize) {
    this.minimumCompressionSize = minimumCompressionSize;
    return this;
  }

  /**
   * A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
   * @return minimumCompressionSize
   */
  @javax.annotation.Nullable
  public Integer getMinimumCompressionSize() {
    return minimumCompressionSize;
  }

  public void setMinimumCompressionSize(@javax.annotation.Nullable Integer minimumCompressionSize) {
    this.minimumCompressionSize = minimumCompressionSize;
  }


  public CreateRestApiRequest apiKeySource(@javax.annotation.Nullable ApiKeySourceEnum apiKeySource) {
    this.apiKeySource = apiKeySource;
    return this;
  }

  /**
   * The source of the API key for metering requests according to a usage plan. Valid values are: &amp;gt;&lt;code&gt;HEADER&lt;/code&gt; to read the API key from the &lt;code&gt;X-API-Key&lt;/code&gt; header of a request. &lt;code&gt;AUTHORIZER&lt;/code&gt; to read the API key from the &lt;code&gt;UsageIdentifierKey&lt;/code&gt; from a custom authorizer.
   * @return apiKeySource
   */
  @javax.annotation.Nullable
  public ApiKeySourceEnum getApiKeySource() {
    return apiKeySource;
  }

  public void setApiKeySource(@javax.annotation.Nullable ApiKeySourceEnum apiKeySource) {
    this.apiKeySource = apiKeySource;
  }


  public CreateRestApiRequest endpointConfiguration(@javax.annotation.Nullable CreateDomainNameRequestEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
    return this;
  }

  /**
   * Get endpointConfiguration
   * @return endpointConfiguration
   */
  @javax.annotation.Nullable
  public CreateDomainNameRequestEndpointConfiguration getEndpointConfiguration() {
    return endpointConfiguration;
  }

  public void setEndpointConfiguration(@javax.annotation.Nullable CreateDomainNameRequestEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
  }


  public CreateRestApiRequest policy(@javax.annotation.Nullable String policy) {
    this.policy = policy;
    return this;
  }

  /**
   * A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.
   * @return policy
   */
  @javax.annotation.Nullable
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(@javax.annotation.Nullable String policy) {
    this.policy = policy;
  }


  public CreateRestApiRequest tags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateRestApiRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The key-value map of strings. The valid character set is [a-zA-Z+-&#x3D;._:/]. The tag key can be up to 128 characters and must not start with &lt;code&gt;aws:&lt;/code&gt;. The tag value can be up to 256 characters.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateRestApiRequest disableExecuteApiEndpoint(@javax.annotation.Nullable Boolean disableExecuteApiEndpoint) {
    this.disableExecuteApiEndpoint = disableExecuteApiEndpoint;
    return this;
  }

  /**
   * Specifies whether clients can invoke your API by using the default &lt;code&gt;execute-api&lt;/code&gt; endpoint. By default, clients can invoke your API with the default &lt;code&gt;https://{api_id}.execute-api.{region}.amazonaws.com&lt;/code&gt; endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint
   * @return disableExecuteApiEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getDisableExecuteApiEndpoint() {
    return disableExecuteApiEndpoint;
  }

  public void setDisableExecuteApiEndpoint(@javax.annotation.Nullable Boolean disableExecuteApiEndpoint) {
    this.disableExecuteApiEndpoint = disableExecuteApiEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRestApiRequest createRestApiRequest = (CreateRestApiRequest) o;
    return Objects.equals(this.name, createRestApiRequest.name) &&
        Objects.equals(this.description, createRestApiRequest.description) &&
        Objects.equals(this.version, createRestApiRequest.version) &&
        Objects.equals(this.cloneFrom, createRestApiRequest.cloneFrom) &&
        Objects.equals(this.binaryMediaTypes, createRestApiRequest.binaryMediaTypes) &&
        Objects.equals(this.minimumCompressionSize, createRestApiRequest.minimumCompressionSize) &&
        Objects.equals(this.apiKeySource, createRestApiRequest.apiKeySource) &&
        Objects.equals(this.endpointConfiguration, createRestApiRequest.endpointConfiguration) &&
        Objects.equals(this.policy, createRestApiRequest.policy) &&
        Objects.equals(this.tags, createRestApiRequest.tags) &&
        Objects.equals(this.disableExecuteApiEndpoint, createRestApiRequest.disableExecuteApiEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, version, cloneFrom, binaryMediaTypes, minimumCompressionSize, apiKeySource, endpointConfiguration, policy, tags, disableExecuteApiEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRestApiRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    cloneFrom: ").append(toIndentedString(cloneFrom)).append("\n");
    sb.append("    binaryMediaTypes: ").append(toIndentedString(binaryMediaTypes)).append("\n");
    sb.append("    minimumCompressionSize: ").append(toIndentedString(minimumCompressionSize)).append("\n");
    sb.append("    apiKeySource: ").append(toIndentedString(apiKeySource)).append("\n");
    sb.append("    endpointConfiguration: ").append(toIndentedString(endpointConfiguration)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    disableExecuteApiEndpoint: ").append(toIndentedString(disableExecuteApiEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("version");
    openapiFields.add("cloneFrom");
    openapiFields.add("binaryMediaTypes");
    openapiFields.add("minimumCompressionSize");
    openapiFields.add("apiKeySource");
    openapiFields.add("endpointConfiguration");
    openapiFields.add("policy");
    openapiFields.add("tags");
    openapiFields.add("disableExecuteApiEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRestApiRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRestApiRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRestApiRequest is not found in the empty JSON string", CreateRestApiRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRestApiRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRestApiRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRestApiRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("cloneFrom") != null && !jsonObj.get("cloneFrom").isJsonNull()) && !jsonObj.get("cloneFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloneFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloneFrom").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("binaryMediaTypes") != null && !jsonObj.get("binaryMediaTypes").isJsonNull() && !jsonObj.get("binaryMediaTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `binaryMediaTypes` to be an array in the JSON string but got `%s`", jsonObj.get("binaryMediaTypes").toString()));
      }
      if ((jsonObj.get("apiKeySource") != null && !jsonObj.get("apiKeySource").isJsonNull()) && !jsonObj.get("apiKeySource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKeySource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKeySource").toString()));
      }
      // validate the optional field `apiKeySource`
      if (jsonObj.get("apiKeySource") != null && !jsonObj.get("apiKeySource").isJsonNull()) {
        ApiKeySourceEnum.validateJsonElement(jsonObj.get("apiKeySource"));
      }
      // validate the optional field `endpointConfiguration`
      if (jsonObj.get("endpointConfiguration") != null && !jsonObj.get("endpointConfiguration").isJsonNull()) {
        CreateDomainNameRequestEndpointConfiguration.validateJsonElement(jsonObj.get("endpointConfiguration"));
      }
      if ((jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) && !jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRestApiRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRestApiRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRestApiRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRestApiRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRestApiRequest>() {
           @Override
           public void write(JsonWriter out, CreateRestApiRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRestApiRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRestApiRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRestApiRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRestApiRequest
   */
  public static CreateRestApiRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRestApiRequest.class);
  }

  /**
   * Convert an instance of CreateRestApiRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

