/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the response of the test invoke request in the HTTP method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:10:54.869209+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class TestInvokeMethodResponse {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private Integer status;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nullable
  private String body;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  @javax.annotation.Nullable
  private Map headers;

  public static final String SERIALIZED_NAME_MULTI_VALUE_HEADERS = "multiValueHeaders";
  @SerializedName(SERIALIZED_NAME_MULTI_VALUE_HEADERS)
  @javax.annotation.Nullable
  private Map multiValueHeaders;

  public static final String SERIALIZED_NAME_LOG = "log";
  @SerializedName(SERIALIZED_NAME_LOG)
  @javax.annotation.Nullable
  private String log;

  public static final String SERIALIZED_NAME_LATENCY = "latency";
  @SerializedName(SERIALIZED_NAME_LATENCY)
  @javax.annotation.Nullable
  private Integer latency;

  public TestInvokeMethodResponse() {
  }

  public TestInvokeMethodResponse status(@javax.annotation.Nullable Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable Integer status) {
    this.status = status;
  }


  public TestInvokeMethodResponse body(@javax.annotation.Nullable String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nullable String body) {
    this.body = body;
  }


  public TestInvokeMethodResponse headers(@javax.annotation.Nullable Map headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public Map getHeaders() {
    return headers;
  }

  public void setHeaders(@javax.annotation.Nullable Map headers) {
    this.headers = headers;
  }


  public TestInvokeMethodResponse multiValueHeaders(@javax.annotation.Nullable Map multiValueHeaders) {
    this.multiValueHeaders = multiValueHeaders;
    return this;
  }

  /**
   * Get multiValueHeaders
   * @return multiValueHeaders
   */
  @javax.annotation.Nullable
  public Map getMultiValueHeaders() {
    return multiValueHeaders;
  }

  public void setMultiValueHeaders(@javax.annotation.Nullable Map multiValueHeaders) {
    this.multiValueHeaders = multiValueHeaders;
  }


  public TestInvokeMethodResponse log(@javax.annotation.Nullable String log) {
    this.log = log;
    return this;
  }

  /**
   * Get log
   * @return log
   */
  @javax.annotation.Nullable
  public String getLog() {
    return log;
  }

  public void setLog(@javax.annotation.Nullable String log) {
    this.log = log;
  }


  public TestInvokeMethodResponse latency(@javax.annotation.Nullable Integer latency) {
    this.latency = latency;
    return this;
  }

  /**
   * Get latency
   * @return latency
   */
  @javax.annotation.Nullable
  public Integer getLatency() {
    return latency;
  }

  public void setLatency(@javax.annotation.Nullable Integer latency) {
    this.latency = latency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestInvokeMethodResponse testInvokeMethodResponse = (TestInvokeMethodResponse) o;
    return Objects.equals(this.status, testInvokeMethodResponse.status) &&
        Objects.equals(this.body, testInvokeMethodResponse.body) &&
        Objects.equals(this.headers, testInvokeMethodResponse.headers) &&
        Objects.equals(this.multiValueHeaders, testInvokeMethodResponse.multiValueHeaders) &&
        Objects.equals(this.log, testInvokeMethodResponse.log) &&
        Objects.equals(this.latency, testInvokeMethodResponse.latency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, body, headers, multiValueHeaders, log, latency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestInvokeMethodResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    multiValueHeaders: ").append(toIndentedString(multiValueHeaders)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    latency: ").append(toIndentedString(latency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("body");
    openapiFields.add("headers");
    openapiFields.add("multiValueHeaders");
    openapiFields.add("log");
    openapiFields.add("latency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestInvokeMethodResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestInvokeMethodResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestInvokeMethodResponse is not found in the empty JSON string", TestInvokeMethodResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestInvokeMethodResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestInvokeMethodResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `body`
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("body"));
      }
      // validate the optional field `headers`
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("headers"));
      }
      // validate the optional field `multiValueHeaders`
      if (jsonObj.get("multiValueHeaders") != null && !jsonObj.get("multiValueHeaders").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("multiValueHeaders"));
      }
      // validate the optional field `log`
      if (jsonObj.get("log") != null && !jsonObj.get("log").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("log"));
      }
      // validate the optional field `latency`
      if (jsonObj.get("latency") != null && !jsonObj.get("latency").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("latency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestInvokeMethodResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestInvokeMethodResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestInvokeMethodResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestInvokeMethodResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TestInvokeMethodResponse>() {
           @Override
           public void write(JsonWriter out, TestInvokeMethodResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestInvokeMethodResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestInvokeMethodResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestInvokeMethodResponse
   * @throws IOException if the JSON string is invalid with respect to TestInvokeMethodResponse
   */
  public static TestInvokeMethodResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestInvokeMethodResponse.class);
  }

  /**
   * Convert an instance of TestInvokeMethodResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

