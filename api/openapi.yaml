openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps\
    \ developers deliver robust, secure, and scalable mobile and web application back\
    \ ends. API Gateway allows developers to securely connect mobile and web applications\
    \ to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web\
    \ services that are hosted outside of AWS.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon API Gateway
  version: 2015-07-09
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: apigateway
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigateway-2015-07-09.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/apigateway/
servers:
- description: The Amazon API Gateway multi-region endpoint
  url: "http://apigateway.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon API Gateway multi-region endpoint
  url: "https://apigateway.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon API Gateway endpoint for China (Beijing) and China (Ningxia)
  url: "http://apigateway.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon API Gateway endpoint for China (Beijing) and China (Ningxia)
  url: "https://apigateway.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /apikeys:
    get:
      description: Gets information about the current ApiKeys resource.
      operationId: GetApiKeys
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: The name of queried API keys.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: "The identifier of a customer in AWS Marketplace or an external\
          \ system, such as a developer portal."
        explode: true
        in: query
        name: customerId
        required: false
        schema:
          type: string
        style: form
      - description: A boolean flag to specify whether (<code>true</code>) or not
          (<code>false</code>) the result contains key values.
        explode: true
        in: query
        name: includeValues
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeys'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: 'Create an ApiKey resource. '
      operationId: CreateApiKey
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKey_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/authorizers:
    get:
      description: Describe an existing Authorizers resource.
      operationId: GetAuthorizers
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizers'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Adds a new Authorizer resource to an existing RestApi resource.
      operationId: CreateAuthorizer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthorizer_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizer'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /domainnames/{domain_name}/basepathmappings:
    get:
      description: Represents a collection of BasePathMapping resources.
      operationId: GetBasePathMappings
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name of a BasePathMapping resource.
        explode: false
        in: path
        name: domain_name
        required: true
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasePathMappings'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Creates a new BasePathMapping resource.
      operationId: CreateBasePathMapping
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name of the BasePathMapping resource to create.
        explode: false
        in: path
        name: domain_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasePathMapping_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasePathMapping'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/deployments:
    get:
      description: Gets information about a Deployments collection.
      operationId: GetDeployments
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployments'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-accepts:
      - application/json
    post:
      description: "Creates a Deployment resource, which makes a specified RestApi\
        \ callable over the internet."
      operationId: CreateDeployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeployment_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/documentation/parts:
    get:
      description: Gets documentation parts.
      operationId: GetDocumentationParts
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: 'The type of API entities of the to-be-retrieved documentation
          parts. '
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - API
          - AUTHORIZER
          - MODEL
          - RESOURCE
          - METHOD
          - PATH_PARAMETER
          - QUERY_PARAMETER
          - REQUEST_HEADER
          - REQUEST_BODY
          - RESPONSE
          - RESPONSE_HEADER
          - RESPONSE_BODY
          type: string
        style: form
      - description: The name of API entities of the to-be-retrieved documentation
          parts.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: The path of API entities of the to-be-retrieved documentation
          parts.
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: The status of the API documentation parts to retrieve. Valid
          values are <code>DOCUMENTED</code> for retrieving DocumentationPart resources
          with content and <code>UNDOCUMENTED</code> for DocumentationPart resources
          without content.
        explode: true
        in: query
        name: locationStatus
        required: false
        schema:
          enum:
          - DOCUMENTED
          - UNDOCUMENTED
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationParts'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Creates a documentation part.
      operationId: CreateDocumentationPart
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentationPart_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationPart'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Imports documentation parts
      operationId: ImportDocumentationParts
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: A query parameter to indicate whether to overwrite (<code>OVERWRITE</code>)
          any existing DocumentationParts definition or to merge (<code>MERGE</code>)
          the new definition into the existing one. The default value is <code>MERGE</code>.
        explode: true
        in: query
        name: mode
        required: false
        schema:
          enum:
          - merge
          - overwrite
          type: string
        style: form
      - description: A query parameter to specify whether to rollback the documentation
          importation (<code>true</code>) or not (<code>false</code>) when a warning
          is encountered. The default value is <code>false</code>.
        explode: true
        in: query
        name: failonwarnings
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportDocumentationParts_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationPartIds'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/documentation/versions:
    get:
      description: Gets documentation versions.
      operationId: GetDocumentationVersions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationVersions'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Creates a documentation version
      operationId: CreateDocumentationVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentationVersion_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationVersion'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /domainnames:
    get:
      description: Represents a collection of DomainName resources.
      operationId: GetDomainNames
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainNames'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Creates a new domain name.
      operationId: CreateDomainName
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDomainName_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainName'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/models:
    get:
      description: Describes existing Models defined for a RestApi resource.
      operationId: GetModels
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Adds a new Model resource to an existing RestApi resource.
      operationId: CreateModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The RestApi identifier under which the Model will be created.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModel_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/requestvalidators:
    get:
      description: Gets the RequestValidators collection of a given RestApi.
      operationId: GetRequestValidators
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidators'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Creates a RequestValidator of a given RestApi.
      operationId: CreateRequestValidator
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestValidator_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidator'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/resources/{parent_id}:
    post:
      description: Creates a Resource resource.
      operationId: CreateResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The parent resource's identifier.
        explode: false
        in: path
        name: parent_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResource_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis:
    get:
      description: Lists the RestApis resources for your collection.
      operationId: GetRestApis
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApis'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Creates a new RestApi resource.
      operationId: CreateRestApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRestApi_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/stages:
    get:
      description: Gets information about one or more Stage resources.
      operationId: GetStages
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The stages' deployment identifiers.
        explode: true
        in: query
        name: deploymentId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stages'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: 'Creates a new Stage resource that references a pre-existing Deployment
        for the API. '
      operationId: CreateStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStage_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /usageplans:
    get:
      description: Gets all the usage plans of the caller's account.
      operationId: GetUsagePlans
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The identifier of the API key associated with the usage plans.
        explode: true
        in: query
        name: keyId
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlans'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: "Creates a usage plan with the throttle and quota limits, as well\
        \ as the associated API stages, specified in the payload. "
      operationId: CreateUsagePlan
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsagePlan_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlan'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /usageplans/{usageplanId}/keys:
    get:
      description: Gets all the usage plan keys representing the API keys added to
        a specified usage plan.
      operationId: GetUsagePlanKeys
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Id of the UsagePlan resource representing the usage plan
          containing the to-be-retrieved UsagePlanKey resource representing a plan
          customer.
        explode: false
        in: path
        name: usageplanId
        required: true
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: A query parameter specifying the name of the to-be-returned usage
          plan keys.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlanKeys'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Creates a usage plan key for adding an existing API key to a usage
        plan.
      operationId: CreateUsagePlanKey
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Id of the UsagePlan resource representing the usage plan
          containing the to-be-created UsagePlanKey resource representing a plan customer.
        explode: false
        in: path
        name: usageplanId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsagePlanKey_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlanKey'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /vpclinks:
    get:
      description: Gets the VpcLinks collection under the caller's account in a selected
        region.
      operationId: GetVpcLinks
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpcLinks'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: "Creates a VPC link, under the caller's account in a selected region,\
        \ in an asynchronous operation that typically takes 2-4 minutes to complete\
        \ and become operational. The caller must have permissions to create and update\
        \ VPC Endpoint services."
      operationId: CreateVpcLink
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVpcLink_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpcLink'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /apikeys/{api_Key}:
    delete:
      description: Deletes the ApiKey resource.
      operationId: DeleteApiKey
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the ApiKey resource to be deleted.
        explode: false
        in: path
        name: api_Key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets information about the current ApiKey resource.
      operationId: GetApiKey
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the ApiKey resource.
        explode: false
        in: path
        name: api_Key
        required: true
        schema:
          type: string
        style: simple
      - description: A boolean flag to specify whether (<code>true</code>) or not
          (<code>false</code>) the result contains the key value.
        explode: true
        in: query
        name: includeValue
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Changes information about an ApiKey resource.
      operationId: UpdateApiKey
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the ApiKey resource to be updated.
        explode: false
        in: path
        name: api_Key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/authorizers/{authorizer_id}:
    delete:
      description: Deletes an existing Authorizer resource.
      operationId: DeleteAuthorizer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the Authorizer resource.
        explode: false
        in: path
        name: authorizer_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Describe an existing Authorizer resource.
      operationId: GetAuthorizer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the Authorizer resource.
        explode: false
        in: path
        name: authorizer_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizer'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates an existing Authorizer resource.
      operationId: UpdateAuthorizer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the Authorizer resource.
        explode: false
        in: path
        name: authorizer_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizer'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
    post:
      description: "Simulate the execution of an Authorizer in your RestApi with headers,\
        \ parameters, and an incoming request body."
      operationId: TestInvokeAuthorizer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a test invoke authorizer request's Authorizer ID.
        explode: false
        in: path
        name: authorizer_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestInvokeAuthorizer_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestInvokeAuthorizerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /domainnames/{domain_name}/basepathmappings/{base_path}:
    delete:
      description: Deletes the BasePathMapping resource.
      operationId: DeleteBasePathMapping
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name of the BasePathMapping resource to delete.
        explode: false
        in: path
        name: domain_name
        required: true
        schema:
          type: string
        style: simple
      - description: "<p>The base path name of the BasePathMapping resource to delete.</p>\
          \ <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>"
        explode: false
        in: path
        name: base_path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Describe a BasePathMapping resource.
      operationId: GetBasePathMapping
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name of the BasePathMapping resource to be described.
        explode: false
        in: path
        name: domain_name
        required: true
        schema:
          type: string
        style: simple
      - description: The base path name that callers of the API must provide as part
          of the URL after the domain name. This value must be unique for all of the
          mappings across a single API. Specify '(none)' if you do not want callers
          to specify any base path name after the domain name.
        explode: false
        in: path
        name: base_path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasePathMapping'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Changes information about the BasePathMapping resource.
      operationId: UpdateBasePathMapping
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The domain name of the BasePathMapping resource to change.
        explode: false
        in: path
        name: domain_name
        required: true
        schema:
          type: string
        style: simple
      - description: "<p>The base path of the BasePathMapping resource to change.</p>\
          \ <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>"
        explode: false
        in: path
        name: base_path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasePathMapping'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /clientcertificates/{clientcertificate_id}:
    delete:
      description: Deletes the ClientCertificate resource.
      operationId: DeleteClientCertificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the ClientCertificate resource to be deleted.
        explode: false
        in: path
        name: clientcertificate_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets information about the current ClientCertificate resource.
      operationId: GetClientCertificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the ClientCertificate resource to be described.
        explode: false
        in: path
        name: clientcertificate_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificate'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Changes information about an ClientCertificate resource.
      operationId: UpdateClientCertificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the ClientCertificate resource to be updated.
        explode: false
        in: path
        name: clientcertificate_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificate'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/deployments/{deployment_id}:
    delete:
      description: Deletes a Deployment resource. Deleting a deployment will only
        succeed if there are no Stage resources associated with it.
      operationId: DeleteDeployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the Deployment resource to delete.
        explode: false
        in: path
        name: deployment_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets information about a Deployment resource.
      operationId: GetDeployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the Deployment resource to get information
          about.
        explode: false
        in: path
        name: deployment_id
        required: true
        schema:
          type: string
        style: simple
      - description: "A query parameter to retrieve the specified embedded resources\
          \ of the returned Deployment resource in the response. In a REST API call,\
          \ this <code>embed</code> parameter value is a list of comma-separated strings,\
          \ as in <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2</code>.\
          \ The SDK and other platform-dependent libraries might use a different format\
          \ for the list. Currently, this request supports only retrieval of the embedded\
          \ API summary this way. Hence, the parameter value must be a single-valued\
          \ list containing only the <code>\"apisummary\"</code> string. For example,\
          \ <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary</code>."
        explode: true
        in: query
        name: embed
        required: false
        schema:
          items:
            $ref: '#/components/schemas/String'
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-accepts:
      - application/json
    patch:
      description: Changes information about a Deployment resource.
      operationId: UpdateDeployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The replacement identifier for the Deployment resource to change
          information about.
        explode: false
        in: path
        name: deployment_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/documentation/parts/{part_id}:
    delete:
      description: Deletes a documentation part
      operationId: DeleteDocumentationPart
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the to-be-deleted documentation part.
        explode: false
        in: path
        name: part_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a documentation part.
      operationId: GetDocumentationPart
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: part_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationPart'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a documentation part.
      operationId: UpdateDocumentationPart
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the to-be-updated documentation part.
        explode: false
        in: path
        name: part_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationPart'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/documentation/versions/{doc_version}:
    delete:
      description: Deletes a documentation version.
      operationId: DeleteDocumentationVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The version identifier of a to-be-deleted documentation snapshot.
        explode: false
        in: path
        name: doc_version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a documentation version.
      operationId: GetDocumentationVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The version identifier of the to-be-retrieved documentation snapshot.
        explode: false
        in: path
        name: doc_version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationVersion'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a documentation version.
      operationId: UpdateDocumentationVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi..
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The version identifier of the to-be-updated documentation version.
        explode: false
        in: path
        name: doc_version
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationVersion'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /domainnames/{domain_name}:
    delete:
      description: Deletes the DomainName resource.
      operationId: DeleteDomainName
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the DomainName resource to be deleted.
        explode: false
        in: path
        name: domain_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: "Represents a domain name that is contained in a simpler, more\
        \ intuitive URL that can be called."
      operationId: GetDomainName
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the DomainName resource.
        explode: false
        in: path
        name: domain_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainName'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Changes information about the DomainName resource.
      operationId: UpdateDomainName
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the DomainName resource to be changed.
        explode: false
        in: path
        name: domain_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainName'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/gatewayresponses/{response_type}:
    delete:
      description: Clears any customization of a GatewayResponse of a specified response
        type on the given RestApi and resets it with the default settings.
      operationId: DeleteGatewayResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The response type of the associated GatewayResponse.
        explode: false
        in: path
        name: response_type
        required: true
        schema:
          enum:
          - DEFAULT_4XX
          - DEFAULT_5XX
          - RESOURCE_NOT_FOUND
          - UNAUTHORIZED
          - INVALID_API_KEY
          - ACCESS_DENIED
          - AUTHORIZER_FAILURE
          - AUTHORIZER_CONFIGURATION_ERROR
          - INVALID_SIGNATURE
          - EXPIRED_TOKEN
          - MISSING_AUTHENTICATION_TOKEN
          - INTEGRATION_FAILURE
          - INTEGRATION_TIMEOUT
          - API_CONFIGURATION_ERROR
          - UNSUPPORTED_MEDIA_TYPE
          - BAD_REQUEST_PARAMETERS
          - BAD_REQUEST_BODY
          - REQUEST_TOO_LARGE
          - THROTTLED
          - QUOTA_EXCEEDED
          - WAF_FILTERED
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a GatewayResponse of a specified response type on the given
        RestApi.
      operationId: GetGatewayResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The response type of the associated GatewayResponse.
        explode: false
        in: path
        name: response_type
        required: true
        schema:
          enum:
          - DEFAULT_4XX
          - DEFAULT_5XX
          - RESOURCE_NOT_FOUND
          - UNAUTHORIZED
          - INVALID_API_KEY
          - ACCESS_DENIED
          - AUTHORIZER_FAILURE
          - AUTHORIZER_CONFIGURATION_ERROR
          - INVALID_SIGNATURE
          - EXPIRED_TOKEN
          - MISSING_AUTHENTICATION_TOKEN
          - INTEGRATION_FAILURE
          - INTEGRATION_TIMEOUT
          - API_CONFIGURATION_ERROR
          - UNSUPPORTED_MEDIA_TYPE
          - BAD_REQUEST_PARAMETERS
          - BAD_REQUEST_BODY
          - REQUEST_TOO_LARGE
          - THROTTLED
          - QUOTA_EXCEEDED
          - WAF_FILTERED
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a GatewayResponse of a specified response type on the given
        RestApi.
      operationId: UpdateGatewayResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The response type of the associated GatewayResponse.
        explode: false
        in: path
        name: response_type
        required: true
        schema:
          enum:
          - DEFAULT_4XX
          - DEFAULT_5XX
          - RESOURCE_NOT_FOUND
          - UNAUTHORIZED
          - INVALID_API_KEY
          - ACCESS_DENIED
          - AUTHORIZER_FAILURE
          - AUTHORIZER_CONFIGURATION_ERROR
          - INVALID_SIGNATURE
          - EXPIRED_TOKEN
          - MISSING_AUTHENTICATION_TOKEN
          - INTEGRATION_FAILURE
          - INTEGRATION_TIMEOUT
          - API_CONFIGURATION_ERROR
          - UNSUPPORTED_MEDIA_TYPE
          - BAD_REQUEST_PARAMETERS
          - BAD_REQUEST_BODY
          - REQUEST_TOO_LARGE
          - THROTTLED
          - QUOTA_EXCEEDED
          - WAF_FILTERED
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Creates a customization of a GatewayResponse of a specified response
        type and status code on the given RestApi.
      operationId: PutGatewayResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The response type of the associated GatewayResponse
        explode: false
        in: path
        name: response_type
        required: true
        schema:
          enum:
          - DEFAULT_4XX
          - DEFAULT_5XX
          - RESOURCE_NOT_FOUND
          - UNAUTHORIZED
          - INVALID_API_KEY
          - ACCESS_DENIED
          - AUTHORIZER_FAILURE
          - AUTHORIZER_CONFIGURATION_ERROR
          - INVALID_SIGNATURE
          - EXPIRED_TOKEN
          - MISSING_AUTHENTICATION_TOKEN
          - INTEGRATION_FAILURE
          - INTEGRATION_TIMEOUT
          - API_CONFIGURATION_ERROR
          - UNSUPPORTED_MEDIA_TYPE
          - BAD_REQUEST_PARAMETERS
          - BAD_REQUEST_BODY
          - REQUEST_TOO_LARGE
          - THROTTLED
          - QUOTA_EXCEEDED
          - WAF_FILTERED
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutGatewayResponse_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration:
    delete:
      description: Represents a delete integration.
      operationId: DeleteIntegration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a delete integration request's resource identifier.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a delete integration request's HTTP method.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Get the integration settings.
      operationId: GetIntegration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a get integration request's resource identifier
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a get integration request's HTTP method.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Represents an update integration.
      operationId: UpdateIntegration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Represents an update integration request's resource identifier.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Represents an update integration request's HTTP method.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Sets up a method's integration.
      operationId: PutIntegration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a put integration request's resource ID.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies the HTTP method for the integration.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegration_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}:
    delete:
      description: Represents a delete integration response.
      operationId: DeleteIntegrationResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a delete integration response request's resource identifier.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a delete integration response request's HTTP method.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a delete integration response request's status code.
        explode: false
        in: path
        name: status_code
        required: true
        schema:
          description: The status code.
          pattern: "[1-5]\\d\\d"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Represents a get integration response.
      operationId: GetIntegrationResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a get integration response request's resource identifier.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a get integration response request's HTTP method.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a get integration response request's status code.
        explode: false
        in: path
        name: status_code
        required: true
        schema:
          description: The status code.
          pattern: "[1-5]\\d\\d"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Represents an update integration response.
      operationId: UpdateIntegrationResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies an update integration response request's resource identifier.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies an update integration response request's HTTP method.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies an update integration response request's status code.
        explode: false
        in: path
        name: status_code
        required: true
        schema:
          description: The status code.
          pattern: "[1-5]\\d\\d"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Represents a put integration.
      operationId: PutIntegrationResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a put integration response request's resource identifier.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a put integration response request's HTTP method.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies the status code that is used to map the integration
          response to an existing MethodResponse.
        explode: false
        in: path
        name: status_code
        required: true
        schema:
          description: The status code.
          pattern: "[1-5]\\d\\d"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntegrationResponse_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}:
    delete:
      description: Deletes an existing Method resource.
      operationId: DeleteMethod
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The Resource identifier for the Method resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: The HTTP verb of the Method resource.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-accepts:
      - application/json
    get:
      description: Describe an existing Method resource.
      operationId: GetMethod
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The Resource identifier for the Method resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies the method request's HTTP method type.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates an existing Method resource.
      operationId: UpdateMethod
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The Resource identifier for the Method resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: The HTTP verb of the Method resource.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
    post:
      description: "Simulate the invocation of a Method in your RestApi with headers,\
        \ parameters, and an incoming request body."
      operationId: TestInvokeMethod
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a test invoke method request's resource ID.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies a test invoke method request's HTTP method.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestInvokeMethod_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestInvokeMethodResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Add a method to an existing Resource resource.
      operationId: PutMethod
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The Resource identifier for the new Method resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: Specifies the method request's HTTP method type.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMethod_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}:
    delete:
      description: Deletes an existing MethodResponse resource.
      operationId: DeleteMethodResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The Resource identifier for the MethodResponse resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: The HTTP verb of the Method resource.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      - description: The status code identifier for the MethodResponse resource.
        explode: false
        in: path
        name: status_code
        required: true
        schema:
          description: The status code.
          pattern: "[1-5]\\d\\d"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-accepts:
      - application/json
    get:
      description: Describes a MethodResponse resource.
      operationId: GetMethodResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The Resource identifier for the MethodResponse resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: The HTTP verb of the Method resource.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      - description: The status code for the MethodResponse resource.
        explode: false
        in: path
        name: status_code
        required: true
        schema:
          description: The status code.
          pattern: "[1-5]\\d\\d"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates an existing MethodResponse resource.
      operationId: UpdateMethodResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The Resource identifier for the MethodResponse resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: The HTTP verb of the Method resource.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      - description: The status code for the MethodResponse resource.
        explode: false
        in: path
        name: status_code
        required: true
        schema:
          description: The status code.
          pattern: "[1-5]\\d\\d"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Adds a MethodResponse to an existing Method resource.
      operationId: PutMethodResponse
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The Resource identifier for the Method resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: The HTTP verb of the Method resource.
        explode: false
        in: path
        name: http_method
        required: true
        schema:
          type: string
        style: simple
      - description: The method response's status code.
        explode: false
        in: path
        name: status_code
        required: true
        schema:
          description: The status code.
          pattern: "[1-5]\\d\\d"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMethodResponse_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/models/{model_name}:
    delete:
      description: Deletes a model.
      operationId: DeleteModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the model to delete.
        explode: false
        in: path
        name: model_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Describes an existing model defined for a RestApi resource.
      operationId: GetModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The RestApi identifier under which the Model exists.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the model as an identifier.
        explode: false
        in: path
        name: model_name
        required: true
        schema:
          type: string
        style: simple
      - description: A query parameter of a Boolean value to resolve (<code>true</code>)
          all external model references and returns a flattened model schema or not
          (<code>false</code>) The default is <code>false</code>.
        explode: true
        in: query
        name: flatten
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Changes information about a model.
      operationId: UpdateModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the model to update.
        explode: false
        in: path
        name: model_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/requestvalidators/{requestvalidator_id}:
    delete:
      description: Deletes a RequestValidator of a given RestApi.
      operationId: DeleteRequestValidator
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the RequestValidator to be deleted.
        explode: false
        in: path
        name: requestvalidator_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a RequestValidator of a given RestApi.
      operationId: GetRequestValidator
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the RequestValidator to be retrieved.
        explode: false
        in: path
        name: requestvalidator_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidator'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a RequestValidator of a given RestApi.
      operationId: UpdateRequestValidator
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of RequestValidator to be updated.
        explode: false
        in: path
        name: requestvalidator_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestValidator'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/resources/{resource_id}:
    delete:
      description: Deletes a Resource resource.
      operationId: DeleteResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the Resource resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Lists information about a resource.
      operationId: GetResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier for the Resource resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      - description: "A query parameter to retrieve the specified resources embedded\
          \ in the returned Resource representation in the response. This <code>embed</code>\
          \ parameter value is a list of comma-separated strings. Currently, the request\
          \ supports only retrieval of the embedded Method resources this way. The\
          \ query parameter value must be a single-valued list and contain the <code>\"\
          methods\"</code> string. For example, <code>GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code>."
        explode: true
        in: query
        name: embed
        required: false
        schema:
          items:
            $ref: '#/components/schemas/String'
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Changes information about a Resource resource.
      operationId: UpdateResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the Resource resource.
        explode: false
        in: path
        name: resource_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}:
    delete:
      description: Deletes the specified API.
      operationId: DeleteRestApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Lists the RestApi resource in the collection.
      operationId: GetRestApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Changes information about the specified API.
      operationId: UpdateRestApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: A feature of the API Gateway control service for updating an existing
        API with an input of external API definitions. The update can take the form
        of merging the supplied definition into the existing API or overwriting the
        existing API.
      operationId: PutRestApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: "The <code>mode</code> query parameter to specify the update\
          \ mode. Valid values are \"merge\" and \"overwrite\". By default, the update\
          \ mode is \"merge\"."
        explode: true
        in: query
        name: mode
        required: false
        schema:
          enum:
          - merge
          - overwrite
          type: string
        style: form
      - description: A query parameter to indicate whether to rollback the API update
          (<code>true</code>) or not (<code>false</code>) when a warning is encountered.
          The default value is <code>false</code>.
        explode: true
        in: query
        name: failonwarnings
        required: false
        schema:
          type: boolean
        style: form
      - description: "Custom header parameters as part of the request. For example,\
          \ to exclude DocumentationParts from an imported API, set <code>ignore=documentation</code>\
          \ as a <code>parameters</code> value, as in the AWS CLI command of <code>aws\
          \ apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'</code>."
        explode: true
        in: query
        name: parameters
        required: false
        schema:
          additionalProperties:
            $ref: '#/components/schemas/String'
          type: object
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRestApi_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/stages/{stage_name}:
    delete:
      description: Deletes a Stage resource.
      operationId: DeleteStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the Stage resource to delete.
        explode: false
        in: path
        name: stage_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets information about a Stage resource.
      operationId: GetStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the Stage resource to get information about.
        explode: false
        in: path
        name: stage_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Changes information about a Stage resource.
      operationId: UpdateStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the Stage resource to change information about.
        explode: false
        in: path
        name: stage_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /usageplans/{usageplanId}:
    delete:
      description: Deletes a usage plan of a given plan Id.
      operationId: DeleteUsagePlan
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Id of the to-be-deleted usage plan.
        explode: false
        in: path
        name: usageplanId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a usage plan of a given plan identifier.
      operationId: GetUsagePlan
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the UsagePlan resource to be retrieved.
        explode: false
        in: path
        name: usageplanId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlan'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates a usage plan of a given plan Id.
      operationId: UpdateUsagePlan
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Id of the to-be-updated usage plan.
        explode: false
        in: path
        name: usageplanId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlan'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /usageplans/{usageplanId}/keys/{keyId}:
    delete:
      description: Deletes a usage plan key and remove the underlying API key from
        the associated usage plan.
      operationId: DeleteUsagePlanKey
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Id of the UsagePlan resource representing the usage plan
          containing the to-be-deleted UsagePlanKey resource representing a plan customer.
        explode: false
        in: path
        name: usageplanId
        required: true
        schema:
          type: string
        style: simple
      - description: The Id of the UsagePlanKey resource to be deleted.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a usage plan key of a given key identifier.
      operationId: GetUsagePlanKey
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Id of the UsagePlan resource representing the usage plan
          containing the to-be-retrieved UsagePlanKey resource representing a plan
          customer.
        explode: false
        in: path
        name: usageplanId
        required: true
        schema:
          type: string
        style: simple
      - description: The key Id of the to-be-retrieved UsagePlanKey resource representing
          a plan customer.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsagePlanKey'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /vpclinks/{vpclink_id}:
    delete:
      description: Deletes an existing VpcLink of a specified identifier.
      operationId: DeleteVpcLink
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the VpcLink. It is used in an Integration to
          reference this VpcLink.
        explode: false
        in: path
        name: vpclink_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    get:
      description: Gets a specified VPC link under the caller's account in a region.
      operationId: GetVpcLink
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the VpcLink. It is used in an Integration to
          reference this VpcLink.
        explode: false
        in: path
        name: vpclink_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpcLink'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Updates an existing VpcLink of a specified identifier.
      operationId: UpdateVpcLink
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the VpcLink. It is used in an Integration to
          reference this VpcLink.
        explode: false
        in: path
        name: vpclink_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpcLink'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/stages/{stage_name}/cache/authorizers:
    delete:
      description: Flushes all authorizer cache entries on a stage.
      operationId: FlushStageAuthorizersCache
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the stage to flush.
        explode: false
        in: path
        name: stage_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /restapis/{restapi_id}/stages/{stage_name}/cache/data:
    delete:
      description: Flushes a stage's cache.
      operationId: FlushStageCache
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the stage to flush its cache.
        explode: false
        in: path
        name: stage_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /clientcertificates:
    get:
      description: Gets a collection of ClientCertificate resources.
      operationId: GetClientCertificates
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificates'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    post:
      description: Generates a ClientCertificate resource.
      operationId: GenerateClientCertificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateClientCertificate_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificate'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /account:
    get:
      description: Gets information about the current Account resource.
      operationId: GetAccount
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    patch:
      description: Changes information about the current Account resource.
      operationId: UpdateAccount
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}:
    get:
      description: Exports a deployed version of a RestApi in a specified format.
      operationId: GetExport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the Stage that will be exported.
        explode: false
        in: path
        name: stage_name
        required: true
        schema:
          type: string
        style: simple
      - description: The type of export. Acceptable values are 'oas30' for OpenAPI
          3.0.x and 'swagger' for Swagger/OpenAPI 2.0.
        explode: false
        in: path
        name: export_type
        required: true
        schema:
          type: string
        style: simple
      - description: "A key-value map of query string parameters that specify properties\
          \ of the export, depending on the requested <code>exportType</code>. For\
          \ <code>exportType</code> <code>oas30</code> and <code>swagger</code>, any\
          \ combination of the following parameters are supported: <code>extensions='integrations'</code>\
          \ or <code>extensions='apigateway'</code> will export the API with x-amazon-apigateway-integration\
          \ extensions. <code>extensions='authorizers'</code> will export the API\
          \ with x-amazon-apigateway-authorizer extensions. <code>postman</code> will\
          \ export the API with Postman extensions, allowing for import to the Postman\
          \ tool"
        explode: true
        in: query
        name: parameters
        required: false
        schema:
          additionalProperties:
            $ref: '#/components/schemas/String'
          type: object
        style: form
      - description: "The content-type of the export, for example <code>application/json</code>.\
          \ Currently <code>application/json</code> and <code>application/yaml</code>\
          \ are supported for <code>exportType</code> of<code>oas30</code> and <code>swagger</code>.\
          \ This should be specified in the <code>Accept</code> header for direct\
          \ API requests."
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /restapis/{restapi_id}/gatewayresponses:
    get:
      description: "Gets the GatewayResponses collection on the given RestApi. If\
        \ an API developer has not added any definitions for gateway responses, the\
        \ result will be the API Gateway-generated default GatewayResponses collection\
        \ for the supported response types."
      operationId: GetGatewayResponses
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set. The
          GatewayResponse collection does not support pagination and the position
          does not apply here.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500. The GatewayResponses collection
          does not support pagination and the limit does not apply here.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayResponses'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /restapis/{restapi_id}/models/{model_name}/default_template:
    get:
      description: Generates a sample mapping template that can be used to transform
        a payload into the structure of a model.
      operationId: GetModelTemplate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the model for which to generate a template.
        explode: false
        in: path
        name: model_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /restapis/{restapi_id}/resources:
    get:
      description: Lists information about a collection of Resource resources.
      operationId: GetResources
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: "A query parameter used to retrieve the specified resources embedded\
          \ in the returned Resources resource in the response. This <code>embed</code>\
          \ parameter value is a list of comma-separated strings. Currently, the request\
          \ supports only retrieval of the embedded Method resources this way. The\
          \ query parameter value must be a single-valued list and contain the <code>\"\
          methods\"</code> string. For example, <code>GET /restapis/{restapi_id}/resources?embed=methods</code>."
        explode: true
        in: query
        name: embed
        required: false
        schema:
          items:
            $ref: '#/components/schemas/String'
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resources'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}:
    get:
      description: Generates a client SDK for a RestApi and Stage.
      operationId: GetSdk
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The string identifier of the associated RestApi.
        explode: false
        in: path
        name: restapi_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the Stage that the SDK will use.
        explode: false
        in: path
        name: stage_name
        required: true
        schema:
          type: string
        style: simple
      - description: "The language for the generated SDK. Currently <code>java</code>,\
          \ <code>javascript</code>, <code>android</code>, <code>objectivec</code>\
          \ (for iOS), <code>swift</code> (for iOS), and <code>ruby</code> are supported."
        explode: false
        in: path
        name: sdk_type
        required: true
        schema:
          type: string
        style: simple
      - description: "A string-to-string key-value map of query parameters <code>sdkType</code>-dependent\
          \ properties of the SDK. For <code>sdkType</code> of <code>objectivec</code>\
          \ or <code>swift</code>, a parameter named <code>classPrefix</code> is required.\
          \ For <code>sdkType</code> of <code>android</code>, parameters named <code>groupId</code>,\
          \ <code>artifactId</code>, <code>artifactVersion</code>, and <code>invokerPackage</code>\
          \ are required. For <code>sdkType</code> of <code>java</code>, parameters\
          \ named <code>serviceName</code> and <code>javaPackageName</code> are required. "
        explode: true
        in: query
        name: parameters
        required: false
        schema:
          additionalProperties:
            $ref: '#/components/schemas/String'
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SdkResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /sdktypes/{sdktype_id}:
    get:
      description: Gets an SDK type.
      operationId: GetSdkType
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the queried SdkType instance.
        explode: false
        in: path
        name: sdktype_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SdkType'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /sdktypes:
    get:
      description: Gets SDK types
      operationId: GetSdkTypes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SdkTypes'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /tags/{resource_arn}:
    get:
      description: Gets the Tags collection for a given resource.
      operationId: GetTags
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ARN of a resource that can be tagged.
        explode: false
        in: path
        name: resource_arn
        required: true
        schema:
          type: string
        style: simple
      - description: (Not currently supported) The current pagination position in
          the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: (Not currently supported) The maximum number of returned results
          per page. The default value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
    put:
      description: Adds or updates a tag on a given resource.
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ARN of a resource that can be tagged.
        explode: false
        in: path
        name: resource_arn
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /usageplans/{usageplanId}/usage#startDate&endDate:
    get:
      description: Gets the usage data of a usage plan in a specified time interval.
      operationId: GetUsage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Id of the usage plan associated with the usage data.
        explode: false
        in: path
        name: usageplanId
        required: true
        schema:
          type: string
        style: simple
      - description: The Id of the API key associated with the resultant usage data.
        explode: true
        in: query
        name: keyId
        required: false
        schema:
          type: string
        style: form
      - description: "The starting date (e.g., 2016-01-01) of the usage data."
        explode: true
        in: query
        name: startDate
        required: true
        schema:
          type: string
        style: form
      - description: "The ending date (e.g., 2016-12-31) of the usage data."
        explode: true
        in: query
        name: endDate
        required: true
        schema:
          type: string
        style: form
      - description: The current pagination position in the paged result set.
        explode: true
        in: query
        name: position
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of returned results per page. The default
          value is 25 and the maximum value is 500.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usage'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /apikeys#mode=import&format:
    post:
      description: "Import API keys from an external source, such as a CSV-formatted\
        \ file."
      operationId: ImportApiKeys
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "A query parameter to specify the input format to imported API\
          \ keys. Currently, only the <code>csv</code> format is supported."
        explode: true
        in: query
        name: format
        required: true
        schema:
          enum:
          - csv
          type: string
        style: form
      - description: A query parameter to indicate whether to rollback ApiKey importation
          (<code>true</code>) or not (<code>false</code>) when error is encountered.
        explode: true
        in: query
        name: failonwarnings
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: mode
        required: true
        schema:
          enum:
          - import
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportApiKeys_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyIds'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /restapis#mode=import:
    post:
      description: A feature of the API Gateway control service for creating a new
        API from an external API definition file.
      operationId: ImportRestApi
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: A query parameter to indicate whether to rollback the API creation
          (<code>true</code>) or not (<code>false</code>) when a warning is encountered.
          The default value is <code>false</code>.
        explode: true
        in: query
        name: failonwarnings
        required: false
        schema:
          type: boolean
        style: form
      - description: "<p>A key-value map of context-specific query string parameters\
          \ specifying the behavior of different API importing operations. The following\
          \ shows operation-specific parameters and their supported values.</p> <p>\
          \ To exclude DocumentationParts from the import, set <code>parameters</code>\
          \ as <code>ignore=documentation</code>.</p> <p> To configure the endpoint\
          \ type, set <code>parameters</code> as <code>endpointConfigurationTypes=EDGE</code>,\
          \ <code>endpointConfigurationTypes=REGIONAL</code>, or <code>endpointConfigurationTypes=PRIVATE</code>.\
          \ The default endpoint type is <code>EDGE</code>.</p> <p> To handle imported\
          \ <code>basepath</code>, set <code>parameters</code> as <code>basepath=ignore</code>,\
          \ <code>basepath=prepend</code> or <code>basepath=split</code>.</p> <p>For\
          \ example, the AWS CLI command to exclude documentation from the imported\
          \ API is:</p> <p>The AWS CLI command to set the regional endpoint on the\
          \ imported API is:</p>"
        explode: true
        in: query
        name: parameters
        required: false
        schema:
          additionalProperties:
            $ref: '#/components/schemas/String'
          type: object
        style: form
      - explode: true
        in: query
        name: mode
        required: true
        schema:
          enum:
          - import
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRestApi_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestApi'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /tags/{resource_arn}#tagKeys:
    delete:
      description: Removes a tag from a given resource.
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ARN of a resource that can be tagged.
        explode: false
        in: path
        name: resource_arn
        required: true
        schema:
          type: string
        style: simple
      - description: The Tag keys to delete.
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/String'
          type: array
        style: form
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-accepts:
      - application/json
  /usageplans/{usageplanId}/keys/{keyId}/usage:
    patch:
      description: Grants a temporary extension to the remaining quota of a usage
        plan associated with a specified API key.
      operationId: UpdateUsage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Id of the usage plan associated with the usage data.
        explode: false
        in: path
        name: usageplanId
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the API key associated with the usage plan
          in which a temporary extension is granted to the remaining quota.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKey_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usage'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    ApiKey:
      description: "A resource that can be distributed to callers for executing Method\
        \ resources that require an API key. API keys can be mapped to any Stage on\
        \ any RestApi, which indicates that the callers with the API key can make\
        \ requests to that stage."
      example:
        lastUpdatedDate: ""
        createdDate: ""
        name: ""
        customerId: ""
        description: ""
        stageKeys: ""
        id: ""
        value: ""
        enabled: ""
        tags: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of the API Key.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The value of the API Key.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the API Key.
        customerId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "An AWS Marketplace customer identifier , when integrating\
              \ with the AWS SaaS Marketplace."
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the API Key.
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specifies whether the API Key can be used by callers.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp when the API Key was created.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp when the API Key was last updated.
        stageKeys:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: A list of Stage resources that are associated with the ApiKey
              resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
      type: object
    StageKey:
      description: "A reference to a unique stage identified in the format <code>{restApiId}/{stage}</code>."
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The stage name associated with the stage key.
      type: object
    String:
      type: string
    BadRequestException: {}
    ConflictException: {}
    LimitExceededException: {}
    NotFoundException: {}
    UnauthorizedException: {}
    TooManyRequestsException: {}
    Authorizer:
      description: "Represents an authorization layer for methods. If enabled on a\
        \ method, API Gateway will activate the authorizer when a client calls the\
        \ method."
      example:
        identitySource: ""
        identityValidationExpression: ""
        authorizerUri: ""
        authorizerCredentials: ""
        authorizerResultTtlInSeconds: ""
        name: ""
        id: ""
        providerARNs: ""
        type: ""
        authType: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier for the authorizer resource.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the authorizer.
        type:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          - description: "The authorizer type. Valid values are <code>TOKEN</code>\
              \ for a Lambda function using a single authorization token submitted\
              \ in a custom header, <code>REQUEST</code> for a Lambda function using\
              \ incoming request parameters, and <code>COGNITO_USER_POOLS</code> for\
              \ using an Amazon Cognito user pool."
        providerARNs:
          allOf:
          - $ref: '#/components/schemas/ListOfARNs'
          - description: "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code>\
              \ authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>.\
              \ For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this\
              \ is not defined. "
        authType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Optional customer-defined field, used in OpenAPI imports\
              \ and exports without functional impact."
        authorizerUri:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the authorizer's Uniform Resource Identifier (URI).\
              \ For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must\
              \ be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>.\
              \ In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>,\
              \ where <code>{region}</code> is the same as the region hosting the\
              \ Lambda function, <code>path</code> indicates that the remaining substring\
              \ in the URI should be treated as the path to the resource, including\
              \ the initial <code>/</code>. For Lambda functions, this is usually\
              \ of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>."
        authorizerCredentials:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the required credentials as an IAM role for API\
              \ Gateway to invoke the authorizer. To specify an IAM role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To use resource-based\
              \ permissions on the Lambda function, specify null."
        identitySource:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The identity source for which authorization is requested.\
              \ For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer,\
              \ this is required and specifies the request header mapping expression\
              \ for the custom header holding the authorization token submitted by\
              \ the client. For example, if the token header name is <code>Auth</code>,\
              \ the header mapping expression is <code>method.request.header.Auth</code>.\
              \ For the <code>REQUEST</code> authorizer, this is required when authorization\
              \ caching is enabled. The value is a comma-separated string of one or\
              \ more mapping expressions of the specified request parameters. For\
              \ example, if an <code>Auth</code> header, a <code>Name</code> query\
              \ string parameter are defined as identity sources, this value is <code>method.request.header.Auth</code>,\
              \ <code>method.request.querystring.Name</code>. These parameters will\
              \ be used to derive the authorization caching key and to perform runtime\
              \ validation of the <code>REQUEST</code> authorizer by verifying all\
              \ of the identity-related request parameters are present, not null and\
              \ non-empty. Only when this is true does the authorizer invoke the authorizer\
              \ Lambda function, otherwise, it returns a 401 Unauthorized response\
              \ without calling the Lambda function. The valid value is a string of\
              \ comma-separated mapping expressions of the specified request parameters.\
              \ When the authorization caching is not enabled, this property is optional. "
        identityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "A validation expression for the incoming identity token.\
              \ For <code>TOKEN</code> authorizers, this value is a regular expression.\
              \ For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will\
              \ match the <code>aud</code> field of the incoming token from the client\
              \ against the specified regular expression. It will invoke the authorizer's\
              \ Lambda function when there is a match. Otherwise, it will return a\
              \ 401 Unauthorized response without calling the Lambda function. The\
              \ validation expression does not apply to the <code>REQUEST</code> authorizer."
        authorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          - description: "The TTL in seconds of cached authorizer results. If it equals\
              \ 0, authorization caching is disabled. If it is greater than 0, API\
              \ Gateway will cache authorizer responses. If this field is not set,\
              \ the default value is 300. The maximum value is 3600, or 1 hour."
      type: object
    ProviderARN:
      type: string
    BasePathMapping:
      description: Represents the base path that callers of the API must provide as
        part of the URL after the domain name.
      example:
        basePath: ""
        stage: ""
        restApiId: ""
      properties:
        basePath:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The base path name that callers of the API must provide as
              part of the URL after the domain name.
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The string identifier of the associated RestApi.
        stage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the associated stage.
      type: object
    Deployment:
      description: An immutable representation of a RestApi resource that can be called
        by users using Stages. A deployment must be associated with a Stage for it
        to be callable over the Internet.
      example:
        createdDate: ""
        apiSummary: ""
        description: ""
        id: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier for the deployment resource.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description for the deployment resource.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the deployment resource was created.
        apiSummary:
          allOf:
          - $ref: '#/components/schemas/PathToMapOfMethodSnapshot'
          - description: A summary of the RestApi at the date and time that the deployment
              resource was created.
      type: object
    Double:
      format: double
      type: number
    MapOfStringToString:
      additionalProperties:
        $ref: '#/components/schemas/String'
      type: object
    Boolean:
      type: boolean
    ServiceUnavailableException: {}
    DocumentationPart:
      description: A documentation part for a targeted API entity.
      example:
        location:
          path: ""
          method: ""
          name: ""
          type: ""
          statusCode: ""
        id: ""
        properties: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The DocumentationPart identifier, generated by API Gateway\
              \ when the <code>DocumentationPart</code> is created."
        location:
          $ref: '#/components/schemas/DocumentationPart_location'
        properties:
          description: "A content map of API-specific key-value pairs describing the\
            \ targeted API entity. The map must be encoded as a JSON string, e.g.,\
            \ <code>\"{ \\\"description\\\": \\\"The API does ...\\\" }\"</code>.\
            \ Only OpenAPI-compliant documentation-related fields from the properties\
            \ map are exported and, hence, published as part of the API entity definitions,\
            \ while the original documentation parts are exported in a OpenAPI extension\
            \ of <code>x-amazon-apigateway-documentation</code>."
      type: object
    DocumentationPartType:
      enum:
      - API
      - AUTHORIZER
      - MODEL
      - RESOURCE
      - METHOD
      - PATH_PARAMETER
      - QUERY_PARAMETER
      - REQUEST_HEADER
      - REQUEST_BODY
      - RESPONSE
      - RESPONSE_HEADER
      - RESPONSE_BODY
      type: string
    DocumentationPartLocationStatusCode:
      pattern: "^([1-5]\\d\\d|\\*|\\s*)$"
      type: string
    DocumentationVersion:
      description: A snapshot of the documentation of an API.
      example:
        createdDate: ""
        description: ""
        version: ""
      properties:
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The version identifier of the API documentation snapshot.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date when the API documentation snapshot is created.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the API documentation snapshot.
      type: object
    DomainName:
      description: Represents a custom domain name as a user-friendly host name of
        an API (RestApi).
      example:
        regionalHostedZoneId: ""
        distributionDomainName: ""
        certificateName: ""
        domainNameStatus: ""
        domainNameStatusMessage: ""
        securityPolicy: ""
        distributionHostedZoneId: ""
        tags: ""
        certificateUploadDate: ""
        certificateArn: ""
        regionalCertificateArn: ""
        domainName: ""
        endpointConfiguration:
          types: ""
          vpcEndpointIds: ""
        ownershipVerificationCertificateArn: ""
        regionalDomainName: ""
        regionalCertificateName: ""
        mutualTlsAuthentication:
          truststoreVersion: ""
          truststoreUri: ""
          truststoreWarnings: ""
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The custom domain name as an API host name, for example,\
              \ <code>my-api.example.com</code>."
        certificateName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the certificate that will be used by edge-optimized
              endpoint for this domain name.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The reference to an AWS-managed certificate that will be
              used by edge-optimized endpoint for this domain name. AWS Certificate
              Manager is the only supported source.
        certificateUploadDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp when the certificate that was used by edge-optimized
              endpoint for this domain name was uploaded.
        regionalDomainName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The domain name associated with the regional endpoint for
              this custom domain name. You set up this association by adding a DNS
              record that points the custom domain name to this regional domain name.
              The regional domain name is returned by API Gateway when you create
              a regional endpoint.
        regionalHostedZoneId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The region-specific Amazon Route 53 Hosted Zone ID of the\
              \ regional endpoint. For more information, see Set up a Regional Custom\
              \ Domain Name and AWS Regions and Endpoints for API Gateway. "
        regionalCertificateName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the certificate that will be used for validating
              the regional domain name.
        regionalCertificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The reference to an AWS-managed certificate that will be
              used for validating the regional domain name. AWS Certificate Manager
              is the only supported source.
        distributionDomainName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The domain name of the Amazon CloudFront distribution associated\
              \ with this custom domain name for an edge-optimized endpoint. You set\
              \ up this association when adding a DNS record pointing the custom domain\
              \ name to this distribution name. For more information about CloudFront\
              \ distributions, see the Amazon CloudFront documentation."
        distributionHostedZoneId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The region-agnostic Amazon Route 53 Hosted Zone ID of the\
              \ edge-optimized endpoint. The valid value is <code>Z2FDTNDATAQYW2</code>\
              \ for all the regions. For more information, see Set up a Regional Custom\
              \ Domain Name and AWS Regions and Endpoints for API Gateway. "
        endpointConfiguration:
          $ref: '#/components/schemas/DomainName_endpointConfiguration'
        domainNameStatus:
          allOf:
          - $ref: '#/components/schemas/DomainNameStatus'
          - description: "The status of the DomainName migration. The valid values\
              \ are <code>AVAILABLE</code> and <code>UPDATING</code>. If the status\
              \ is <code>UPDATING</code>, the domain cannot be modified further until\
              \ the existing operation is complete. If it is <code>AVAILABLE</code>,\
              \ the domain can be updated."
        domainNameStatusMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: An optional text message containing detailed information
              about status of the DomainName migration.
        securityPolicy:
          allOf:
          - $ref: '#/components/schemas/SecurityPolicy'
          - description: The Transport Layer Security (TLS) version + cipher suite
              for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
        mutualTlsAuthentication:
          $ref: '#/components/schemas/DomainName_mutualTlsAuthentication'
        ownershipVerificationCertificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The ARN of the public certificate issued by ACM to validate
              ownership of your custom domain. Only required when configuring mutual
              TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
      type: object
    ListOfEndpointType:
      items:
        $ref: '#/components/schemas/EndpointType'
      type: array
    ListOfString:
      items:
        $ref: '#/components/schemas/String'
      type: array
    Model:
      description: Represents the data structure of a method's request or response
        payload.
      example:
        schema: ""
        name: ""
        description: ""
        id: ""
        contentType: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier for the model resource.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the model. Must be an alphanumeric string.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the model.
        schema:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The schema for the model. For <code>application/json</code>\
              \ models, this should be JSON schema draft 4 model. Do not include \"\
              \\*/\" characters in the description of any properties because such\
              \ \"\\*/\" characters may be interpreted as the closing marker for comments\
              \ in some languages, such as Java or JavaScript, causing the installation\
              \ of your API's SDK generated by API Gateway to fail."
        contentType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The content-type for the model.
      type: object
    RequestValidator:
      description: A set of validation rules for incoming Method requests.
      example:
        validateRequestBody: ""
        name: ""
        validateRequestParameters: ""
        id: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of this RequestValidator.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of this RequestValidator
        validateRequestBody:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: A Boolean flag to indicate whether to validate a request
              body according to the configured Model schema.
        validateRequestParameters:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: A Boolean flag to indicate whether to validate request parameters
              (<code>true</code>) or not (<code>false</code>).
      type: object
    Resource:
      description: Represents an API resource.
      example:
        path: ""
        pathPart: ""
        resourceMethods: ""
        id: ""
        parentId: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The resource's identifier.
        parentId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The parent resource's identifier.
        pathPart:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The last path segment for this resource.
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The full path for this resource.
        resourceMethods:
          allOf:
          - $ref: '#/components/schemas/MapOfMethod'
          - description: Gets an API resource's method of a given HTTP verb.
      type: object
    RestApi:
      description: Represents a REST API.
      example:
        binaryMediaTypes: ""
        warnings: ""
        apiKeySource: ""
        minimumCompressionSize: ""
        description: ""
        version: ""
        tags: ""
        disableExecuteApiEndpoint: ""
        createdDate: ""
        name: ""
        endpointConfiguration:
          types: ""
          vpcEndpointIds: ""
        id: ""
        policy: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The API's identifier. This identifier is unique across all
              of your APIs in API Gateway.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The API's name.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The API's description.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp when the API was created.
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A version identifier for the API.
        warnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: The warning messages reported when <code>failonwarnings</code>
              is turned on during API import.
        binaryMediaTypes:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: "The list of binary media types supported by the RestApi.\
              \ By default, the RestApi supports only UTF-8-encoded text payloads."
        minimumCompressionSize:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          - description: "A nullable integer that is used to enable compression (with\
              \ non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable\
              \ compression (with a null value) on an API. When compression is enabled,\
              \ compression or decompression is not applied on the payload if the\
              \ payload size is smaller than this value. Setting it to zero allows\
              \ compression for any payload size."
        apiKeySource:
          allOf:
          - $ref: '#/components/schemas/ApiKeySourceType'
          - description: "The source of the API key for metering requests according\
              \ to a usage plan. Valid values are: &gt;<code>HEADER</code> to read\
              \ the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code>\
              \ to read the API key from the <code>UsageIdentifierKey</code> from\
              \ a custom authorizer."
        endpointConfiguration:
          $ref: '#/components/schemas/RestApi_endpointConfiguration'
        policy:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A stringified JSON policy document that applies to this RestApi
              regardless of the caller and Method configuration.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
        disableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default <code>execute-api</code> endpoint. By default, clients can\
              \ invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code>\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint."
      type: object
    Stage:
      description: Represents a unique identifier for a version of a deployed RestApi
        that is callable by users.
      example:
        variables: ""
        clientCertificateId: ""
        description: ""
        canarySettings:
          stageVariableOverrides: ""
          percentTraffic: ""
          deploymentId: ""
          useStageCache: ""
        cacheClusterEnabled: ""
        cacheClusterStatus: ""
        accessLogSettings:
          destinationArn: ""
          format: ""
        tags: ""
        lastUpdatedDate: ""
        stageName: ""
        createdDate: ""
        documentationVersion: ""
        deploymentId: ""
        cacheClusterSize: ""
        methodSettings: ""
        tracingEnabled: ""
        webAclArn: ""
      properties:
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of the Deployment that the stage points to.
        clientCertificateId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of a client certificate for an API stage.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The name of the stage is the first path segment in the Uniform\
              \ Resource Identifier (URI) of a call to API Gateway. Stage names can\
              \ only contain alphanumeric characters, hyphens, and underscores. Maximum\
              \ length is 128 characters."
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The stage's description.
        cacheClusterEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specifies whether a cache cluster is enabled for the stage.
        cacheClusterSize:
          allOf:
          - $ref: '#/components/schemas/CacheClusterSize'
          - description: "The stage's cache capacity in GB. For more information about\
              \ choosing a cache size, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html\"\
              >Enabling API caching to enhance responsiveness</a>."
        cacheClusterStatus:
          allOf:
          - $ref: '#/components/schemas/CacheClusterStatus'
          - description: "The status of the cache cluster for the stage, if enabled."
        methodSettings:
          allOf:
          - $ref: '#/components/schemas/MapOfMethodSettings'
          - description: "A map that defines the method settings for a Stage resource.\
              \ Keys (designated as <code>/{method_setting_key</code> below) are method\
              \ paths defined as <code>{resource_path}/{http_method}</code> for an\
              \ individual method override, or <code>/\\*/\\*</code> for overriding\
              \ all methods in the stage. "
        variables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "A map that defines the stage variables for a Stage resource.\
              \ Variable names can have alphanumeric and underscore characters, and\
              \ the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>."
        documentationVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The version of the associated API documentation.
        accessLogSettings:
          $ref: '#/components/schemas/Stage_accessLogSettings'
        canarySettings:
          $ref: '#/components/schemas/Stage_canarySettings'
        tracingEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specifies whether active tracing with X-ray is enabled for
              the Stage.
        webAclArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The ARN of the WebAcl associated with the Stage.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp when the stage was created.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp when the stage last updated.
      type: object
    UsagePlan:
      description: "Represents a usage plan used to specify who can assess associated\
        \ API stages. Optionally, target request rate and quota limits can be set.\
        \ In some cases clients can exceed the targets that you set. Don’t rely on\
        \ usage plans to control costs. Consider using <a href=\"https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html\"\
        >Amazon Web Services Budgets</a> to monitor costs and <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\"\
        >WAF</a> to manage API requests."
      example:
        throttle:
          burstLimit: ""
          rateLimit: ""
        productCode: ""
        quota:
          period: ""
          offset: ""
          limit: ""
        name: ""
        description: ""
        id: ""
        apiStages: ""
        tags: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of a UsagePlan resource.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of a usage plan.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of a usage plan.
        apiStages:
          allOf:
          - $ref: '#/components/schemas/ListOfApiStage'
          - description: The associated API stages of a usage plan.
        throttle:
          $ref: '#/components/schemas/UsagePlan_throttle'
        quota:
          $ref: '#/components/schemas/UsagePlan_quota'
        productCode:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The AWS Markeplace product identifier to associate with the
              usage plan as a SaaS product on AWS Marketplace.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
      type: object
    ApiStage:
      description: API stage name of the associated API stage in a usage plan.
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: API Id of the associated API stage in a usage plan.
        stage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: API stage name of the associated API stage in a usage plan.
        throttle:
          allOf:
          - $ref: '#/components/schemas/MapOfApiStageThrottleSettings'
          - description: Map containing method level throttling information for API
              stage in a usage plan.
      type: object
    Integer:
      type: integer
    QuotaPeriodType:
      enum:
      - DAY
      - WEEK
      - MONTH
      type: string
    UsagePlanKey:
      description: Represents a usage plan key to identify a plan customer.
      example:
        name: ""
        id: ""
        type: ""
        value: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The Id of a usage plan key.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The type of a usage plan key. Currently, the valid key type\
              \ is <code>API_KEY</code>."
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The value of a usage plan key.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of a usage plan key.
      type: object
    VpcLink:
      description: An API Gateway VPC link for a RestApi to access resources in an
        Amazon Virtual Private Cloud (VPC).
      example:
        name: ""
        description: ""
        id: ""
        statusMessage: ""
        targetArns: ""
        status: ""
        tags: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of the VpcLink. It is used in an Integration
              to reference this VpcLink.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name used to label and identify the VPC link.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the VPC link.
        targetArns:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: The ARN of the network load balancer of the VPC targeted
              by the VPC link. The network load balancer must be owned by the same
              AWS account of the API owner.
        status:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          - description: "The status of the VPC link. The valid values are <code>AVAILABLE</code>,\
              \ <code>PENDING</code>, <code>DELETING</code>, or <code>FAILED</code>.\
              \ Deploying an API will wait if the status is <code>PENDING</code> and\
              \ will fail if the status is <code>DELETING</code>. "
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A description about the VPC link status.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
      type: object
    ClientCertificate:
      description: Represents a client certificate used to configure client-side SSL
        authentication while sending requests to the integration endpoint.
      example:
        createdDate: ""
        clientCertificateId: ""
        description: ""
        pemEncodedCertificate: ""
        expirationDate: ""
        tags: ""
      properties:
        clientCertificateId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of the client certificate.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the client certificate.
        pemEncodedCertificate:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The PEM-encoded public key of the client certificate, which\
              \ can be used to configure certificate authentication in the integration\
              \ endpoint ."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp when the client certificate was created.
        expirationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp when the client certificate will expire.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
      type: object
    Account:
      description: Represents an AWS account that is associated with API Gateway.
      example:
        features: ""
        apiKeyVersion: ""
        throttleSettings:
          burstLimit: ""
          rateLimit: ""
        cloudwatchRoleArn: ""
      properties:
        cloudwatchRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: 'The ARN of an Amazon CloudWatch role for the current Account. '
        throttleSettings:
          $ref: '#/components/schemas/Account_throttleSettings'
        features:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: "A list of features supported for the account. When usage\
              \ plans are enabled, the features list will include an entry of <code>\"\
              UsagePlans\"</code>."
        apiKeyVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The version of the API keys used for the account.
      type: object
    ApiKeys:
      description: Represents a collection of API keys as represented by an ApiKeys
        resource.
      example:
        warnings: ""
        position: position
        items: ""
      properties:
        warnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: A list of warning messages logged during the import of API
              keys when the <code>failOnWarnings</code> option is set to true.
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfApiKey'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    Authorizers:
      description: Represents a collection of Authorizer resources.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfAuthorizer'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    BasePathMappings:
      description: Represents a collection of BasePathMapping resources.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfBasePathMapping'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    ClientCertificates:
      description: Represents a collection of ClientCertificate resources.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfClientCertificate'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    Deployments:
      description: "Represents a collection resource that contains zero or more references\
        \ to your existing deployments, and links that guide you on how to interact\
        \ with your collection. The collection offers a paginated view of the contained\
        \ deployments."
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfDeployment'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    DocumentationParts:
      description: The collection of documentation parts of an API.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfDocumentationPart'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    DocumentationVersions:
      description: 'The collection of documentation snapshots of an API. '
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfDocumentationVersion'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    DomainNames:
      description: Represents a collection of DomainName resources.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfDomainName'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    ExportResponse:
      description: "The binary blob response to GetExport, which contains the generated\
        \ SDK."
      example:
        body: ""
      properties:
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          - description: "The binary blob response to GetExport, which contains the\
              \ export."
      type: object
    GatewayResponse:
      description: "A gateway response of a given response type and status code, with\
        \ optional response parameters and mapping templates."
      example:
        responseType: ""
        responseParameters: ""
        defaultResponse: ""
        responseTemplates: ""
        statusCode: ""
      properties:
        responseType:
          allOf:
          - $ref: '#/components/schemas/GatewayResponseType'
          - description: The response type of the associated GatewayResponse.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          - description: The HTTP status code for this GatewayResponse.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Response parameters (paths, query strings and headers) of\
              \ the GatewayResponse as a string-to-string map of key-value pairs."
        responseTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: Response templates of the GatewayResponse as a string-to-string
              map of key-value pairs.
        defaultResponse:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: 'A Boolean flag to indicate whether this GatewayResponse
              is the default gateway response (<code>true</code>) or not (<code>false</code>).
              A default gateway response is one generated by API Gateway without any
              customization by an API developer. '
      type: object
    GatewayResponses:
      description: "The collection of the GatewayResponse instances of a RestApi as\
        \ a <code>responseType</code>-to-GatewayResponse object map of key-value pairs.\
        \ As such, pagination is not supported for querying this collection."
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfGatewayResponse'
          - description: "Returns the entire collection, because of no pagination\
              \ support."
            xml:
              name: item
      type: object
    Integration:
      description: "Represents an HTTP, HTTP_PROXY, AWS, AWS_PROXY, or Mock integration."
      example:
        credentials: ""
        requestParameters: ""
        cacheKeyParameters: ""
        integrationResponses: ""
        contentHandling: ""
        type: ""
        httpMethod: ""
        cacheNamespace: ""
        uri: ""
        connectionType: ""
        timeoutInMillis: ""
        tlsConfig:
          insecureSkipVerification: ""
        requestTemplates: ""
        passthroughBehavior: ""
        connectionId: ""
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          - description: "<p>Specifies an API method integration type. The valid value\
              \ is one of the following:</p> <p>For the HTTP and HTTP proxy integrations,\
              \ each integration can specify a protocol (<code>http/https</code>),\
              \ port and path. Standard 80 and 443 ports are supported as well as\
              \ custom ports above 1024. An HTTP or HTTP proxy integration with a\
              \ <code>connectionType</code> of <code>VPC_LINK</code> is referred to\
              \ as a private integration and uses a VpcLink to connect API Gateway\
              \ to a network load balancer of a VPC.</p>"
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Specifies the integration's HTTP method type.
        uri:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "<p>Specifies Uniform Resource Identifier (URI) of the integration\
              \ endpoint.</p> <p>For <code>HTTP</code> or <code>HTTP_PROXY</code>\
              \ integrations, the URI must be a fully formed, encoded HTTP(S) URL\
              \ according to the RFC-3986 specification, for either standard integration,\
              \ where <code>connectionType</code> is not <code>VPC_LINK</code>, or\
              \ private integration, where <code>connectionType</code> is <code>VPC_LINK</code>.\
              \ For a private HTTP integration, the URI is not used for routing. For\
              \ <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is\
              \ of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>.\
              \ Here, {Region} is the API Gateway region (e.g., us-east-1); {service}\
              \ is the name of the integrated Amazon Web Services service (e.g., s3);\
              \ and {subdomain} is a designated subdomain supported by certain Amazon\
              \ Web Services service for fast host-name lookup. action can be used\
              \ for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}...\
              \ query string. The ensuing {service_api} refers to a supported action\
              \ {name} plus any required input parameters. Alternatively, path can\
              \ be used for an AWS service path-based API. The ensuing service_api\
              \ refers to the path to an Amazon Web Services service resource, including\
              \ the region of the integrated Amazon Web Services service, if applicable.\
              \ For example, for integration with the S3 API of GetObject, the uri\
              \ can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code>\
              \ or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>\
              \ </p>"
        connectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          - description: The type of the network connection to the integration endpoint.
              The valid value is <code>INTERNET</code> for connections through the
              public routable internet or <code>VPC_LINK</code> for private connections
              between API Gateway and a network load balancer in a VPC. The default
              value is <code>INTERNET</code>.
        connectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code>\
              \ and undefined, otherwise."
        credentials:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the credentials required for the integration,\
              \ if any. For AWS integrations, three options are available. To specify\
              \ an IAM Role for API Gateway to assume, use the role's Amazon Resource\
              \ Name (ARN). To require that the caller's identity be passed through\
              \ from the request, specify the string <code>arn:aws:iam::\\*:user/\\\
              *</code>. To use resource-based permissions on supported AWS services,\
              \ specify null."
        requestParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "A key-value map specifying request parameters that are passed\
              \ from the method request to the back end. The key is an integration\
              \ request parameter name and the associated value is a method request\
              \ parameter value or static value that must be enclosed within single\
              \ quotes and pre-encoded as required by the back end. The method request\
              \ parameter value must match the pattern of <code>method.request.{location}.{name}</code>,\
              \ where <code>location</code> is <code>querystring</code>, <code>path</code>,\
              \ or <code>header</code> and <code>name</code> must be a valid and unique\
              \ method request parameter name."
        requestTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Represents a map of Velocity templates that are applied\
              \ on the request payload based on the value of the Content-Type header\
              \ sent by the client. The content type value is the key in this map,\
              \ and the template (as a String) is the value."
        passthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies how the method request body of an unmapped content\
              \ type will be passed through the integration request to the back end\
              \ without transformation. A content type is unmapped if no mapping template\
              \ is defined in the integration or the content type does not match any\
              \ of the mapped content types, as specified in <code>requestTemplates</code>.\
              \ The valid value is one of the following: <code>WHEN_NO_MATCH</code>:\
              \ passes the method request body through the integration request to\
              \ the back end without transformation when the method request content\
              \ type does not match any content type associated with the mapping templates\
              \ defined in the integration request. <code>WHEN_NO_TEMPLATES</code>:\
              \ passes the method request body through the integration request to\
              \ the back end without transformation when no mapping template is defined\
              \ in the integration request. If a template is defined when this option\
              \ is selected, the method request of an unmapped content-type will be\
              \ rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>:\
              \ rejects the method request with an HTTP 415 Unsupported Media Type\
              \ response when either the method request content type does not match\
              \ any content type associated with the mapping templates defined in\
              \ the integration request or no mapping template is defined in the integration\
              \ request."
        contentHandling:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Specifies how to handle request payload content type\
              \ conversions. Supported values are <code>CONVERT_TO_BINARY</code> and\
              \ <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If\
              \ this property is not defined, the request payload will be passed through\
              \ from the method request to integration request without modification,\
              \ provided that the <code>passthroughBehavior</code> is configured to\
              \ support payload pass-through.</p>"
        timeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: "Custom timeout between 50 and 29,000 milliseconds. The default\
              \ value is 29,000 milliseconds or 29 seconds."
        cacheNamespace:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies a group of related cached parameters. By default,\
              \ API Gateway uses the resource ID as the <code>cacheNamespace</code>.\
              \ You can specify the same <code>cacheNamespace</code> across resources\
              \ to return the same cached data for requests to different resources."
        cacheKeyParameters:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: "A list of request parameters whose values API Gateway caches.\
              \ To be valid values for <code>cacheKeyParameters</code>, these parameters\
              \ must also be specified for Method <code>requestParameters</code>."
        integrationResponses:
          allOf:
          - $ref: '#/components/schemas/MapOfIntegrationResponse'
          - description: Specifies the integration's responses.
        tlsConfig:
          $ref: '#/components/schemas/Integration_tlsConfig'
      type: object
    IntegrationResponse:
      description: "Represents an integration response. The status code must map to\
        \ an existing MethodResponse, and parameters and templates can be used to\
        \ transform the back-end response."
      example:
        responseParameters: ""
        selectionPattern: ""
        contentHandling: ""
        responseTemplates: ""
        statusCode: ""
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          - description: Specifies the status code that is used to map the integration
              response to an existing MethodResponse.
        selectionPattern:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the regular expression (regex) pattern used to\
              \ choose an integration response based on the response from the back\
              \ end. For example, if the success response returns nothing and the\
              \ error response returns some string, you could use the <code>.+</code>\
              \ regex to match error response. However, make sure that the error response\
              \ does not contain any newline (<code>\\n</code>) character in such\
              \ cases. If the back end is an AWS Lambda function, the AWS Lambda function\
              \ error header is matched. For all other HTTP and AWS back ends, the\
              \ HTTP status code is matched."
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "A key-value map specifying response parameters that are\
              \ passed to the method response from the back end. The key is a method\
              \ response header parameter name and the mapped value is an integration\
              \ response header value, a static value enclosed within a pair of single\
              \ quotes, or a JSON expression from the integration response body. The\
              \ mapping key must match the pattern of <code>method.response.header.{name}</code>,\
              \ where <code>name</code> is a valid and unique header name. The mapped\
              \ non-static value must match the pattern of <code>integration.response.header.{name}</code>\
              \ or <code>integration.response.body.{JSON-expression}</code>, where\
              \ <code>name</code> is a valid and unique response header name and <code>JSON-expression</code>\
              \ is a valid JSON expression without the <code>$</code> prefix."
        responseTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Specifies the templates used to transform the integration\
              \ response body. Response templates are represented as a key/value map,\
              \ with a content-type as the key and a template as the value."
        contentHandling:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Specifies how to handle response payload content type\
              \ conversions. Supported values are <code>CONVERT_TO_BINARY</code> and\
              \ <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If\
              \ this property is not defined, the response payload will be passed\
              \ through from the integration response to the method response without\
              \ modification.</p>"
      type: object
    Method:
      description: " Represents a client-facing interface by which the client calls\
        \ the API to access back-end resources. A Method resource is integrated with\
        \ an Integration resource. Both consist of a request and one or more responses.\
        \ The method request takes the client input that is passed to the back end\
        \ through the integration request. A method response returns the output from\
        \ the back end to the client through an integration response. A method request\
        \ is embodied in a Method resource, whereas an integration request is embodied\
        \ in an Integration resource. On the other hand, a method response is represented\
        \ by a MethodResponse resource, whereas an integration response is represented\
        \ by an IntegrationResponse resource. "
      example:
        requestValidatorId: ""
        authorizerId: ""
        apiKeyRequired: ""
        methodIntegration:
          credentials: ""
          requestParameters: ""
          cacheKeyParameters: ""
          integrationResponses: ""
          contentHandling: ""
          type: ""
          httpMethod: ""
          cacheNamespace: ""
          uri: ""
          connectionType: ""
          timeoutInMillis: ""
          tlsConfig:
            insecureSkipVerification: ""
          requestTemplates: ""
          passthroughBehavior: ""
          connectionId: ""
        requestModels: ""
        authorizationScopes: ""
        requestParameters: ""
        authorizationType: ""
        operationName: ""
        httpMethod: ""
        methodResponses: ""
      properties:
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The method's HTTP verb.
        authorizationType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The method's authorization type. Valid values are <code>NONE</code>\
              \ for open access, <code>AWS_IAM</code> for using AWS IAM permissions,\
              \ <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code>\
              \ for using a Cognito user pool."
        authorizerId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of an Authorizer to use on this method. The
              <code>authorizationType</code> must be <code>CUSTOM</code>.
        apiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          - description: A boolean flag specifying whether a valid ApiKey is required
              to invoke this method.
        requestValidatorId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of a RequestValidator for request validation.
        operationName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "A human-friendly operation identifier for the method. For\
              \ example, you can assign the <code>operationName</code> of <code>ListPets</code>\
              \ for the <code>GET /pets</code> method in the <code>PetStore</code>\
              \ example."
        requestParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToBoolean'
          - description: "A key-value map defining required or optional method request\
              \ parameters that can be accepted by API Gateway. A key is a method\
              \ request parameter name matching the pattern of <code>method.request.{location}.{name}</code>,\
              \ where <code>location</code> is <code>querystring</code>, <code>path</code>,\
              \ or <code>header</code> and <code>name</code> is a valid and unique\
              \ parameter name. The value associated with the key is a Boolean flag\
              \ indicating whether the parameter is required (<code>true</code>) or\
              \ optional (<code>false</code>). The method request parameter names\
              \ defined here are available in Integration to be mapped to integration\
              \ request parameters or templates."
        requestModels:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "A key-value map specifying data schemas, represented by\
              \ Model resources, (as the mapped value) of the request payloads of\
              \ given content types (as the mapping key)."
        methodResponses:
          allOf:
          - $ref: '#/components/schemas/MapOfMethodResponse'
          - description: 'Gets a method response associated with a given HTTP status
              code. '
        methodIntegration:
          $ref: '#/components/schemas/Method_methodIntegration'
        authorizationScopes:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: "A list of authorization scopes configured on the method.\
              \ The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer\
              \ to authorize the method invocation. The authorization works by matching\
              \ the method scopes against the scopes parsed from the access token\
              \ in the incoming request. The method invocation is authorized if any\
              \ method scopes matches a claimed scope in the access token. Otherwise,\
              \ the invocation is not authorized. When the method scope is configured,\
              \ the client must provide an access token instead of an identity token\
              \ for authorization purposes."
      type: object
    MethodResponse:
      description: 'Represents a method response of a given HTTP status code returned
        to the client. The method response is passed from the back end through the
        associated integration response that can be transformed using a mapping template. '
      example:
        responseParameters: ""
        responseModels: ""
        statusCode: ""
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          - description: The method response's status code.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToBoolean'
          - description: "A key-value map specifying required or optional response\
              \ parameters that API Gateway can send back to the caller. A key defines\
              \ a method response header and the value specifies whether the associated\
              \ method response header is required or not. The expression of the key\
              \ must match the pattern <code>method.response.header.{name}</code>,\
              \ where <code>name</code> is a valid and unique header name. API Gateway\
              \ passes certain integration response data to the method response headers\
              \ specified here according to the mapping you prescribe in the API's\
              \ IntegrationResponse. The integration response data that can be mapped\
              \ include an integration response header expressed in <code>integration.response.header.{name}</code>,\
              \ a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>),\
              \ or a JSON expression from the back-end response payload in the form\
              \ of <code>integration.response.body.{JSON-expression}</code>, where\
              \ <code>JSON-expression</code> is a valid JSON expression without the\
              \ <code>$</code> prefix.)"
        responseModels:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Specifies the Model resources used for the response's content-type.\
              \ Response models are represented as a key/value map, with a content-type\
              \ as the key and a Model name as the value."
      type: object
    Template:
      description: Represents a mapping template used to transform a payload.
      example:
        value: ""
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The Apache Velocity Template Language (VTL) template content
              used for the template resource.
      type: object
    Models:
      description: Represents a collection of Model resources.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfModel'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    RequestValidators:
      description: A collection of RequestValidator resources of a given RestApi.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfRequestValidator'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    Resources:
      description: Represents a collection of Resource resources.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfResource'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    RestApis:
      description: Contains references to your APIs and links that guide you in how
        to interact with your collection. A collection offers a paginated view of
        your APIs.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfRestApi'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    SdkResponse:
      description: "The binary blob response to GetSdk, which contains the generated\
        \ SDK."
      example:
        body: ""
      properties:
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          - description: "The binary blob response to GetSdk, which contains the generated\
              \ SDK."
      type: object
    SdkType:
      description: A type of SDK that API Gateway can generate.
      example:
        description: ""
        id: ""
        configurationProperties: ""
        friendlyName: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of an SdkType instance.
        friendlyName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The user-friendly name of an SdkType instance.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of an SdkType.
        configurationProperties:
          allOf:
          - $ref: '#/components/schemas/ListOfSdkConfigurationProperty'
          - description: A list of configuration properties of an SdkType.
      type: object
    SdkTypes:
      description: The collection of SdkType instances.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfSdkType'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    Stages:
      description: A list of Stage resources that are associated with the ApiKey resource.
      example:
        item: ""
      properties:
        item:
          allOf:
          - $ref: '#/components/schemas/ListOfStage'
          - description: The current page of elements from this collection.
      type: object
    Tags:
      description: The collection of tags. Each tag element is associated with a given
        resource.
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: The collection of tags. Each tag element is associated with
              a given resource.
      type: object
    Usage:
      description: Represents the usage data of a usage plan.
      example:
        endDate: ""
        usagePlanId: ""
        position: position
        items: ""
        startDate: ""
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The plan Id associated with this usage data.
        startDate:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The starting date of the usage data.
        endDate:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The ending date of the usage data.
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/MapOfKeyUsages'
          - description: "The usage data, as daily logs of used and remaining quotas,\
              \ over the specified time interval indexed over the API keys in a usage\
              \ plan. For example, <code>{..., \"values\" : { \"{api_key}\" : [ [0,\
              \ 100], [10, 90], [100, 10]]}</code>, where <code>{api_key}</code> stands\
              \ for an API key value and the daily log entry is of the format <code>[used\
              \ quota, remaining quota]</code>."
            xml:
              name: values
      type: object
    UsagePlanKeys:
      description: "Represents the collection of usage plan keys added to usage plans\
        \ for the associated API keys and, possibly, other types of keys."
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfUsagePlanKey'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    UsagePlans:
      description: Represents a collection of usage plans for an AWS account.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfUsagePlan'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    VpcLinks:
      description: The collection of VPC links under the caller's account in a region.
      example:
        position: position
        items: ""
      properties:
        position:
          type: string
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfVpcLink'
          - description: The current page of elements from this collection.
            xml:
              name: item
      type: object
    ApiKeyIds:
      description: The identifier of an ApiKey used in a UsagePlan.
      example:
        warnings: ""
        ids: ""
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: A list of all the ApiKey identifiers.
        warnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: A list of warning messages.
      type: object
    DocumentationPartIds:
      description: A collection of the imported DocumentationPart identifiers.
      example:
        warnings: ""
        ids: ""
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: A list of the returned documentation part identifiers.
        warnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: A list of warning messages reported during import of documentation
              parts.
      type: object
    NullableBoolean:
      type: boolean
    TestInvokeAuthorizerResponse:
      description: Represents the response of the test invoke request for a custom
        Authorizer
      example:
        authorization: ""
        log: ""
        latency: ""
        claims: ""
        clientStatus: ""
        principalId: ""
        policy: ""
      properties:
        clientStatus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The HTTP status code that the client would have received.
              Value is 0 if the authorizer succeeded.
        log:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The API Gateway execution log for the test authorizer request.
        latency:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The execution latency of the test authorizer request.
        principalId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The principal identity returned by the Authorizer
        policy:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The JSON policy document returned by the Authorizer
        authorization:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToList'
          - description: The authorization response.
        claims:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "The open identity claims, with any supported custom attributes,\
              \ returned from the Cognito Your User Pool configured for the API."
      type: object
    TestInvokeMethodResponse:
      description: Represents the response of the test invoke request in the HTTP
        method.
      example:
        headers: ""
        multiValueHeaders: ""
        log: ""
        latency: ""
        body: ""
        status: ""
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The HTTP status code.
        body:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The body of the HTTP response.
        headers:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: The headers of the HTTP response.
        multiValueHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToList'
          - description: The headers of the HTTP response as a map from string to
              list of values.
        log:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The API Gateway execution log for the test invoke request.
        latency:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The execution latency of the test invoke request.
      type: object
    PatchOperation:
      description: "For more information about supported patch operations, see <a\
        \ href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
        >Patch Operations</a>."
      properties:
        op:
          allOf:
          - $ref: '#/components/schemas/Op'
          - description: "An update operation to be performed with this PATCH request.\
              \ The valid value can be add, remove, replace or copy. Not all valid\
              \ operations are supported for a given resource. Support of the operations\
              \ depends on specific operational contexts. Attempts to apply an unsupported\
              \ operation on a resource will return an error message.."
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The op operation's target, as identified by a JSON Pointer\
              \ value that references a location within the targeted resource. For\
              \ example, if the target resource has an updateable property of {\"\
              name\":\"value\"}, the path for this property is /name. If the name\
              \ property value is a JSON object (e.g., {\"name\": {\"child/name\"\
              : \"child-value\"}}), the path for the child/name property will be /name/child~1name.\
              \ Any slash (\"/\") character appearing in path names must be escaped\
              \ with \"~1\", as shown in the example above. Each op operation can\
              \ have only one path associated with it."
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The new target value of the update operation. It is applicable\
              \ for the add or replace operation. When using AWS CLI to update a property\
              \ of a JSON value, enclose the JSON object with a pair of single quotes\
              \ in a Linux shell, e.g., '{\"a\": ...}'."
        from:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The copy update operation's source as identified by a JSON-Pointer\
              \ value referencing the location within the targeted resource to copy\
              \ the value from. For example, to promote a canary deployment, you copy\
              \ the canary deployment ID to the affiliated deployment ID by calling\
              \ a PATCH request on a Stage resource with \"op\":\"copy\", \"from\"\
              :\"/canarySettings/deploymentId\" and \"path\":\"/deploymentId\"."
      type: object
    AccessLogSettings:
      description: "Access log settings, including the access log format and access\
        \ log destination ARN."
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "A single line format of the access logs of data, as specified\
              \ by selected $context variables. The format must include at least <code>$context.requestId</code>."
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The Amazon Resource Name (ARN) of the CloudWatch Logs log\
              \ group or Kinesis Data Firehose delivery stream to receive access logs.\
              \ If you specify a Kinesis Data Firehose delivery stream, the stream\
              \ name must begin with <code>amazon-apigateway-</code>."
      type: object
    ThrottleSettings:
      description: ' The API request rate limits.'
      properties:
        burstLimit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The API target request burst rate limit. This allows more
              requests through for a period of time than the target rate limit.
        rateLimit:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: The API target request rate limit.
      type: object
    Timestamp:
      format: date-time
      type: string
    ApiKeySourceType:
      enum:
      - HEADER
      - AUTHORIZER
      type: string
    ListOfApiKey:
      items:
        $ref: '#/components/schemas/ApiKey'
      type: array
    ApiKeysFormat:
      enum:
      - csv
      type: string
    MapOfApiStageThrottleSettings:
      additionalProperties:
        $ref: '#/components/schemas/ThrottleSettings'
      type: object
    AuthorizerType:
      description: "The authorizer type. Valid values are <code>TOKEN</code> for a\
        \ Lambda function using a single authorization token submitted in a custom\
        \ header, <code>REQUEST</code> for a Lambda function using incoming request\
        \ parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito\
        \ user pool."
      enum:
      - TOKEN
      - REQUEST
      - COGNITO_USER_POOLS
      type: string
    ListOfARNs:
      items:
        $ref: '#/components/schemas/ProviderARN'
      type: array
    NullableInteger:
      type: integer
    ListOfAuthorizer:
      items:
        $ref: '#/components/schemas/Authorizer'
      type: array
    ListOfBasePathMapping:
      items:
        $ref: '#/components/schemas/BasePathMapping'
      type: array
    Blob:
      type: string
    CacheClusterSize:
      description: Returns the size of the CacheCluster.
      enum:
      - "0.5"
      - "1.6"
      - "6.1"
      - "13.5"
      - "28.4"
      - "58.2"
      - "118"
      - "237"
      type: string
    CacheClusterStatus:
      description: Returns the status of the CacheCluster.
      enum:
      - CREATE_IN_PROGRESS
      - AVAILABLE
      - DELETE_IN_PROGRESS
      - NOT_AVAILABLE
      - FLUSH_IN_PROGRESS
      type: string
    CanarySettings:
      description: Configuration settings of a canary deployment.
      properties:
        percentTraffic:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: The percent (0-100) of traffic diverted to a canary deployment.
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The ID of the canary deployment.
        stageVariableOverrides:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Stage variables overridden for a canary release deployment,\
              \ including new stage variables introduced in the canary. These stage\
              \ variables are represented as a string-to-string map between stage\
              \ variable names and their values."
        useStageCache:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: A Boolean flag to indicate whether the canary deployment
              uses the stage cache or not.
      type: object
    ListOfClientCertificate:
      items:
        $ref: '#/components/schemas/ClientCertificate'
      type: array
    ConnectionType:
      enum:
      - INTERNET
      - VPC_LINK
      type: string
    ContentHandlingStrategy:
      enum:
      - CONVERT_TO_BINARY
      - CONVERT_TO_TEXT
      type: string
    ListOfStageKeys:
      items:
        $ref: '#/components/schemas/StageKey'
      type: array
    CreateApiKeyRequest:
      description: Request to create an ApiKey resource.
      example:
        generateDistinctId: ""
        name: ""
        customerId: ""
        description: ""
        stageKeys: ""
        value: ""
        enabled: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the ApiKey.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the ApiKey.
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specifies whether the ApiKey can be used by callers.
        generateDistinctId:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specifies whether (<code>true</code>) or not (<code>false</code>)
              the key identifier is distinct from the created API key value. This
              parameter is deprecated and should not be used.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Specifies a value of the API key.
        stageKeys:
          allOf:
          - $ref: '#/components/schemas/ListOfStageKeys'
          - description: DEPRECATED FOR USAGE PLANS - Specifies stages associated
              with the API key.
        customerId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "An AWS Marketplace customer identifier , when integrating\
              \ with the AWS SaaS Marketplace."
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "The key-value map of strings. The valid character set is\
              \ [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must\
              \ not start with <code>aws:</code>. The tag value can be up to 256 characters."
      title: CreateApiKeyRequest
      type: object
    CreateAuthorizerRequest:
      description: Request to add a new Authorizer to an existing RestApi resource.
      example:
        identitySource: ""
        identityValidationExpression: ""
        authorizerUri: ""
        authorizerCredentials: ""
        authorizerResultTtlInSeconds: ""
        name: ""
        providerARNs: ""
        type: ""
        authType: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the authorizer.
        type:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          - description: "The authorizer type. Valid values are <code>TOKEN</code>\
              \ for a Lambda function using a single authorization token submitted\
              \ in a custom header, <code>REQUEST</code> for a Lambda function using\
              \ incoming request parameters, and <code>COGNITO_USER_POOLS</code> for\
              \ using an Amazon Cognito user pool."
        providerARNs:
          allOf:
          - $ref: '#/components/schemas/ListOfARNs'
          - description: "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code>\
              \ authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>.\
              \ For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this\
              \ is not defined. "
        authType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Optional customer-defined field, used in OpenAPI imports\
              \ and exports without functional impact."
        authorizerUri:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the authorizer's Uniform Resource Identifier (URI).\
              \ For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must\
              \ be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>.\
              \ In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>,\
              \ where <code>{region}</code> is the same as the region hosting the\
              \ Lambda function, <code>path</code> indicates that the remaining substring\
              \ in the URI should be treated as the path to the resource, including\
              \ the initial <code>/</code>. For Lambda functions, this is usually\
              \ of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>."
        authorizerCredentials:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the required credentials as an IAM role for API\
              \ Gateway to invoke the authorizer. To specify an IAM role for API Gateway\
              \ to assume, use the role's Amazon Resource Name (ARN). To use resource-based\
              \ permissions on the Lambda function, specify null."
        identitySource:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The identity source for which authorization is requested.\
              \ For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer,\
              \ this is required and specifies the request header mapping expression\
              \ for the custom header holding the authorization token submitted by\
              \ the client. For example, if the token header name is <code>Auth</code>,\
              \ the header mapping expression is <code>method.request.header.Auth</code>.\
              \ For the <code>REQUEST</code> authorizer, this is required when authorization\
              \ caching is enabled. The value is a comma-separated string of one or\
              \ more mapping expressions of the specified request parameters. For\
              \ example, if an <code>Auth</code> header, a <code>Name</code> query\
              \ string parameter are defined as identity sources, this value is <code>method.request.header.Auth,\
              \ method.request.querystring.Name</code>. These parameters will be used\
              \ to derive the authorization caching key and to perform runtime validation\
              \ of the <code>REQUEST</code> authorizer by verifying all of the identity-related\
              \ request parameters are present, not null and non-empty. Only when\
              \ this is true does the authorizer invoke the authorizer Lambda function,\
              \ otherwise, it returns a 401 Unauthorized response without calling\
              \ the Lambda function. The valid value is a string of comma-separated\
              \ mapping expressions of the specified request parameters. When the\
              \ authorization caching is not enabled, this property is optional."
        identityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "A validation expression for the incoming identity token.\
              \ For <code>TOKEN</code> authorizers, this value is a regular expression.\
              \ For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will\
              \ match the <code>aud</code> field of the incoming token from the client\
              \ against the specified regular expression. It will invoke the authorizer's\
              \ Lambda function when there is a match. Otherwise, it will return a\
              \ 401 Unauthorized response without calling the Lambda function. The\
              \ validation expression does not apply to the <code>REQUEST</code> authorizer."
        authorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          - description: "The TTL in seconds of cached authorizer results. If it equals\
              \ 0, authorization caching is disabled. If it is greater than 0, API\
              \ Gateway will cache authorizer responses. If this field is not set,\
              \ the default value is 300. The maximum value is 3600, or 1 hour."
      required:
      - name
      - type
      title: CreateAuthorizerRequest
      type: object
    CreateBasePathMappingRequest:
      description: Requests API Gateway to create a new BasePathMapping resource.
      example:
        basePath: ""
        stage: ""
        restApiId: ""
      properties:
        basePath:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The base path name that callers of the API must provide as
              part of the URL after the domain name. This value must be unique for
              all of the mappings across a single API. Specify '(none)' if you do
              not want callers to specify a base path name after the domain name.
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The string identifier of the associated RestApi.
        stage:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the API's stage that you want to use for this
              mapping. Specify '(none)' if you want callers to explicitly specify
              the stage name after any base path name.
      required:
      - restApiId
      title: CreateBasePathMappingRequest
      type: object
    DeploymentCanarySettings:
      description: The input configuration for a canary deployment.
      properties:
        percentTraffic:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: The percentage (0.0-100.0) of traffic routed to the canary
              deployment.
        stageVariableOverrides:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: A stage variable overrides used for the canary release deployment.
              They can override existing stage variables or add new stage variables
              for the canary release deployment. These stage variables are represented
              as a string-to-string map between stage variable names and their values.
        useStageCache:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: A Boolean flag to indicate whether the canary release deployment
              uses the stage cache or not.
      type: object
    CreateDeploymentRequest:
      description: Requests API Gateway to create a Deployment resource.
      example:
        variables: ""
        stageName: ""
        stageDescription: ""
        description: ""
        cacheClusterSize: ""
        canarySettings:
          stageVariableOverrides: ""
          percentTraffic: ""
          useStageCache: ""
        cacheClusterEnabled: ""
        tracingEnabled: ""
      properties:
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the Stage resource for the Deployment resource
              to create.
        stageDescription:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the Stage resource for the Deployment
              resource to create.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description for the Deployment resource to create.
        cacheClusterEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          - description: Enables a cache cluster for the Stage resource specified
              in the input.
        cacheClusterSize:
          allOf:
          - $ref: '#/components/schemas/CacheClusterSize'
          - description: "The stage's cache capacity in GB. For more information about\
              \ choosing a cache size, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html\"\
              >Enabling API caching to enhance responsiveness</a>."
        variables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "A map that defines the stage variables for the Stage resource\
              \ that is associated with the new deployment. Variable names can have\
              \ alphanumeric and underscore characters, and the values must match\
              \ <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>."
        canarySettings:
          $ref: '#/components/schemas/CreateDeploymentRequest_canarySettings'
        tracingEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          - description: Specifies whether active tracing with X-ray is enabled for
              the Stage.
      title: CreateDeploymentRequest
      type: object
    DocumentationPartLocation:
      description: Specifies the target API entity to which the documentation applies.
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DocumentationPartType'
          - description: "The type of API entity to which the documentation content\
              \ applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>,\
              \ <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>,\
              \ <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>,\
              \ <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>.\
              \ Content inheritance does not apply to any entity of the <code>API</code>,\
              \ <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>,\
              \ <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type."
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The URL path of the target. It is a valid field for the\
              \ API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>,\
              \ <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>,\
              \ <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>.\
              \ The default value is <code>/</code> for the root resource. When an\
              \ applicable child entity inherits the content of another entity of\
              \ the same type with more general specifications of the other <code>location</code>\
              \ attributes, the child entity's <code>path</code> attribute must match\
              \ that of the parent entity as a prefix."
        method:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The HTTP verb of a method. It is a valid field for the API\
              \ entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>,\
              \ <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>,\
              \ <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>.\
              \ The default value is <code>*</code> for any method. When an applicable\
              \ child entity inherits the content of an entity of the same type with\
              \ more general specifications of the other <code>location</code> attributes,\
              \ the child entity's <code>method</code> attribute must match that of\
              \ the parent entity exactly."
        statusCode:
          allOf:
          - $ref: '#/components/schemas/DocumentationPartLocationStatusCode'
          - description: "The HTTP status code of a response. It is a valid field\
              \ for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>,\
              \ and <code>RESPONSE_BODY</code>. The default value is <code>*</code>\
              \ for any status code. When an applicable child entity inherits the\
              \ content of an entity of the same type with more general specifications\
              \ of the other <code>location</code> attributes, the child entity's\
              \ <code>statusCode</code> attribute must match that of the parent entity\
              \ exactly."
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The name of the targeted API entity. It is a valid and required\
              \ field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>,\
              \ <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>,\
              \ <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is\
              \ an invalid field for any other entity type."
      required:
      - type
      type: object
    CreateDocumentationPartRequest:
      description: Creates a new documentation part of a given API.
      example:
        location:
          path: ""
          method: ""
          name: ""
          type: ""
          statusCode: ""
        properties: ""
      properties:
        location:
          $ref: '#/components/schemas/CreateDocumentationPartRequest_location'
        properties:
          description: "The new documentation content map of the targeted API entity.\
            \ Enclosed key-value pairs are API-specific, but only OpenAPI-compliant\
            \ key-value pairs can be exported and, hence, published."
      required:
      - location
      - properties
      title: CreateDocumentationPartRequest
      type: object
    CreateDocumentationVersionRequest:
      description: Creates a new documentation version of a given API.
      example:
        stageName: ""
        documentationVersion: ""
        description: ""
      properties:
        documentationVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The version identifier of the new snapshot.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The stage name to be associated with the new documentation
              snapshot.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A description about the new documentation snapshot.
      required:
      - documentationVersion
      title: CreateDocumentationVersionRequest
      type: object
    EndpointConfiguration:
      description: 'The endpoint configuration to indicate the types of endpoints
        an API (RestApi) or its custom domain name (DomainName) has. '
      properties:
        types:
          allOf:
          - $ref: '#/components/schemas/ListOfEndpointType'
          - description: "A list of endpoint types of an API (RestApi) or its custom\
              \ domain name (DomainName). For an edge-optimized API and its custom\
              \ domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional\
              \ API and its custom domain name, the endpoint type is <code>REGIONAL</code>.\
              \ For a private API, the endpoint type is <code>PRIVATE</code>."
        vpcEndpointIds:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: A list of VpcEndpointIds of an API (RestApi) against which
              to create Route53 ALIASes. It is only supported for <code>PRIVATE</code>
              endpoint type.
      type: object
    SecurityPolicy:
      enum:
      - TLS_1_0
      - TLS_1_2
      type: string
    MutualTlsAuthenticationInput:
      description: "The mutual TLS authentication configuration for a custom domain\
        \ name. If specified, API Gateway performs two-way authentication between\
        \ the client and the server. Clients must present a trusted certificate to\
        \ access your API."
      example:
        truststoreVersion: ""
        truststoreUri: ""
      properties:
        truststoreUri:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "An Amazon S3 URL that specifies the truststore for mutual\
              \ TLS authentication, for example <code>s3://bucket-name/key-name</code>.\
              \ The truststore can contain certificates from public or private certificate\
              \ authorities. To update the truststore, upload a new version to S3,\
              \ and then update your custom domain name to use the new version. To\
              \ update the truststore, you must have permissions to access the S3\
              \ object."
        truststoreVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The version of the S3 object that contains your truststore.\
              \ To specify a version, you must have versioning enabled for the S3\
              \ bucket"
      type: object
    CreateDomainNameRequest:
      description: A request to create a new domain name.
      example:
        certificateChain: ""
        certificateName: ""
        securityPolicy: ""
        tags: ""
        certificateArn: ""
        certificatePrivateKey: ""
        regionalCertificateArn: ""
        domainName: ""
        endpointConfiguration:
          types: ""
          vpcEndpointIds: ""
        ownershipVerificationCertificateArn: ""
        regionalCertificateName: ""
        mutualTlsAuthentication:
          truststoreVersion: ""
          truststoreUri: ""
        certificateBody: ""
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the DomainName resource.
        certificateName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The user-friendly name of the certificate that will be used
              by edge-optimized endpoint for this domain name.
        certificateBody:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "[Deprecated] The body of the server certificate that will\
              \ be used by edge-optimized endpoint for this domain name provided by\
              \ your certificate authority."
        certificatePrivateKey:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "[Deprecated] Your edge-optimized endpoint's domain name\
              \ certificate's private key."
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "[Deprecated] The intermediate certificates and optionally\
              \ the root certificate, one after the other without any blank lines,\
              \ used by an edge-optimized endpoint for this domain name. If you include\
              \ the root certificate, your certificate chain must start with intermediate\
              \ certificates and end with the root certificate. Use the intermediate\
              \ certificates that were provided by your certificate authority. Do\
              \ not include any intermediaries that are not in the chain of trust\
              \ path."
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The reference to an AWS-managed certificate that will be
              used by edge-optimized endpoint for this domain name. AWS Certificate
              Manager is the only supported source.
        regionalCertificateName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The user-friendly name of the certificate that will be used
              by regional endpoint for this domain name.
        regionalCertificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The reference to an AWS-managed certificate that will be
              used by regional endpoint for this domain name. AWS Certificate Manager
              is the only supported source.
        endpointConfiguration:
          $ref: '#/components/schemas/DomainName_endpointConfiguration'
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "The key-value map of strings. The valid character set is\
              \ [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must\
              \ not start with <code>aws:</code>. The tag value can be up to 256 characters."
        securityPolicy:
          allOf:
          - $ref: '#/components/schemas/SecurityPolicy'
          - description: The Transport Layer Security (TLS) version + cipher suite
              for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
        mutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthenticationInput'
        ownershipVerificationCertificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The ARN of the public certificate issued by ACM to validate
              ownership of your custom domain. Only required when configuring mutual
              TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
      required:
      - domainName
      title: CreateDomainNameRequest
      type: object
    CreateModelRequest:
      description: Request to add a new Model to an existing RestApi resource.
      example:
        schema: ""
        name: ""
        description: ""
        contentType: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the model. Must be alphanumeric.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the model.
        schema:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The schema for the model. For <code>application/json</code>\
              \ models, this should be JSON schema draft 4 model."
        contentType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The content-type for the model.
      required:
      - contentType
      - name
      title: CreateModelRequest
      type: object
    CreateRequestValidatorRequest:
      description: Creates a RequestValidator of a given RestApi.
      example:
        validateRequestBody: ""
        name: ""
        validateRequestParameters: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the to-be-created RequestValidator.
        validateRequestBody:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: A Boolean flag to indicate whether to validate request body
              according to the configured model schema for the method (<code>true</code>)
              or not (<code>false</code>).
        validateRequestParameters:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "A Boolean flag to indicate whether to validate request parameters,\
              \ <code>true</code>, or not <code>false</code>."
      title: CreateRequestValidatorRequest
      type: object
    CreateResourceRequest:
      description: Requests API Gateway to create a Resource resource.
      example:
        pathPart: ""
      properties:
        pathPart:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The last path segment for this resource.
      required:
      - pathPart
      title: CreateResourceRequest
      type: object
    CreateRestApiRequest:
      description: The POST Request to add a new RestApi resource to your collection.
      example:
        disableExecuteApiEndpoint: ""
        binaryMediaTypes: ""
        apiKeySource: ""
        name: ""
        cloneFrom: ""
        minimumCompressionSize: ""
        endpointConfiguration:
          types: ""
          vpcEndpointIds: ""
        description: ""
        version: ""
        policy: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the RestApi.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the RestApi.
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A version identifier for the API.
        cloneFrom:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The ID of the RestApi that you want to clone from.
        binaryMediaTypes:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: "The list of binary media types supported by the RestApi.\
              \ By default, the RestApi supports only UTF-8-encoded text payloads."
        minimumCompressionSize:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          - description: "A nullable integer that is used to enable compression (with\
              \ non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable\
              \ compression (with a null value) on an API. When compression is enabled,\
              \ compression or decompression is not applied on the payload if the\
              \ payload size is smaller than this value. Setting it to zero allows\
              \ compression for any payload size."
        apiKeySource:
          allOf:
          - $ref: '#/components/schemas/ApiKeySourceType'
          - description: "The source of the API key for metering requests according\
              \ to a usage plan. Valid values are: &gt;<code>HEADER</code> to read\
              \ the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code>\
              \ to read the API key from the <code>UsageIdentifierKey</code> from\
              \ a custom authorizer."
        endpointConfiguration:
          $ref: '#/components/schemas/RestApi_endpointConfiguration'
        policy:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A stringified JSON policy document that applies to this RestApi
              regardless of the caller and Method configuration.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "The key-value map of strings. The valid character set is\
              \ [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must\
              \ not start with <code>aws:</code>. The tag value can be up to 256 characters."
        disableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Specifies whether clients can invoke your API by using the\
              \ default <code>execute-api</code> endpoint. By default, clients can\
              \ invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code>\
              \ endpoint. To require that clients use a custom domain name to invoke\
              \ your API, disable the default endpoint"
      required:
      - name
      title: CreateRestApiRequest
      type: object
    CreateStageRequest:
      description: Requests API Gateway to create a Stage resource.
      example:
        variables: ""
        stageName: ""
        documentationVersion: ""
        deploymentId: ""
        description: ""
        cacheClusterSize: ""
        canarySettings:
          stageVariableOverrides: ""
          percentTraffic: ""
          deploymentId: ""
          useStageCache: ""
        cacheClusterEnabled: ""
        tracingEnabled: ""
        tags: ""
      properties:
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The name for the Stage resource. Stage names can only contain\
              \ alphanumeric characters, hyphens, and underscores. Maximum length\
              \ is 128 characters."
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of the Deployment resource for the Stage resource.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the Stage resource.
        cacheClusterEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Whether cache clustering is enabled for the stage.
        cacheClusterSize:
          allOf:
          - $ref: '#/components/schemas/CacheClusterSize'
          - description: "The stage's cache capacity in GB. For more information about\
              \ choosing a cache size, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html\"\
              >Enabling API caching to enhance responsiveness</a>."
        variables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "A map that defines the stage variables for the new Stage\
              \ resource. Variable names can have alphanumeric and underscore characters,\
              \ and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>."
        documentationVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The version of the associated API documentation.
        canarySettings:
          $ref: '#/components/schemas/CreateStageRequest_canarySettings'
        tracingEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specifies whether active tracing with X-ray is enabled for
              the Stage.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "The key-value map of strings. The valid character set is\
              \ [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must\
              \ not start with <code>aws:</code>. The tag value can be up to 256 characters."
      required:
      - deploymentId
      - stageName
      title: CreateStageRequest
      type: object
    CreateUsagePlanKeyRequest:
      description: The POST request to create a usage plan key for adding an existing
        API key to a usage plan.
      example:
        keyId: ""
        keyType: ""
      properties:
        keyId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of a UsagePlanKey resource for a plan customer.
        keyType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The type of a UsagePlanKey resource for a plan customer.
      required:
      - keyId
      - keyType
      title: CreateUsagePlanKeyRequest
      type: object
    ListOfApiStage:
      items:
        $ref: '#/components/schemas/ApiStage'
      type: array
    QuotaSettings:
      description: Quotas configured for a usage plan.
      properties:
        limit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The target maximum number of requests that can be made in
              a given time period.
        offset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The number of requests subtracted from the given limit in
              the initial time period.
        period:
          allOf:
          - $ref: '#/components/schemas/QuotaPeriodType'
          - description: "The time period in which the limit applies. Valid values\
              \ are \"DAY\", \"WEEK\" or \"MONTH\"."
      type: object
    CreateUsagePlanRequest:
      description: "The POST request to create a usage plan with the name, description,\
        \ throttle limits and quota limits, as well as the associated API stages,\
        \ specified in the payload."
      example:
        throttle:
          burstLimit: ""
          rateLimit: ""
        quota:
          period: ""
          offset: ""
          limit: ""
        name: ""
        description: ""
        apiStages: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the usage plan.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the usage plan.
        apiStages:
          allOf:
          - $ref: '#/components/schemas/ListOfApiStage'
          - description: The associated API stages of the usage plan.
        throttle:
          $ref: '#/components/schemas/CreateUsagePlanRequest_throttle'
        quota:
          $ref: '#/components/schemas/CreateUsagePlanRequest_quota'
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "The key-value map of strings. The valid character set is\
              \ [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must\
              \ not start with <code>aws:</code>. The tag value can be up to 256 characters."
      required:
      - name
      title: CreateUsagePlanRequest
      type: object
    CreateVpcLinkRequest:
      description: "Creates a VPC link, under the caller's account in a selected region,\
        \ in an asynchronous operation that typically takes 2-4 minutes to complete\
        \ and become operational. The caller must have permissions to create and update\
        \ VPC Endpoint services."
      example:
        name: ""
        description: ""
        targetArns: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name used to label and identify the VPC link.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the VPC link.
        targetArns:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: The ARN of the network load balancer of the VPC targeted
              by the VPC link. The network load balancer must be owned by the same
              AWS account of the API owner.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "The key-value map of strings. The valid character set is\
              \ [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must\
              \ not start with <code>aws:</code>. The tag value can be up to 256 characters."
      required:
      - name
      - targetArns
      title: CreateVpcLinkRequest
      type: object
    DeleteApiKeyRequest:
      description: A request to delete the ApiKey resource.
      properties: {}
      title: DeleteApiKeyRequest
      type: object
    DeleteAuthorizerRequest:
      description: Request to delete an existing Authorizer resource.
      properties: {}
      title: DeleteAuthorizerRequest
      type: object
    DeleteBasePathMappingRequest:
      description: A request to delete the BasePathMapping resource.
      properties: {}
      title: DeleteBasePathMappingRequest
      type: object
    DeleteClientCertificateRequest:
      description: A request to delete the ClientCertificate resource.
      properties: {}
      title: DeleteClientCertificateRequest
      type: object
    DeleteDeploymentRequest:
      description: Requests API Gateway to delete a Deployment resource.
      properties: {}
      title: DeleteDeploymentRequest
      type: object
    DeleteDocumentationPartRequest:
      description: Deletes an existing documentation part of an API.
      properties: {}
      title: DeleteDocumentationPartRequest
      type: object
    DeleteDocumentationVersionRequest:
      description: Deletes an existing documentation version of an API.
      properties: {}
      title: DeleteDocumentationVersionRequest
      type: object
    DeleteDomainNameRequest:
      description: A request to delete the DomainName resource.
      properties: {}
      title: DeleteDomainNameRequest
      type: object
    GatewayResponseType:
      enum:
      - DEFAULT_4XX
      - DEFAULT_5XX
      - RESOURCE_NOT_FOUND
      - UNAUTHORIZED
      - INVALID_API_KEY
      - ACCESS_DENIED
      - AUTHORIZER_FAILURE
      - AUTHORIZER_CONFIGURATION_ERROR
      - INVALID_SIGNATURE
      - EXPIRED_TOKEN
      - MISSING_AUTHENTICATION_TOKEN
      - INTEGRATION_FAILURE
      - INTEGRATION_TIMEOUT
      - API_CONFIGURATION_ERROR
      - UNSUPPORTED_MEDIA_TYPE
      - BAD_REQUEST_PARAMETERS
      - BAD_REQUEST_BODY
      - REQUEST_TOO_LARGE
      - THROTTLED
      - QUOTA_EXCEEDED
      - WAF_FILTERED
      type: string
    DeleteGatewayResponseRequest:
      description: Clears any customization of a GatewayResponse of a specified response
        type on the given RestApi and resets it with the default settings.
      properties: {}
      title: DeleteGatewayResponseRequest
      type: object
    DeleteIntegrationRequest:
      description: Represents a delete integration request.
      properties: {}
      title: DeleteIntegrationRequest
      type: object
    StatusCode:
      description: The status code.
      pattern: "[1-5]\\d\\d"
      type: string
    DeleteIntegrationResponseRequest:
      description: Represents a delete integration response request.
      properties: {}
      title: DeleteIntegrationResponseRequest
      type: object
    DeleteMethodRequest:
      description: Request to delete an existing Method resource.
      properties: {}
      title: DeleteMethodRequest
      type: object
    DeleteMethodResponseRequest:
      description: A request to delete an existing MethodResponse resource.
      properties: {}
      title: DeleteMethodResponseRequest
      type: object
    DeleteModelRequest:
      description: Request to delete an existing model in an existing RestApi resource.
      properties: {}
      title: DeleteModelRequest
      type: object
    DeleteRequestValidatorRequest:
      description: Deletes a specified RequestValidator of a given RestApi.
      properties: {}
      title: DeleteRequestValidatorRequest
      type: object
    DeleteResourceRequest:
      description: Request to delete a Resource.
      properties: {}
      title: DeleteResourceRequest
      type: object
    DeleteRestApiRequest:
      description: Request to delete the specified API from your collection.
      properties: {}
      title: DeleteRestApiRequest
      type: object
    DeleteStageRequest:
      description: Requests API Gateway to delete a Stage resource.
      properties: {}
      title: DeleteStageRequest
      type: object
    DeleteUsagePlanKeyRequest:
      description: The DELETE request to delete a usage plan key and remove the underlying
        API key from the associated usage plan.
      properties: {}
      title: DeleteUsagePlanKeyRequest
      type: object
    DeleteUsagePlanRequest:
      description: The DELETE request to delete a usage plan of a given plan Id.
      properties: {}
      title: DeleteUsagePlanRequest
      type: object
    DeleteVpcLinkRequest:
      description: Deletes an existing VpcLink of a specified identifier.
      properties: {}
      title: DeleteVpcLinkRequest
      type: object
    PathToMapOfMethodSnapshot:
      additionalProperties:
        $ref: '#/components/schemas/MapOfMethodSnapshot'
      type: object
    ListOfDeployment:
      items:
        $ref: '#/components/schemas/Deployment'
      type: array
    ListOfDocumentationPart:
      items:
        $ref: '#/components/schemas/DocumentationPart'
      type: array
    ListOfDocumentationVersion:
      items:
        $ref: '#/components/schemas/DocumentationVersion'
      type: array
    DomainNameStatus:
      enum:
      - AVAILABLE
      - UPDATING
      - PENDING
      - PENDING_CERTIFICATE_REIMPORT
      - PENDING_OWNERSHIP_VERIFICATION
      type: string
    MutualTlsAuthentication:
      description: "The mutual TLS authentication configuration for a custom domain\
        \ name. If specified, API Gateway performs two-way authentication between\
        \ the client and the server. Clients must present a trusted certificate to\
        \ access your API."
      properties:
        truststoreUri:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "An Amazon S3 URL that specifies the truststore for mutual\
              \ TLS authentication, for example <code>s3://bucket-name/key-name</code>.\
              \ The truststore can contain certificates from public or private certificate\
              \ authorities. To update the truststore, upload a new version to S3,\
              \ and then update your custom domain name to use the new version. To\
              \ update the truststore, you must have permissions to access the S3\
              \ object."
        truststoreVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The version of the S3 object that contains your truststore.\
              \ To specify a version, you must have versioning enabled for the S3\
              \ bucket."
        truststoreWarnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: "A list of warnings that API Gateway returns while processing\
              \ your truststore. Invalid certificates produce warnings. Mutual TLS\
              \ is still enabled, but some clients might not be able to access your\
              \ API. To resolve warnings, upload a new truststore to S3, and then\
              \ update you domain name to use the new version."
      type: object
    ListOfDomainName:
      items:
        $ref: '#/components/schemas/DomainName'
      type: array
    EndpointType:
      description: "The endpoint type. The valid values are <code>EDGE</code> for\
        \ edge-optimized API setup, most suitable for mobile applications; <code>REGIONAL</code>\
        \ for regional API endpoint setup, most suitable for calling from AWS Region;\
        \ and <code>PRIVATE</code> for private APIs."
      enum:
      - REGIONAL
      - EDGE
      - PRIVATE
      type: string
    FlushStageAuthorizersCacheRequest:
      description: Request to flush authorizer cache entries on a specified stage.
      properties: {}
      title: FlushStageAuthorizersCacheRequest
      type: object
    FlushStageCacheRequest:
      description: Requests API Gateway to flush a stage's cache.
      properties: {}
      title: FlushStageCacheRequest
      type: object
    ListOfGatewayResponse:
      items:
        $ref: '#/components/schemas/GatewayResponse'
      type: array
    GenerateClientCertificateRequest:
      description: A request to generate a ClientCertificate resource.
      example:
        description: ""
        tags: ""
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of the ClientCertificate.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "The key-value map of strings. The valid character set is\
              \ [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must\
              \ not start with <code>aws:</code>. The tag value can be up to 256 characters."
      title: GenerateClientCertificateRequest
      type: object
    GetAccountRequest:
      description: Requests API Gateway to get information about the current Account
        resource.
      properties: {}
      title: GetAccountRequest
      type: object
    GetApiKeyRequest:
      description: A request to get information about the current ApiKey resource.
      properties: {}
      title: GetApiKeyRequest
      type: object
    GetApiKeysRequest:
      description: A request to get information about the current ApiKeys resource.
      properties: {}
      title: GetApiKeysRequest
      type: object
    GetAuthorizerRequest:
      description: Request to describe an existing Authorizer resource.
      properties: {}
      title: GetAuthorizerRequest
      type: object
    GetAuthorizersRequest:
      description: Request to describe an existing Authorizers resource.
      properties: {}
      title: GetAuthorizersRequest
      type: object
    GetBasePathMappingRequest:
      description: Request to describe a BasePathMapping resource.
      properties: {}
      title: GetBasePathMappingRequest
      type: object
    GetBasePathMappingsRequest:
      description: A request to get information about a collection of BasePathMapping
        resources.
      properties: {}
      title: GetBasePathMappingsRequest
      type: object
    GetClientCertificateRequest:
      description: A request to get information about the current ClientCertificate
        resource.
      properties: {}
      title: GetClientCertificateRequest
      type: object
    GetClientCertificatesRequest:
      description: A request to get information about a collection of ClientCertificate
        resources.
      properties: {}
      title: GetClientCertificatesRequest
      type: object
    GetDeploymentRequest:
      description: Requests API Gateway to get information about a Deployment resource.
      properties: {}
      title: GetDeploymentRequest
      type: object
    GetDeploymentsRequest:
      description: Requests API Gateway to get information about a Deployments collection.
      properties: {}
      title: GetDeploymentsRequest
      type: object
    GetDocumentationPartRequest:
      description: Gets a specified documentation part of a given API.
      properties: {}
      title: GetDocumentationPartRequest
      type: object
    LocationStatusType:
      enum:
      - DOCUMENTED
      - UNDOCUMENTED
      type: string
    GetDocumentationPartsRequest:
      description: "Gets the documentation parts of an API. The result may be filtered\
        \ by the type, name, or path of API entities (targets)."
      properties: {}
      title: GetDocumentationPartsRequest
      type: object
    GetDocumentationVersionRequest:
      description: Gets a documentation snapshot of an API.
      properties: {}
      title: GetDocumentationVersionRequest
      type: object
    GetDocumentationVersionsRequest:
      description: Gets the documentation versions of an API.
      properties: {}
      title: GetDocumentationVersionsRequest
      type: object
    GetDomainNameRequest:
      description: Request to get the name of a DomainName resource.
      properties: {}
      title: GetDomainNameRequest
      type: object
    GetDomainNamesRequest:
      description: Request to describe a collection of DomainName resources.
      properties: {}
      title: GetDomainNamesRequest
      type: object
    GetExportRequest:
      description: Request a new export of a RestApi for a particular Stage.
      properties: {}
      title: GetExportRequest
      type: object
    GetGatewayResponseRequest:
      description: Gets a GatewayResponse of a specified response type on the given
        RestApi.
      properties: {}
      title: GetGatewayResponseRequest
      type: object
    GetGatewayResponsesRequest:
      description: "Gets the GatewayResponses collection on the given RestApi. If\
        \ an API developer has not added any definitions for gateway responses, the\
        \ result will be the API Gateway-generated default GatewayResponses collection\
        \ for the supported response types."
      properties: {}
      title: GetGatewayResponsesRequest
      type: object
    GetIntegrationRequest:
      description: Represents a request to get the integration configuration.
      properties: {}
      title: GetIntegrationRequest
      type: object
    GetIntegrationResponseRequest:
      description: Represents a get integration response request.
      properties: {}
      title: GetIntegrationResponseRequest
      type: object
    GetMethodRequest:
      description: Request to describe an existing Method resource.
      properties: {}
      title: GetMethodRequest
      type: object
    GetMethodResponseRequest:
      description: Request to describe a MethodResponse resource.
      properties: {}
      title: GetMethodResponseRequest
      type: object
    GetModelRequest:
      description: Request to list information about a model in an existing RestApi
        resource.
      properties: {}
      title: GetModelRequest
      type: object
    GetModelTemplateRequest:
      description: Request to generate a sample mapping template used to transform
        the payload.
      properties: {}
      title: GetModelTemplateRequest
      type: object
    GetModelsRequest:
      description: Request to list existing Models defined for a RestApi resource.
      properties: {}
      title: GetModelsRequest
      type: object
    GetRequestValidatorRequest:
      description: Gets a RequestValidator of a given RestApi.
      properties: {}
      title: GetRequestValidatorRequest
      type: object
    GetRequestValidatorsRequest:
      description: Gets the RequestValidators collection of a given RestApi.
      properties: {}
      title: GetRequestValidatorsRequest
      type: object
    GetResourceRequest:
      description: Request to list information about a resource.
      properties: {}
      title: GetResourceRequest
      type: object
    GetResourcesRequest:
      description: Request to list information about a collection of resources.
      properties: {}
      title: GetResourcesRequest
      type: object
    GetRestApiRequest:
      description: 'The GET request to list an existing RestApi defined for your collection. '
      properties: {}
      title: GetRestApiRequest
      type: object
    GetRestApisRequest:
      description: The GET request to list existing RestApis defined for your collection.
      properties: {}
      title: GetRestApisRequest
      type: object
    GetSdkRequest:
      description: Request a new generated client SDK for a RestApi and Stage.
      properties: {}
      title: GetSdkRequest
      type: object
    GetSdkTypeRequest:
      description: Get an SdkType instance.
      properties: {}
      title: GetSdkTypeRequest
      type: object
    GetSdkTypesRequest:
      description: Get the SdkTypes collection.
      properties: {}
      title: GetSdkTypesRequest
      type: object
    GetStageRequest:
      description: Requests API Gateway to get information about a Stage resource.
      properties: {}
      title: GetStageRequest
      type: object
    GetStagesRequest:
      description: Requests API Gateway to get information about one or more Stage
        resources.
      properties: {}
      title: GetStagesRequest
      type: object
    GetTagsRequest:
      description: Gets the Tags collection for a given resource.
      properties: {}
      title: GetTagsRequest
      type: object
    GetUsagePlanKeyRequest:
      description: The GET request to get a usage plan key of a given key identifier.
      properties: {}
      title: GetUsagePlanKeyRequest
      type: object
    GetUsagePlanKeysRequest:
      description: The GET request to get all the usage plan keys representing the
        API keys added to a specified usage plan.
      properties: {}
      title: GetUsagePlanKeysRequest
      type: object
    GetUsagePlanRequest:
      description: The GET request to get a usage plan of a given plan identifier.
      properties: {}
      title: GetUsagePlanRequest
      type: object
    GetUsagePlansRequest:
      description: The GET request to get all the usage plans of the caller's account.
      properties: {}
      title: GetUsagePlansRequest
      type: object
    GetUsageRequest:
      description: The GET request to get the usage data of a usage plan in a specified
        time interval.
      properties: {}
      title: GetUsageRequest
      type: object
    GetVpcLinkRequest:
      description: Gets a specified VPC link under the caller's account in a region.
      properties: {}
      title: GetVpcLinkRequest
      type: object
    GetVpcLinksRequest:
      description: Gets the VpcLinks collection under the caller's account in a selected
        region.
      properties: {}
      title: GetVpcLinksRequest
      type: object
    ImportApiKeysRequest:
      description: "The POST request to import API keys from an external source, such\
        \ as a CSV-formatted file."
      example:
        body: ""
      properties:
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          - description: "The payload of the POST request to import API keys. For\
              \ the payload format, see API Key File Format."
      required:
      - body
      title: ImportApiKeysRequest
      type: object
    PutMode:
      enum:
      - merge
      - overwrite
      type: string
    ImportDocumentationPartsRequest:
      description: "Import documentation parts from an external (e.g., OpenAPI) definition\
        \ file. "
      example:
        body: ""
      properties:
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          - description: "Raw byte array representing the to-be-imported documentation\
              \ parts. To import from an OpenAPI file, this is a JSON object."
      required:
      - body
      title: ImportDocumentationPartsRequest
      type: object
    ImportRestApiRequest:
      description: A POST request to import an API to API Gateway using an input of
        an API definition file.
      example:
        body: ""
      properties:
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          - description: "The POST request body containing external API definitions.\
              \ Currently, only OpenAPI definition JSON/YAML files are supported.\
              \ The maximum size of the API definition file is 6MB."
      required:
      - body
      title: ImportRestApiRequest
      type: object
    IntegrationType:
      description: 'The integration type. The valid value is <code>HTTP</code> for
        integrating an API method with an HTTP backend; <code>AWS</code> with any
        AWS service endpoints; <code>MOCK</code> for testing without actually invoking
        the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration;
        <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. '
      enum:
      - HTTP
      - AWS
      - MOCK
      - HTTP_PROXY
      - AWS_PROXY
      type: string
    MapOfIntegrationResponse:
      additionalProperties:
        $ref: '#/components/schemas/IntegrationResponse'
      type: object
    TlsConfig:
      description: Specifies the TLS configuration for an integration.
      example:
        insecureSkipVerification: ""
      properties:
        insecureSkipVerification:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "<p>Specifies whether or not API Gateway skips verification\
              \ that the certificate for an integration endpoint is issued by a supported\
              \ certificate authority. This isn’t recommended, but it enables you\
              \ to use certificates that are signed by private certificate authorities,\
              \ or certificates that are self-signed. If enabled, API Gateway still\
              \ performs basic certificate validation, which includes checking the\
              \ certificate's expiration date, hostname, and presence of a root certificate\
              \ authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code>\
              \ integrations.</p> <important> <p>Enabling <code>insecureSkipVerification</code>\
              \ isn't recommended, especially for integrations with public HTTPS endpoints.\
              \ If you enable <code>insecureSkipVerification</code>, you increase\
              \ the risk of man-in-the-middle attacks.</p> </important>"
      type: object
    Long:
      type: integer
    ListOfLong:
      items:
        $ref: '#/components/schemas/Long'
      type: array
    ListOfModel:
      items:
        $ref: '#/components/schemas/Model'
      type: array
    ListOfPatchOperation:
      description: A list of operations describing the updates to apply to the specified
        resource. The patches are applied in the order specified in the list.
      items:
        $ref: '#/components/schemas/PatchOperation'
      type: array
    ListOfRequestValidator:
      items:
        $ref: '#/components/schemas/RequestValidator'
      type: array
    ListOfResource:
      items:
        $ref: '#/components/schemas/Resource'
      type: array
    ListOfRestApi:
      items:
        $ref: '#/components/schemas/RestApi'
      type: array
    SdkConfigurationProperty:
      description: A configuration property of an SDK type.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of a an SdkType configuration property.
        friendlyName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The user-friendly name of an SdkType configuration property.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The description of an SdkType configuration property.
        required:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: A boolean flag of an SdkType configuration property to indicate
              if the associated SDK configuration property is required (<code>true</code>)
              or not (<code>false</code>).
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The default value of an SdkType configuration property.
      type: object
    ListOfSdkConfigurationProperty:
      items:
        $ref: '#/components/schemas/SdkConfigurationProperty'
      type: array
    ListOfSdkType:
      items:
        $ref: '#/components/schemas/SdkType'
      type: array
    ListOfStage:
      items:
        $ref: '#/components/schemas/Stage'
      type: array
    ListOfUsage:
      items:
        $ref: '#/components/schemas/ListOfLong'
      type: array
    ListOfUsagePlan:
      items:
        $ref: '#/components/schemas/UsagePlan'
      type: array
    ListOfUsagePlanKey:
      items:
        $ref: '#/components/schemas/UsagePlanKey'
      type: array
    ListOfVpcLink:
      items:
        $ref: '#/components/schemas/VpcLink'
      type: array
    MapOfKeyUsages:
      additionalProperties:
        $ref: '#/components/schemas/ListOfUsage'
      type: object
    MapOfMethod:
      additionalProperties:
        $ref: '#/components/schemas/Method'
      type: object
    MapOfMethodResponse:
      additionalProperties:
        $ref: '#/components/schemas/MethodResponse'
      type: object
    MethodSetting:
      description: Specifies the method setting properties.
      properties:
        metricsEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Specifies whether Amazon CloudWatch metrics are enabled\
              \ for this method. The PATCH path for this setting is <code>/{method_setting_key}/metrics/enabled</code>,\
              \ and the value is a Boolean."
        loggingLevel:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the logging level for this method, which affects\
              \ the log entries pushed to Amazon CloudWatch Logs. The PATCH path for\
              \ this setting is <code>/{method_setting_key}/logging/loglevel</code>,\
              \ and the available levels are <code>OFF</code>, <code>ERROR</code>,\
              \ and <code>INFO</code>. Choose <code>ERROR</code> to write only error-level\
              \ entries to CloudWatch Logs, or choose <code>INFO</code> to include\
              \ all <code>ERROR</code> events as well as extra informational events."
        dataTraceEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Specifies whether data trace logging is enabled for this\
              \ method, which affects the log entries pushed to Amazon CloudWatch\
              \ Logs. The PATCH path for this setting is <code>/{method_setting_key}/logging/dataTrace</code>,\
              \ and the value is a Boolean."
        throttlingBurstLimit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: "Specifies the throttling burst limit. The PATCH path for\
              \ this setting is <code>/{method_setting_key}/throttling/burstLimit</code>,\
              \ and the value is an integer."
        throttlingRateLimit:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: "Specifies the throttling rate limit. The PATCH path for\
              \ this setting is <code>/{method_setting_key}/throttling/rateLimit</code>,\
              \ and the value is a double."
        cachingEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Specifies whether responses should be cached and returned\
              \ for requests. A cache cluster must be enabled on the stage for responses\
              \ to be cached. The PATCH path for this setting is <code>/{method_setting_key}/caching/enabled</code>,\
              \ and the value is a Boolean."
        cacheTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: "Specifies the time to live (TTL), in seconds, for cached\
              \ responses. The higher the TTL, the longer the response will be cached.\
              \ The PATCH path for this setting is <code>/{method_setting_key}/caching/ttlInSeconds</code>,\
              \ and the value is an integer."
        cacheDataEncrypted:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Specifies whether the cached responses are encrypted. The\
              \ PATCH path for this setting is <code>/{method_setting_key}/caching/dataEncrypted</code>,\
              \ and the value is a Boolean."
        requireAuthorizationForCacheControl:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Specifies whether authorization is required for a cache\
              \ invalidation request. The PATCH path for this setting is <code>/{method_setting_key}/caching/requireAuthorizationForCacheControl</code>,\
              \ and the value is a Boolean."
        unauthorizedCacheControlHeaderStrategy:
          allOf:
          - $ref: '#/components/schemas/UnauthorizedCacheControlHeaderStrategy'
          - description: "Specifies how to handle unauthorized requests for cache\
              \ invalidation. The PATCH path for this setting is <code>/{method_setting_key}/caching/unauthorizedCacheControlHeaderStrategy</code>,\
              \ and the available values are <code>FAIL_WITH_403</code>, <code>SUCCEED_WITH_RESPONSE_HEADER</code>,\
              \ <code>SUCCEED_WITHOUT_RESPONSE_HEADER</code>."
      type: object
    MapOfMethodSettings:
      additionalProperties:
        $ref: '#/components/schemas/MethodSetting'
      type: object
    MethodSnapshot:
      description: "Represents a summary of a Method resource, given a particular\
        \ date and time."
      properties:
        authorizationType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The method's authorization type. Valid values are <code>NONE</code>\
              \ for open access, <code>AWS_IAM</code> for using AWS IAM permissions,\
              \ <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code>\
              \ for using a Cognito user pool."
        apiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specifies whether the method requires a valid ApiKey.
      type: object
    MapOfMethodSnapshot:
      additionalProperties:
        $ref: '#/components/schemas/MethodSnapshot'
      type: object
    MapOfStringToBoolean:
      additionalProperties:
        $ref: '#/components/schemas/NullableBoolean'
      type: object
    MapOfStringToList:
      additionalProperties:
        $ref: '#/components/schemas/ListOfString'
      type: object
    UnauthorizedCacheControlHeaderStrategy:
      enum:
      - FAIL_WITH_403
      - SUCCEED_WITH_RESPONSE_HEADER
      - SUCCEED_WITHOUT_RESPONSE_HEADER
      type: string
    Op:
      enum:
      - add
      - remove
      - replace
      - move
      - copy
      - test
      type: string
    PutGatewayResponseRequest:
      description: Creates a customization of a GatewayResponse of a specified response
        type and status code on the given RestApi.
      example:
        responseParameters: ""
        responseTemplates: ""
        statusCode: ""
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          - description: The HTTP status code of the GatewayResponse.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Response parameters (paths, query strings and headers) of\
              \ the GatewayResponse as a string-to-string map of key-value pairs."
        responseTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: Response templates of the GatewayResponse as a string-to-string
              map of key-value pairs.
      title: PutGatewayResponseRequest
      type: object
    PutIntegrationRequest:
      description: Sets up a method's integration.
      example:
        integrationHttpMethod: ""
        credentials: ""
        requestParameters: ""
        cacheKeyParameters: ""
        contentHandling: ""
        type: ""
        cacheNamespace: ""
        uri: ""
        connectionType: ""
        timeoutInMillis: ""
        tlsConfig:
          insecureSkipVerification: ""
        requestTemplates: ""
        passthroughBehavior: ""
        connectionId: ""
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          - description: Specifies a put integration input's type.
        integrationHttpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The HTTP method for the integration.
            xml:
              name: httpMethod
        uri:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies Uniform Resource Identifier (URI) of the integration\
              \ endpoint. For HTTP or <code>HTTP_PROXY</code> integrations, the URI\
              \ must be a fully formed, encoded HTTP(S) URL according to the RFC-3986\
              \ specification, for either standard integration, where <code>connectionType</code>\
              \ is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code>\
              \ is <code>VPC_LINK</code>. For a private HTTP integration, the URI\
              \ is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code>\
              \ integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}.\
              \ Here, {Region} is the API Gateway region (e.g., us-east-1); {service}\
              \ is the name of the integrated Amazon Web Services service (e.g., s3);\
              \ and {subdomain} is a designated subdomain supported by certain Amazon\
              \ Web Services service for fast host-name lookup. action can be used\
              \ for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}...\
              \ query string. The ensuing {service_api} refers to a supported action\
              \ {name} plus any required input parameters. Alternatively, path can\
              \ be used for an Amazon Web Services service path-based API. The ensuing\
              \ service_api refers to the path to an Amazon Web Services service resource,\
              \ including the region of the integrated Amazon Web Services service,\
              \ if applicable. For example, for integration with the S3 API of <code>GetObject</code>,\
              \ the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code>\
              \ or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>."
        connectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          - description: The type of the network connection to the integration endpoint.
              The valid value is <code>INTERNET</code> for connections through the
              public routable internet or <code>VPC_LINK</code> for private connections
              between API Gateway and a network load balancer in a VPC. The default
              value is <code>INTERNET</code>.
        connectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The ID of the VpcLink used for the integration. Specify this
              value only if you specify <code>VPC_LINK</code> as the connection type.
        credentials:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Specifies whether credentials are required for a put integration.
        requestParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "A key-value map specifying request parameters that are passed\
              \ from the method request to the back end. The key is an integration\
              \ request parameter name and the associated value is a method request\
              \ parameter value or static value that must be enclosed within single\
              \ quotes and pre-encoded as required by the back end. The method request\
              \ parameter value must match the pattern of <code>method.request.{location}.{name}</code>,\
              \ where <code>location</code> is <code>querystring</code>, <code>path</code>,\
              \ or <code>header</code> and <code>name</code> must be a valid and unique\
              \ method request parameter name."
        requestTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Represents a map of Velocity templates that are applied\
              \ on the request payload based on the value of the Content-Type header\
              \ sent by the client. The content type value is the key in this map,\
              \ and the template (as a String) is the value."
        passthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the pass-through behavior for incoming requests\
              \ based on the Content-Type header in the request, and the available\
              \ mapping templates specified as the <code>requestTemplates</code> property\
              \ on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>,\
              \ <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. "
        cacheNamespace:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies a group of related cached parameters. By default,\
              \ API Gateway uses the resource ID as the <code>cacheNamespace</code>.\
              \ You can specify the same <code>cacheNamespace</code> across resources\
              \ to return the same cached data for requests to different resources."
        cacheKeyParameters:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: "A list of request parameters whose values API Gateway caches.\
              \ To be valid values for <code>cacheKeyParameters</code>, these parameters\
              \ must also be specified for Method <code>requestParameters</code>."
        contentHandling:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Specifies how to handle request payload content type\
              \ conversions. Supported values are <code>CONVERT_TO_BINARY</code> and\
              \ <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If\
              \ this property is not defined, the request payload will be passed through\
              \ from the method request to integration request without modification,\
              \ provided that the <code>passthroughBehavior</code> is configured to\
              \ support payload pass-through.</p>"
        timeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          - description: "Custom timeout between 50 and 29,000 milliseconds. The default\
              \ value is 29,000 milliseconds or 29 seconds."
        tlsConfig:
          $ref: '#/components/schemas/TlsConfig'
      required:
      - type
      title: PutIntegrationRequest
      type: object
    PutIntegrationResponseRequest:
      description: Represents a put integration response request.
      example:
        responseParameters: ""
        selectionPattern: ""
        contentHandling: ""
        responseTemplates: ""
      properties:
        selectionPattern:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Specifies the selection pattern of a put integration response.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "A key-value map specifying response parameters that are\
              \ passed to the method response from the back end. The key is a method\
              \ response header parameter name and the mapped value is an integration\
              \ response header value, a static value enclosed within a pair of single\
              \ quotes, or a JSON expression from the integration response body. The\
              \ mapping key must match the pattern of <code>method.response.header.{name}</code>,\
              \ where <code>name</code> is a valid and unique header name. The mapped\
              \ non-static value must match the pattern of <code>integration.response.header.{name}</code>\
              \ or <code>integration.response.body.{JSON-expression}</code>, where\
              \ <code>name</code> must be a valid and unique response header name\
              \ and <code>JSON-expression</code> a valid JSON expression without the\
              \ <code>$</code> prefix."
        responseTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: Specifies a put integration response's templates.
        contentHandling:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          - description: "<p>Specifies how to handle response payload content type\
              \ conversions. Supported values are <code>CONVERT_TO_BINARY</code> and\
              \ <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If\
              \ this property is not defined, the response payload will be passed\
              \ through from the integration response to the method response without\
              \ modification.</p>"
      title: PutIntegrationResponseRequest
      type: object
    PutMethodRequest:
      description: Request to add a method to an existing Resource resource.
      example:
        requestValidatorId: ""
        authorizerId: ""
        apiKeyRequired: ""
        requestModels: ""
        authorizationScopes: ""
        requestParameters: ""
        authorizationType: ""
        operationName: ""
      properties:
        authorizationType:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The method's authorization type. Valid values are <code>NONE</code>\
              \ for open access, <code>AWS_IAM</code> for using AWS IAM permissions,\
              \ <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code>\
              \ for using a Cognito user pool."
        authorizerId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the identifier of an Authorizer to use on this\
              \ Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer\
              \ identifier is generated by API Gateway when you created the authorizer."
        apiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specifies whether the method required a valid ApiKey.
        operationName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "A human-friendly operation identifier for the method. For\
              \ example, you can assign the <code>operationName</code> of <code>ListPets</code>\
              \ for the <code>GET /pets</code> method in the <code>PetStore</code>\
              \ example."
        requestParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToBoolean'
          - description: "A key-value map defining required or optional method request\
              \ parameters that can be accepted by API Gateway. A key defines a method\
              \ request parameter name matching the pattern of <code>method.request.{location}.{name}</code>,\
              \ where <code>location</code> is <code>querystring</code>, <code>path</code>,\
              \ or <code>header</code> and <code>name</code> is a valid and unique\
              \ parameter name. The value associated with the key is a Boolean flag\
              \ indicating whether the parameter is required (<code>true</code>) or\
              \ optional (<code>false</code>). The method request parameter names\
              \ defined here are available in Integration to be mapped to integration\
              \ request parameters or body-mapping templates."
        requestModels:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Specifies the Model resources used for the request's content\
              \ type. Request models are represented as a key/value map, with a content\
              \ type as the key and a Model name as the value."
        requestValidatorId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier of a RequestValidator for validating the method
              request.
        authorizationScopes:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: "A list of authorization scopes configured on the method.\
              \ The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer\
              \ to authorize the method invocation. The authorization works by matching\
              \ the method scopes against the scopes parsed from the access token\
              \ in the incoming request. The method invocation is authorized if any\
              \ method scopes matches a claimed scope in the access token. Otherwise,\
              \ the invocation is not authorized. When the method scope is configured,\
              \ the client must provide an access token instead of an identity token\
              \ for authorization purposes."
      required:
      - authorizationType
      title: PutMethodRequest
      type: object
    PutMethodResponseRequest:
      description: Request to add a MethodResponse to an existing Method resource.
      example:
        responseParameters: ""
        responseModels: ""
      properties:
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToBoolean'
          - description: "A key-value map specifying required or optional response\
              \ parameters that API Gateway can send back to the caller. A key defines\
              \ a method response header name and the associated value is a Boolean\
              \ flag indicating whether the method response parameter is required\
              \ or not. The method response header names must match the pattern of\
              \ <code>method.response.header.{name}</code>, where <code>name</code>\
              \ is a valid and unique header name. The response parameter names defined\
              \ here are available in the integration response to be mapped from an\
              \ integration response header expressed in <code>integration.response.header.{name}</code>,\
              \ a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>),\
              \ or a JSON expression from the back-end response payload in the form\
              \ of <code>integration.response.body.{JSON-expression}</code>, where\
              \ <code>JSON-expression</code> is a valid JSON expression without the\
              \ <code>$</code> prefix.)"
        responseModels:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Specifies the Model resources used for the response's content\
              \ type. Response models are represented as a key/value map, with a content\
              \ type as the key and a Model name as the value."
      title: PutMethodResponseRequest
      type: object
    PutRestApiRequest:
      description: "A PUT request to update an existing API, with external API definitions\
        \ specified as the request body."
      example:
        body: ""
      properties:
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          - description: "The PUT request body containing external API definitions.\
              \ Currently, only OpenAPI definition JSON/YAML files are supported.\
              \ The maximum size of the API definition file is 6MB."
      required:
      - body
      title: PutRestApiRequest
      type: object
    TagResourceRequest:
      description: Adds or updates a tag on a given resource.
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "The key-value map of strings. The valid character set is\
              \ [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must\
              \ not start with <code>aws:</code>. The tag value can be up to 256 characters."
      required:
      - tags
      title: TagResourceRequest
      type: object
    TestInvokeAuthorizerRequest:
      description: Make a request to simulate the invocation of an Authorizer.
      example:
        pathWithQueryString: ""
        headers: ""
        multiValueHeaders: ""
        body: ""
        stageVariables: ""
        additionalContext: ""
      properties:
        headers:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "A key-value map of headers to simulate an incoming invocation\
              \ request. This is where the incoming authorization token, or identity\
              \ source, should be specified."
        multiValueHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToList'
          - description: "The headers as a map from string to list of values to simulate\
              \ an incoming invocation request. This is where the incoming authorization\
              \ token, or identity source, may be specified."
        pathWithQueryString:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The URI path, including query string, of the simulated invocation\
              \ request. Use this to specify path parameters and query string parameters."
        body:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The simulated request body of an incoming invocation request.
        stageVariables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: A key-value map of stage variables to simulate an invocation
              on a deployed Stage.
        additionalContext:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: A key-value map of additional context variables.
      title: TestInvokeAuthorizerRequest
      type: object
    TestInvokeMethodRequest:
      description: Make a request to simulate the invocation of a Method.
      example:
        pathWithQueryString: ""
        headers: ""
        multiValueHeaders: ""
        clientCertificateId: ""
        body: ""
        stageVariables: ""
      properties:
        pathWithQueryString:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The URI path, including query string, of the simulated invocation\
              \ request. Use this to specify path parameters and query string parameters."
        body:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The simulated request body of an incoming invocation request.
        headers:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: A key-value map of headers to simulate an incoming invocation
              request.
        multiValueHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToList'
          - description: The headers as a map from string to list of values to simulate
              an incoming invocation request.
        clientCertificateId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A ClientCertificate identifier to use in the test invocation.
              API Gateway will use the certificate when making the HTTPS request to
              the defined back-end endpoint.
        stageVariables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: A key-value map of stage variables to simulate an invocation
              on a deployed Stage.
      title: TestInvokeMethodRequest
      type: object
    UntagResourceRequest:
      description: Removes a tag from a given resource.
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateAccountRequest:
      description: Requests API Gateway to change information about the current Account
        resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateAccountRequest
      type: object
    UpdateApiKeyRequest:
      description: A request to change information about an ApiKey resource.
      example:
        patchOperations: ""
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateApiKeyRequest
      type: object
    UpdateAuthorizerRequest:
      description: Request to update an existing Authorizer resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateAuthorizerRequest
      type: object
    UpdateBasePathMappingRequest:
      description: A request to change information about the BasePathMapping resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateBasePathMappingRequest
      type: object
    UpdateClientCertificateRequest:
      description: A request to change information about an ClientCertificate resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateClientCertificateRequest
      type: object
    UpdateDeploymentRequest:
      description: Requests API Gateway to change information about a Deployment resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateDeploymentRequest
      type: object
    UpdateDocumentationPartRequest:
      description: Updates an existing documentation part of a given API.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateDocumentationPartRequest
      type: object
    UpdateDocumentationVersionRequest:
      description: Updates an existing documentation version of an API.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateDocumentationVersionRequest
      type: object
    UpdateDomainNameRequest:
      description: A request to change information about the DomainName resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateDomainNameRequest
      type: object
    UpdateGatewayResponseRequest:
      description: Updates a GatewayResponse of a specified response type on the given
        RestApi.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateGatewayResponseRequest
      type: object
    UpdateIntegrationRequest:
      description: Represents an update integration request.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateIntegrationRequest
      type: object
    UpdateIntegrationResponseRequest:
      description: Represents an update integration response request.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateIntegrationResponseRequest
      type: object
    UpdateMethodRequest:
      description: Request to update an existing Method resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateMethodRequest
      type: object
    UpdateMethodResponseRequest:
      description: A request to update an existing MethodResponse resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateMethodResponseRequest
      type: object
    UpdateModelRequest:
      description: Request to update an existing model in an existing RestApi resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateModelRequest
      type: object
    UpdateRequestValidatorRequest:
      description: Updates a RequestValidator of a given RestApi.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateRequestValidatorRequest
      type: object
    UpdateResourceRequest:
      description: Request to change information about a Resource resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateResourceRequest
      type: object
    UpdateRestApiRequest:
      description: Request to update an existing RestApi resource in your collection.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateRestApiRequest
      type: object
    UpdateStageRequest:
      description: Requests API Gateway to change information about a Stage resource.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateStageRequest
      type: object
    UpdateUsagePlanRequest:
      description: The PATCH request to update a usage plan of a given plan Id.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateUsagePlanRequest
      type: object
    UpdateUsageRequest:
      description: The PATCH request to grant a temporary extension to the remaining
        quota of a usage plan associated with a specified API key.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateUsageRequest
      type: object
    UpdateVpcLinkRequest:
      description: Updates an existing VpcLink of a specified identifier.
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          - description: "For more information about supported patch operations, see\
              \ <a href=\"https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html\"\
              >Patch Operations</a>."
      title: UpdateVpcLinkRequest
      type: object
    VpcLinkStatus:
      enum:
      - AVAILABLE
      - PENDING
      - DELETING
      - FAILED
      type: string
    CreateApiKey_request:
      properties:
        name:
          description: The name of the ApiKey.
          type: string
        description:
          description: The description of the ApiKey.
          type: string
        enabled:
          description: Specifies whether the ApiKey can be used by callers.
          type: boolean
        generateDistinctId:
          description: Specifies whether (<code>true</code>) or not (<code>false</code>)
            the key identifier is distinct from the created API key value. This parameter
            is deprecated and should not be used.
          type: boolean
        value:
          description: Specifies a value of the API key.
          type: string
        stageKeys:
          description: DEPRECATED FOR USAGE PLANS - Specifies stages associated with
            the API key.
          items:
            $ref: '#/components/schemas/StageKey'
          type: array
        customerId:
          description: "An AWS Marketplace customer identifier , when integrating\
            \ with the AWS SaaS Marketplace."
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].\
            \ The tag key can be up to 128 characters and must not start with <code>aws:</code>.\
            \ The tag value can be up to 256 characters."
          type: object
      type: object
    CreateAuthorizer_request:
      properties:
        name:
          description: The name of the authorizer.
          type: string
        type:
          description: "The authorizer type. Valid values are <code>TOKEN</code> for\
            \ a Lambda function using a single authorization token submitted in a\
            \ custom header, <code>REQUEST</code> for a Lambda function using incoming\
            \ request parameters, and <code>COGNITO_USER_POOLS</code> for using an\
            \ Amazon Cognito user pool."
          enum:
          - TOKEN
          - REQUEST
          - COGNITO_USER_POOLS
          type: string
        providerARNs:
          description: "A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code>\
            \ authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>.\
            \ For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is\
            \ not defined. "
          items:
            $ref: '#/components/schemas/ProviderARN'
          type: array
        authType:
          description: "Optional customer-defined field, used in OpenAPI imports and\
            \ exports without functional impact."
          type: string
        authorizerUri:
          description: "Specifies the authorizer's Uniform Resource Identifier (URI).\
            \ For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must\
            \ be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>.\
            \ In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>,\
            \ where <code>{region}</code> is the same as the region hosting the Lambda\
            \ function, <code>path</code> indicates that the remaining substring in\
            \ the URI should be treated as the path to the resource, including the\
            \ initial <code>/</code>. For Lambda functions, this is usually of the\
            \ form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>."
          type: string
        authorizerCredentials:
          description: "Specifies the required credentials as an IAM role for API\
            \ Gateway to invoke the authorizer. To specify an IAM role for API Gateway\
            \ to assume, use the role's Amazon Resource Name (ARN). To use resource-based\
            \ permissions on the Lambda function, specify null."
          type: string
        identitySource:
          description: "The identity source for which authorization is requested.\
            \ For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer,\
            \ this is required and specifies the request header mapping expression\
            \ for the custom header holding the authorization token submitted by the\
            \ client. For example, if the token header name is <code>Auth</code>,\
            \ the header mapping expression is <code>method.request.header.Auth</code>.\
            \ For the <code>REQUEST</code> authorizer, this is required when authorization\
            \ caching is enabled. The value is a comma-separated string of one or\
            \ more mapping expressions of the specified request parameters. For example,\
            \ if an <code>Auth</code> header, a <code>Name</code> query string parameter\
            \ are defined as identity sources, this value is <code>method.request.header.Auth,\
            \ method.request.querystring.Name</code>. These parameters will be used\
            \ to derive the authorization caching key and to perform runtime validation\
            \ of the <code>REQUEST</code> authorizer by verifying all of the identity-related\
            \ request parameters are present, not null and non-empty. Only when this\
            \ is true does the authorizer invoke the authorizer Lambda function, otherwise,\
            \ it returns a 401 Unauthorized response without calling the Lambda function.\
            \ The valid value is a string of comma-separated mapping expressions of\
            \ the specified request parameters. When the authorization caching is\
            \ not enabled, this property is optional."
          type: string
        identityValidationExpression:
          description: "A validation expression for the incoming identity token. For\
            \ <code>TOKEN</code> authorizers, this value is a regular expression.\
            \ For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match\
            \ the <code>aud</code> field of the incoming token from the client against\
            \ the specified regular expression. It will invoke the authorizer's Lambda\
            \ function when there is a match. Otherwise, it will return a 401 Unauthorized\
            \ response without calling the Lambda function. The validation expression\
            \ does not apply to the <code>REQUEST</code> authorizer."
          type: string
        authorizerResultTtlInSeconds:
          description: "The TTL in seconds of cached authorizer results. If it equals\
            \ 0, authorization caching is disabled. If it is greater than 0, API Gateway\
            \ will cache authorizer responses. If this field is not set, the default\
            \ value is 300. The maximum value is 3600, or 1 hour."
          type: integer
      required:
      - name
      - type
      type: object
    CreateBasePathMapping_request:
      properties:
        basePath:
          description: The base path name that callers of the API must provide as
            part of the URL after the domain name. This value must be unique for all
            of the mappings across a single API. Specify '(none)' if you do not want
            callers to specify a base path name after the domain name.
          type: string
        restApiId:
          description: The string identifier of the associated RestApi.
          type: string
        stage:
          description: The name of the API's stage that you want to use for this mapping.
            Specify '(none)' if you want callers to explicitly specify the stage name
            after any base path name.
          type: string
      required:
      - restApiId
      type: object
    CreateDeployment_request_canarySettings:
      description: The input configuration for a canary deployment.
      properties:
        percentTraffic:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: The percentage (0.0-100.0) of traffic routed to the canary
              deployment.
        stageVariableOverrides:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: A stage variable overrides used for the canary release deployment.
              They can override existing stage variables or add new stage variables
              for the canary release deployment. These stage variables are represented
              as a string-to-string map between stage variable names and their values.
        useStageCache:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: A Boolean flag to indicate whether the canary release deployment
              uses the stage cache or not.
      type: object
    CreateDeployment_request:
      properties:
        stageName:
          description: The name of the Stage resource for the Deployment resource
            to create.
          type: string
        stageDescription:
          description: The description of the Stage resource for the Deployment resource
            to create.
          type: string
        description:
          description: The description for the Deployment resource to create.
          type: string
        cacheClusterEnabled:
          description: Enables a cache cluster for the Stage resource specified in
            the input.
          type: boolean
        cacheClusterSize:
          description: Returns the size of the CacheCluster.
          enum:
          - "0.5"
          - "1.6"
          - "6.1"
          - "13.5"
          - "28.4"
          - "58.2"
          - "118"
          - "237"
          type: string
        variables:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "A map that defines the stage variables for the Stage resource\
            \ that is associated with the new deployment. Variable names can have\
            \ alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>."
          type: object
        canarySettings:
          $ref: '#/components/schemas/CreateDeployment_request_canarySettings'
        tracingEnabled:
          description: Specifies whether active tracing with X-ray is enabled for
            the Stage.
          type: boolean
      type: object
    ImportDocumentationParts_request:
      properties:
        body:
          description: "Raw byte array representing the to-be-imported documentation\
            \ parts. To import from an OpenAPI file, this is a JSON object."
          type: string
      required:
      - body
      type: object
    CreateDocumentationPart_request_location:
      description: Specifies the target API entity to which the documentation applies.
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DocumentationPartType'
          - description: "The type of API entity to which the documentation content\
              \ applies. Valid values are <code>API</code>, <code>AUTHORIZER</code>,\
              \ <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>,\
              \ <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>,\
              \ <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>.\
              \ Content inheritance does not apply to any entity of the <code>API</code>,\
              \ <code>AUTHORIZER</code>, <code>METHOD</code>, <code>MODEL</code>,\
              \ <code>REQUEST_BODY</code>, or <code>RESOURCE</code> type."
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The URL path of the target. It is a valid field for the\
              \ API entity types of <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>,\
              \ <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>,\
              \ <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>.\
              \ The default value is <code>/</code> for the root resource. When an\
              \ applicable child entity inherits the content of another entity of\
              \ the same type with more general specifications of the other <code>location</code>\
              \ attributes, the child entity's <code>path</code> attribute must match\
              \ that of the parent entity as a prefix."
        method:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The HTTP verb of a method. It is a valid field for the API\
              \ entity types of <code>METHOD</code>, <code>PATH_PARAMETER</code>,\
              \ <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>,\
              \ <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>.\
              \ The default value is <code>*</code> for any method. When an applicable\
              \ child entity inherits the content of an entity of the same type with\
              \ more general specifications of the other <code>location</code> attributes,\
              \ the child entity's <code>method</code> attribute must match that of\
              \ the parent entity exactly."
        statusCode:
          allOf:
          - $ref: '#/components/schemas/DocumentationPartLocationStatusCode'
          - description: "The HTTP status code of a response. It is a valid field\
              \ for the API entity types of <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>,\
              \ and <code>RESPONSE_BODY</code>. The default value is <code>*</code>\
              \ for any status code. When an applicable child entity inherits the\
              \ content of an entity of the same type with more general specifications\
              \ of the other <code>location</code> attributes, the child entity's\
              \ <code>statusCode</code> attribute must match that of the parent entity\
              \ exactly."
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The name of the targeted API entity. It is a valid and required\
              \ field for the API entity types of <code>AUTHORIZER</code>, <code>MODEL</code>,\
              \ <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>,\
              \ <code>REQUEST_BODY</code> and <code>RESPONSE_HEADER</code>. It is\
              \ an invalid field for any other entity type."
      type: object
    CreateDocumentationPart_request:
      properties:
        location:
          $ref: '#/components/schemas/CreateDocumentationPart_request_location'
        properties:
          description: "The new documentation content map of the targeted API entity.\
            \ Enclosed key-value pairs are API-specific, but only OpenAPI-compliant\
            \ key-value pairs can be exported and, hence, published."
          type: string
      required:
      - location
      - properties
      type: object
    CreateDocumentationVersion_request:
      properties:
        documentationVersion:
          description: The version identifier of the new snapshot.
          type: string
        stageName:
          description: The stage name to be associated with the new documentation
            snapshot.
          type: string
        description:
          description: A description about the new documentation snapshot.
          type: string
      required:
      - documentationVersion
      type: object
    CreateDomainName_request_endpointConfiguration:
      description: 'The endpoint configuration to indicate the types of endpoints
        an API (RestApi) or its custom domain name (DomainName) has. '
      properties:
        types:
          allOf:
          - $ref: '#/components/schemas/ListOfEndpointType'
          - description: "A list of endpoint types of an API (RestApi) or its custom\
              \ domain name (DomainName). For an edge-optimized API and its custom\
              \ domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional\
              \ API and its custom domain name, the endpoint type is <code>REGIONAL</code>.\
              \ For a private API, the endpoint type is <code>PRIVATE</code>."
        vpcEndpointIds:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          - description: A list of VpcEndpointIds of an API (RestApi) against which
              to create Route53 ALIASes. It is only supported for <code>PRIVATE</code>
              endpoint type.
      type: object
    CreateDomainName_request_mutualTlsAuthentication:
      description: "The mutual TLS authentication configuration for a custom domain\
        \ name. If specified, API Gateway performs two-way authentication between\
        \ the client and the server. Clients must present a trusted certificate to\
        \ access your API."
      properties:
        truststoreUri:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "An Amazon S3 URL that specifies the truststore for mutual\
              \ TLS authentication, for example <code>s3://bucket-name/key-name</code>.\
              \ The truststore can contain certificates from public or private certificate\
              \ authorities. To update the truststore, upload a new version to S3,\
              \ and then update your custom domain name to use the new version. To\
              \ update the truststore, you must have permissions to access the S3\
              \ object."
        truststoreVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The version of the S3 object that contains your truststore.\
              \ To specify a version, you must have versioning enabled for the S3\
              \ bucket"
      type: object
    CreateDomainName_request:
      properties:
        domainName:
          description: The name of the DomainName resource.
          type: string
        certificateName:
          description: The user-friendly name of the certificate that will be used
            by edge-optimized endpoint for this domain name.
          type: string
        certificateBody:
          description: "[Deprecated] The body of the server certificate that will\
            \ be used by edge-optimized endpoint for this domain name provided by\
            \ your certificate authority."
          type: string
        certificatePrivateKey:
          description: "[Deprecated] Your edge-optimized endpoint's domain name certificate's\
            \ private key."
          type: string
        certificateChain:
          description: "[Deprecated] The intermediate certificates and optionally\
            \ the root certificate, one after the other without any blank lines, used\
            \ by an edge-optimized endpoint for this domain name. If you include the\
            \ root certificate, your certificate chain must start with intermediate\
            \ certificates and end with the root certificate. Use the intermediate\
            \ certificates that were provided by your certificate authority. Do not\
            \ include any intermediaries that are not in the chain of trust path."
          type: string
        certificateArn:
          description: The reference to an AWS-managed certificate that will be used
            by edge-optimized endpoint for this domain name. AWS Certificate Manager
            is the only supported source.
          type: string
        regionalCertificateName:
          description: The user-friendly name of the certificate that will be used
            by regional endpoint for this domain name.
          type: string
        regionalCertificateArn:
          description: The reference to an AWS-managed certificate that will be used
            by regional endpoint for this domain name. AWS Certificate Manager is
            the only supported source.
          type: string
        endpointConfiguration:
          $ref: '#/components/schemas/CreateDomainName_request_endpointConfiguration'
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].\
            \ The tag key can be up to 128 characters and must not start with <code>aws:</code>.\
            \ The tag value can be up to 256 characters."
          type: object
        securityPolicy:
          description: The Transport Layer Security (TLS) version + cipher suite for
            this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
          enum:
          - TLS_1_0
          - TLS_1_2
          type: string
        mutualTlsAuthentication:
          $ref: '#/components/schemas/CreateDomainName_request_mutualTlsAuthentication'
        ownershipVerificationCertificateArn:
          description: The ARN of the public certificate issued by ACM to validate
            ownership of your custom domain. Only required when configuring mutual
            TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
          type: string
      required:
      - domainName
      type: object
    CreateModel_request:
      properties:
        name:
          description: The name of the model. Must be alphanumeric.
          type: string
        description:
          description: The description of the model.
          type: string
        schema:
          description: "The schema for the model. For <code>application/json</code>\
            \ models, this should be JSON schema draft 4 model."
          type: string
        contentType:
          description: The content-type for the model.
          type: string
      required:
      - contentType
      - name
      type: object
    CreateRequestValidator_request:
      properties:
        name:
          description: The name of the to-be-created RequestValidator.
          type: string
        validateRequestBody:
          description: A Boolean flag to indicate whether to validate request body
            according to the configured model schema for the method (<code>true</code>)
            or not (<code>false</code>).
          type: boolean
        validateRequestParameters:
          description: "A Boolean flag to indicate whether to validate request parameters,\
            \ <code>true</code>, or not <code>false</code>."
          type: boolean
      type: object
    CreateResource_request:
      properties:
        pathPart:
          description: The last path segment for this resource.
          type: string
      required:
      - pathPart
      type: object
    CreateRestApi_request:
      properties:
        name:
          description: The name of the RestApi.
          type: string
        description:
          description: The description of the RestApi.
          type: string
        version:
          description: A version identifier for the API.
          type: string
        cloneFrom:
          description: The ID of the RestApi that you want to clone from.
          type: string
        binaryMediaTypes:
          description: "The list of binary media types supported by the RestApi. By\
            \ default, the RestApi supports only UTF-8-encoded text payloads."
          items:
            $ref: '#/components/schemas/String'
          type: array
        minimumCompressionSize:
          description: "A nullable integer that is used to enable compression (with\
            \ non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable\
            \ compression (with a null value) on an API. When compression is enabled,\
            \ compression or decompression is not applied on the payload if the payload\
            \ size is smaller than this value. Setting it to zero allows compression\
            \ for any payload size."
          type: integer
        apiKeySource:
          description: "The source of the API key for metering requests according\
            \ to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the\
            \ API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code>\
            \ to read the API key from the <code>UsageIdentifierKey</code> from a\
            \ custom authorizer."
          enum:
          - HEADER
          - AUTHORIZER
          type: string
        endpointConfiguration:
          $ref: '#/components/schemas/CreateDomainName_request_endpointConfiguration'
        policy:
          description: A stringified JSON policy document that applies to this RestApi
            regardless of the caller and Method configuration.
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].\
            \ The tag key can be up to 128 characters and must not start with <code>aws:</code>.\
            \ The tag value can be up to 256 characters."
          type: object
        disableExecuteApiEndpoint:
          description: "Specifies whether clients can invoke your API by using the\
            \ default <code>execute-api</code> endpoint. By default, clients can invoke\
            \ your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code>\
            \ endpoint. To require that clients use a custom domain name to invoke\
            \ your API, disable the default endpoint"
          type: boolean
      required:
      - name
      type: object
    CreateStage_request_canarySettings:
      description: Configuration settings of a canary deployment.
      properties:
        percentTraffic:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: The percent (0-100) of traffic diverted to a canary deployment.
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The ID of the canary deployment.
        stageVariableOverrides:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          - description: "Stage variables overridden for a canary release deployment,\
              \ including new stage variables introduced in the canary. These stage\
              \ variables are represented as a string-to-string map between stage\
              \ variable names and their values."
        useStageCache:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: A Boolean flag to indicate whether the canary deployment
              uses the stage cache or not.
      type: object
    CreateStage_request:
      properties:
        stageName:
          description: "The name for the Stage resource. Stage names can only contain\
            \ alphanumeric characters, hyphens, and underscores. Maximum length is\
            \ 128 characters."
          type: string
        deploymentId:
          description: The identifier of the Deployment resource for the Stage resource.
          type: string
        description:
          description: The description of the Stage resource.
          type: string
        cacheClusterEnabled:
          description: Whether cache clustering is enabled for the stage.
          type: boolean
        cacheClusterSize:
          description: Returns the size of the CacheCluster.
          enum:
          - "0.5"
          - "1.6"
          - "6.1"
          - "13.5"
          - "28.4"
          - "58.2"
          - "118"
          - "237"
          type: string
        variables:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "A map that defines the stage variables for the new Stage resource.\
            \ Variable names can have alphanumeric and underscore characters, and\
            \ the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>."
          type: object
        documentationVersion:
          description: The version of the associated API documentation.
          type: string
        canarySettings:
          $ref: '#/components/schemas/CreateStage_request_canarySettings'
        tracingEnabled:
          description: Specifies whether active tracing with X-ray is enabled for
            the Stage.
          type: boolean
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].\
            \ The tag key can be up to 128 characters and must not start with <code>aws:</code>.\
            \ The tag value can be up to 256 characters."
          type: object
      required:
      - deploymentId
      - stageName
      type: object
    CreateUsagePlan_request_throttle:
      description: ' The API request rate limits.'
      properties:
        burstLimit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The API target request burst rate limit. This allows more
              requests through for a period of time than the target rate limit.
        rateLimit:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: The API target request rate limit.
      type: object
    CreateUsagePlan_request_quota:
      description: Quotas configured for a usage plan.
      properties:
        limit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The target maximum number of requests that can be made in
              a given time period.
        offset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The number of requests subtracted from the given limit in
              the initial time period.
        period:
          allOf:
          - $ref: '#/components/schemas/QuotaPeriodType'
          - description: "The time period in which the limit applies. Valid values\
              \ are \"DAY\", \"WEEK\" or \"MONTH\"."
      type: object
    CreateUsagePlan_request:
      properties:
        name:
          description: The name of the usage plan.
          type: string
        description:
          description: The description of the usage plan.
          type: string
        apiStages:
          description: The associated API stages of the usage plan.
          items:
            $ref: '#/components/schemas/ApiStage'
          type: array
        throttle:
          $ref: '#/components/schemas/CreateUsagePlan_request_throttle'
        quota:
          $ref: '#/components/schemas/CreateUsagePlan_request_quota'
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].\
            \ The tag key can be up to 128 characters and must not start with <code>aws:</code>.\
            \ The tag value can be up to 256 characters."
          type: object
      required:
      - name
      type: object
    CreateUsagePlanKey_request:
      properties:
        keyId:
          description: The identifier of a UsagePlanKey resource for a plan customer.
          type: string
        keyType:
          description: The type of a UsagePlanKey resource for a plan customer.
          type: string
      required:
      - keyId
      - keyType
      type: object
    CreateVpcLink_request:
      properties:
        name:
          description: The name used to label and identify the VPC link.
          type: string
        description:
          description: The description of the VPC link.
          type: string
        targetArns:
          description: The ARN of the network load balancer of the VPC targeted by
            the VPC link. The network load balancer must be owned by the same AWS
            account of the API owner.
          items:
            $ref: '#/components/schemas/String'
          type: array
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].\
            \ The tag key can be up to 128 characters and must not start with <code>aws:</code>.\
            \ The tag value can be up to 256 characters."
          type: object
      required:
      - name
      - targetArns
      type: object
    UpdateApiKey_request:
      properties:
        patchOperations:
          description: A list of operations describing the updates to apply to the
            specified resource. The patches are applied in the order specified in
            the list.
          items:
            $ref: '#/components/schemas/PatchOperation'
          type: array
      type: object
    TestInvokeAuthorizer_request:
      properties:
        headers:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "A key-value map of headers to simulate an incoming invocation\
            \ request. This is where the incoming authorization token, or identity\
            \ source, should be specified."
          type: object
        multiValueHeaders:
          additionalProperties:
            $ref: '#/components/schemas/ListOfString'
          description: "The headers as a map from string to list of values to simulate\
            \ an incoming invocation request. This is where the incoming authorization\
            \ token, or identity source, may be specified."
          type: object
        pathWithQueryString:
          description: "The URI path, including query string, of the simulated invocation\
            \ request. Use this to specify path parameters and query string parameters."
          type: string
        body:
          description: The simulated request body of an incoming invocation request.
          type: string
        stageVariables:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: A key-value map of stage variables to simulate an invocation
            on a deployed Stage.
          type: object
        additionalContext:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: A key-value map of additional context variables.
          type: object
      type: object
    PutGatewayResponse_request:
      properties:
        statusCode:
          description: The status code.
          pattern: "[1-5]\\d\\d"
          type: string
        responseParameters:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "Response parameters (paths, query strings and headers) of\
            \ the GatewayResponse as a string-to-string map of key-value pairs."
          type: object
        responseTemplates:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Response templates of the GatewayResponse as a string-to-string
            map of key-value pairs.
          type: object
      type: object
    PutIntegration_request_tlsConfig:
      description: Specifies the TLS configuration for an integration.
      properties:
        insecureSkipVerification:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "<p>Specifies whether or not API Gateway skips verification\
              \ that the certificate for an integration endpoint is issued by a supported\
              \ certificate authority. This isn’t recommended, but it enables you\
              \ to use certificates that are signed by private certificate authorities,\
              \ or certificates that are self-signed. If enabled, API Gateway still\
              \ performs basic certificate validation, which includes checking the\
              \ certificate's expiration date, hostname, and presence of a root certificate\
              \ authority. Supported only for <code>HTTP</code> and <code>HTTP_PROXY</code>\
              \ integrations.</p> <important> <p>Enabling <code>insecureSkipVerification</code>\
              \ isn't recommended, especially for integrations with public HTTPS endpoints.\
              \ If you enable <code>insecureSkipVerification</code>, you increase\
              \ the risk of man-in-the-middle attacks.</p> </important>"
      type: object
    PutIntegration_request:
      properties:
        type:
          description: 'The integration type. The valid value is <code>HTTP</code>
            for integrating an API method with an HTTP backend; <code>AWS</code> with
            any AWS service endpoints; <code>MOCK</code> for testing without actually
            invoking the backend; <code>HTTP_PROXY</code> for integrating with the
            HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the
            Lambda proxy integration. '
          enum:
          - HTTP
          - AWS
          - MOCK
          - HTTP_PROXY
          - AWS_PROXY
          type: string
        httpMethod:
          description: The HTTP method for the integration.
          type: string
        uri:
          description: "Specifies Uniform Resource Identifier (URI) of the integration\
            \ endpoint. For HTTP or <code>HTTP_PROXY</code> integrations, the URI\
            \ must be a fully formed, encoded HTTP(S) URL according to the RFC-3986\
            \ specification, for either standard integration, where <code>connectionType</code>\
            \ is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code>\
            \ is <code>VPC_LINK</code>. For a private HTTP integration, the URI is\
            \ not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code>\
            \ integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}.\
            \ Here, {Region} is the API Gateway region (e.g., us-east-1); {service}\
            \ is the name of the integrated Amazon Web Services service (e.g., s3);\
            \ and {subdomain} is a designated subdomain supported by certain Amazon\
            \ Web Services service for fast host-name lookup. action can be used for\
            \ an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}...\
            \ query string. The ensuing {service_api} refers to a supported action\
            \ {name} plus any required input parameters. Alternatively, path can be\
            \ used for an Amazon Web Services service path-based API. The ensuing\
            \ service_api refers to the path to an Amazon Web Services service resource,\
            \ including the region of the integrated Amazon Web Services service,\
            \ if applicable. For example, for integration with the S3 API of <code>GetObject</code>,\
            \ the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code>\
            \ or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>."
          type: string
        connectionType:
          description: The type of the network connection to the integration endpoint.
            The valid value is <code>INTERNET</code> for connections through the public
            routable internet or <code>VPC_LINK</code> for private connections between
            API Gateway and a network load balancer in a VPC. The default value is
            <code>INTERNET</code>.
          enum:
          - INTERNET
          - VPC_LINK
          type: string
        connectionId:
          description: The ID of the VpcLink used for the integration. Specify this
            value only if you specify <code>VPC_LINK</code> as the connection type.
          type: string
        credentials:
          description: Specifies whether credentials are required for a put integration.
          type: string
        requestParameters:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "A key-value map specifying request parameters that are passed\
            \ from the method request to the back end. The key is an integration request\
            \ parameter name and the associated value is a method request parameter\
            \ value or static value that must be enclosed within single quotes and\
            \ pre-encoded as required by the back end. The method request parameter\
            \ value must match the pattern of <code>method.request.{location}.{name}</code>,\
            \ where <code>location</code> is <code>querystring</code>, <code>path</code>,\
            \ or <code>header</code> and <code>name</code> must be a valid and unique\
            \ method request parameter name."
          type: object
        requestTemplates:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "Represents a map of Velocity templates that are applied on\
            \ the request payload based on the value of the Content-Type header sent\
            \ by the client. The content type value is the key in this map, and the\
            \ template (as a String) is the value."
          type: object
        passthroughBehavior:
          description: "Specifies the pass-through behavior for incoming requests\
            \ based on the Content-Type header in the request, and the available mapping\
            \ templates specified as the <code>requestTemplates</code> property on\
            \ the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>,\
            \ <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. "
          type: string
        cacheNamespace:
          description: "Specifies a group of related cached parameters. By default,\
            \ API Gateway uses the resource ID as the <code>cacheNamespace</code>.\
            \ You can specify the same <code>cacheNamespace</code> across resources\
            \ to return the same cached data for requests to different resources."
          type: string
        cacheKeyParameters:
          description: "A list of request parameters whose values API Gateway caches.\
            \ To be valid values for <code>cacheKeyParameters</code>, these parameters\
            \ must also be specified for Method <code>requestParameters</code>."
          items:
            $ref: '#/components/schemas/String'
          type: array
        contentHandling:
          description: "<p>Specifies how to handle request payload content type conversions.\
            \ Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>,\
            \ with the following behaviors:</p> <p>If this property is not defined,\
            \ the request payload will be passed through from the method request to\
            \ integration request without modification, provided that the <code>passthroughBehavior</code>\
            \ is configured to support payload pass-through.</p>"
          enum:
          - CONVERT_TO_BINARY
          - CONVERT_TO_TEXT
          type: string
        timeoutInMillis:
          description: "Custom timeout between 50 and 29,000 milliseconds. The default\
            \ value is 29,000 milliseconds or 29 seconds."
          type: integer
        tlsConfig:
          $ref: '#/components/schemas/PutIntegration_request_tlsConfig'
      required:
      - type
      type: object
    PutIntegrationResponse_request:
      properties:
        selectionPattern:
          description: Specifies the selection pattern of a put integration response.
          type: string
        responseParameters:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "A key-value map specifying response parameters that are passed\
            \ to the method response from the back end. The key is a method response\
            \ header parameter name and the mapped value is an integration response\
            \ header value, a static value enclosed within a pair of single quotes,\
            \ or a JSON expression from the integration response body. The mapping\
            \ key must match the pattern of <code>method.response.header.{name}</code>,\
            \ where <code>name</code> is a valid and unique header name. The mapped\
            \ non-static value must match the pattern of <code>integration.response.header.{name}</code>\
            \ or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code>\
            \ must be a valid and unique response header name and <code>JSON-expression</code>\
            \ a valid JSON expression without the <code>$</code> prefix."
          type: object
        responseTemplates:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Specifies a put integration response's templates.
          type: object
        contentHandling:
          description: "<p>Specifies how to handle response payload content type conversions.\
            \ Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>,\
            \ with the following behaviors:</p> <p>If this property is not defined,\
            \ the response payload will be passed through from the integration response\
            \ to the method response without modification.</p>"
          enum:
          - CONVERT_TO_BINARY
          - CONVERT_TO_TEXT
          type: string
      type: object
    PutMethod_request:
      properties:
        authorizationType:
          description: "The method's authorization type. Valid values are <code>NONE</code>\
            \ for open access, <code>AWS_IAM</code> for using AWS IAM permissions,\
            \ <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code>\
            \ for using a Cognito user pool."
          type: string
        authorizerId:
          description: "Specifies the identifier of an Authorizer to use on this Method,\
            \ if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier\
            \ is generated by API Gateway when you created the authorizer."
          type: string
        apiKeyRequired:
          description: Specifies whether the method required a valid ApiKey.
          type: boolean
        operationName:
          description: "A human-friendly operation identifier for the method. For\
            \ example, you can assign the <code>operationName</code> of <code>ListPets</code>\
            \ for the <code>GET /pets</code> method in the <code>PetStore</code> example."
          type: string
        requestParameters:
          additionalProperties:
            $ref: '#/components/schemas/NullableBoolean'
          description: "A key-value map defining required or optional method request\
            \ parameters that can be accepted by API Gateway. A key defines a method\
            \ request parameter name matching the pattern of <code>method.request.{location}.{name}</code>,\
            \ where <code>location</code> is <code>querystring</code>, <code>path</code>,\
            \ or <code>header</code> and <code>name</code> is a valid and unique parameter\
            \ name. The value associated with the key is a Boolean flag indicating\
            \ whether the parameter is required (<code>true</code>) or optional (<code>false</code>).\
            \ The method request parameter names defined here are available in Integration\
            \ to be mapped to integration request parameters or body-mapping templates."
          type: object
        requestModels:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "Specifies the Model resources used for the request's content\
            \ type. Request models are represented as a key/value map, with a content\
            \ type as the key and a Model name as the value."
          type: object
        requestValidatorId:
          description: The identifier of a RequestValidator for validating the method
            request.
          type: string
        authorizationScopes:
          description: "A list of authorization scopes configured on the method. The\
            \ scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to\
            \ authorize the method invocation. The authorization works by matching\
            \ the method scopes against the scopes parsed from the access token in\
            \ the incoming request. The method invocation is authorized if any method\
            \ scopes matches a claimed scope in the access token. Otherwise, the invocation\
            \ is not authorized. When the method scope is configured, the client must\
            \ provide an access token instead of an identity token for authorization\
            \ purposes."
          items:
            $ref: '#/components/schemas/String'
          type: array
      required:
      - authorizationType
      type: object
    TestInvokeMethod_request:
      properties:
        pathWithQueryString:
          description: "The URI path, including query string, of the simulated invocation\
            \ request. Use this to specify path parameters and query string parameters."
          type: string
        body:
          description: The simulated request body of an incoming invocation request.
          type: string
        headers:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: A key-value map of headers to simulate an incoming invocation
            request.
          type: object
        multiValueHeaders:
          additionalProperties:
            $ref: '#/components/schemas/ListOfString'
          description: The headers as a map from string to list of values to simulate
            an incoming invocation request.
          type: object
        clientCertificateId:
          description: A ClientCertificate identifier to use in the test invocation.
            API Gateway will use the certificate when making the HTTPS request to
            the defined back-end endpoint.
          type: string
        stageVariables:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: A key-value map of stage variables to simulate an invocation
            on a deployed Stage.
          type: object
      type: object
    PutMethodResponse_request:
      properties:
        responseParameters:
          additionalProperties:
            $ref: '#/components/schemas/NullableBoolean'
          description: "A key-value map specifying required or optional response parameters\
            \ that API Gateway can send back to the caller. A key defines a method\
            \ response header name and the associated value is a Boolean flag indicating\
            \ whether the method response parameter is required or not. The method\
            \ response header names must match the pattern of <code>method.response.header.{name}</code>,\
            \ where <code>name</code> is a valid and unique header name. The response\
            \ parameter names defined here are available in the integration response\
            \ to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>,\
            \ a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>),\
            \ or a JSON expression from the back-end response payload in the form\
            \ of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code>\
            \ is a valid JSON expression without the <code>$</code> prefix.)"
          type: object
        responseModels:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "Specifies the Model resources used for the response's content\
            \ type. Response models are represented as a key/value map, with a content\
            \ type as the key and a Model name as the value."
          type: object
      type: object
    PutRestApi_request:
      properties:
        body:
          description: "The PUT request body containing external API definitions.\
            \ Currently, only OpenAPI definition JSON/YAML files are supported. The\
            \ maximum size of the API definition file is 6MB."
          type: string
      required:
      - body
      type: object
    GenerateClientCertificate_request:
      properties:
        description:
          description: The description of the ClientCertificate.
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].\
            \ The tag key can be up to 128 characters and must not start with <code>aws:</code>.\
            \ The tag value can be up to 256 characters."
          type: object
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].\
            \ The tag key can be up to 128 characters and must not start with <code>aws:</code>.\
            \ The tag value can be up to 256 characters."
          type: object
      required:
      - tags
      type: object
    ImportApiKeys_request:
      properties:
        body:
          description: "The payload of the POST request to import API keys. For the\
            \ payload format, see API Key File Format."
          type: string
      required:
      - body
      type: object
    ImportRestApi_request:
      properties:
        body:
          description: "The POST request body containing external API definitions.\
            \ Currently, only OpenAPI definition JSON/YAML files are supported. The\
            \ maximum size of the API definition file is 6MB."
          type: string
      required:
      - body
      type: object
    DocumentationPart_location:
      allOf:
      - $ref: '#/components/schemas/DocumentationPartLocation'
      - description: "The location of the API entity to which the documentation applies.\
          \ Valid fields depend on the targeted API entity type. All the valid location\
          \ fields are not required. If not explicitly specified, a valid location\
          \ field is treated as a wildcard and associated documentation content may\
          \ be inherited by matching entities, unless overridden."
      example:
        path: ""
        method: ""
        name: ""
        type: ""
        statusCode: ""
    DomainName_endpointConfiguration:
      allOf:
      - $ref: '#/components/schemas/EndpointConfiguration'
      - description: 'The endpoint configuration of this DomainName showing the endpoint
          types of the domain name. '
      example:
        types: ""
        vpcEndpointIds: ""
    DomainName_mutualTlsAuthentication:
      allOf:
      - $ref: '#/components/schemas/MutualTlsAuthentication'
      - description: "The mutual TLS authentication configuration for a custom domain\
          \ name. If specified, API Gateway performs two-way authentication between\
          \ the client and the server. Clients must present a trusted certificate\
          \ to access your API."
      example:
        truststoreVersion: ""
        truststoreUri: ""
        truststoreWarnings: ""
    RestApi_endpointConfiguration:
      allOf:
      - $ref: '#/components/schemas/EndpointConfiguration'
      - description: 'The endpoint configuration of this RestApi showing the endpoint
          types of the API. '
      example:
        types: ""
        vpcEndpointIds: ""
    Stage_accessLogSettings:
      allOf:
      - $ref: '#/components/schemas/AccessLogSettings'
      - description: Settings for logging access in this stage.
      example:
        destinationArn: ""
        format: ""
    Stage_canarySettings:
      allOf:
      - $ref: '#/components/schemas/CanarySettings'
      - description: Settings for the canary deployment in this stage.
      example:
        stageVariableOverrides: ""
        percentTraffic: ""
        deploymentId: ""
        useStageCache: ""
    UsagePlan_throttle:
      allOf:
      - $ref: '#/components/schemas/ThrottleSettings'
      - description: A map containing method level throttling information for API
          stage in a usage plan.
      example:
        burstLimit: ""
        rateLimit: ""
    UsagePlan_quota:
      allOf:
      - $ref: '#/components/schemas/QuotaSettings'
      - description: The target maximum number of permitted requests per a given unit
          time interval.
      example:
        period: ""
        offset: ""
        limit: ""
    Account_throttleSettings:
      allOf:
      - $ref: '#/components/schemas/ThrottleSettings'
      - description: Specifies the API request limits configured for the current Account.
      example:
        burstLimit: ""
        rateLimit: ""
    Integration_tlsConfig:
      allOf:
      - $ref: '#/components/schemas/TlsConfig'
      - description: Specifies the TLS configuration for an integration.
      example:
        insecureSkipVerification: ""
    Method_methodIntegration:
      allOf:
      - $ref: '#/components/schemas/Integration'
      - description: Gets the method's integration responsible for passing the client-submitted
          request to the back end and performing necessary transformations to make
          the request compliant with the back end.
      example:
        credentials: ""
        requestParameters: ""
        cacheKeyParameters: ""
        integrationResponses: ""
        contentHandling: ""
        type: ""
        httpMethod: ""
        cacheNamespace: ""
        uri: ""
        connectionType: ""
        timeoutInMillis: ""
        tlsConfig:
          insecureSkipVerification: ""
        requestTemplates: ""
        passthroughBehavior: ""
        connectionId: ""
    CreateDeploymentRequest_canarySettings:
      allOf:
      - $ref: '#/components/schemas/DeploymentCanarySettings'
      - description: 'The input configuration for the canary deployment when the deployment
          is a canary release deployment. '
      example:
        stageVariableOverrides: ""
        percentTraffic: ""
        useStageCache: ""
    CreateDocumentationPartRequest_location:
      allOf:
      - $ref: '#/components/schemas/DocumentationPartLocation'
      - description: The location of the targeted API entity of the to-be-created
          documentation part.
      example:
        path: ""
        method: ""
        name: ""
        type: ""
        statusCode: ""
    CreateStageRequest_canarySettings:
      allOf:
      - $ref: '#/components/schemas/CanarySettings'
      - description: The canary deployment settings of this stage.
      example:
        stageVariableOverrides: ""
        percentTraffic: ""
        deploymentId: ""
        useStageCache: ""
    CreateUsagePlanRequest_throttle:
      allOf:
      - $ref: '#/components/schemas/ThrottleSettings'
      - description: The throttling limits of the usage plan.
      example:
        burstLimit: ""
        rateLimit: ""
    CreateUsagePlanRequest_quota:
      allOf:
      - $ref: '#/components/schemas/QuotaSettings'
      - description: The quota of the usage plan.
      example:
        period: ""
        offset: ""
        limit: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

